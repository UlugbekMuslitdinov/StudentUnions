{"version":3,"sources":["actions.js","Selector.js","Form.js","App.js","serviceWorker.js","rootReducer.js","index.js"],"names":["FETCH_LOCATION_LIST","FETCH_LOCATION_LIST_SUCCESS","FETCH_LOCATION_LIST_FAILED","fetchList","dispatch","type","fetch","then","res","json","locations","catch","err","fetchListFailure","UPDATE_LOCATIONS","ADD_FEEDBACK","UPDATE_TEXT","FORM_SUBMIT","FORM_SUBMIT_SUCCESS","FORM_SUBMIT_FAILED","submitForm","getState","form","formData","name","email","feedback","body","JSON","stringify","method","ok","Error","formSubmitSuccess","formSubmitFailure","Selector","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","options","selectedOption","handleChange","bind","assertThisInitialized","updateLocations","_this2","_this$props$state","selectedLocations","react_default","a","createElement","react_select_esm","isMulti","onChange","value","className","classNamePrefix","Component","connect","FormPage","handleText","e","_e$target","target","updateText","errors","submitted","style","color","marginLeft","Form","paddingLeft","length","UncontrolledAlert","FormGroup","row","Label","for","sm","Col","Input","id","placeholder","width","src_Selector","required","map","location","i","key","check","marginTop","size","Button","onClick","React","loc","text","addFeedback","field","App","Container","Jumbotron","src_Form","Boolean","window","hostname","match","initialState","list","loading","reducer","arguments","undefined","action","objectSpread","l","location_name","label","push","defineProperty","store","createStore","rootReducer","compose","applyMiddleware","thunkMiddleware","logger","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2VAAaA,EAAsB,aACtBC,EAA4B,qBAC5BC,EAA2B,oBAsBjC,SAASC,IACZ,OAAO,SAASC,GACZA,EArBG,CACHC,KAAML,IAqBNM,MAAM,mCACLC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GAAI,OAAIL,EAlBX,CACHC,KAAMJ,EACNS,UAgBwCD,MACvCE,MAAM,SAAAC,GAAG,OAAIR,EAbtB,SAA0BQ,GACtB,MAAO,CACHP,KAAMH,EACNU,OAUuBC,CAAiBD,OAMzC,IAAME,EAAmB,mBASzB,IAAMC,EAAe,eAWrB,IAAMC,EAAc,cAWpB,IAAMC,EAAc,cACdC,EAAsB,sBACtBC,EAAqB,qBAsB3B,SAASC,IACZ,OAAO,SAAChB,EAAUiB,GACdjB,EArBG,CACHC,KAAMY,IAsBN,IAAIK,EAAOD,IAEPE,EAAW,CACXC,KAASF,EAAKE,KACdC,MAAUH,EAAKG,MACfC,SAAaJ,EAAKI,UAGtBpB,MAAM,oCAAqC,CACvCqB,KAAMC,KAAKC,UAAUN,GACrBO,OAAQ,SAEXvB,KAAK,SAACC,GACH,GAAGA,EAAIuB,GACH,OAAOvB,EAAIC,OAEX,MAAM,IAAIuB,MAAM,wBAGvBzB,KAAK,SAAAC,GAAG,OAAIJ,EArCrB,SAA2BI,GACvB,MAAO,CACHH,KAAMa,EACNV,OAkCsByB,CAAkBzB,MACvCG,MAAM,SAAAC,GACHR,EAhCZ,SAA2BQ,GACvB,MAAO,CACHP,KAAMc,EACNP,OA6BasB,CAAkBtB,OCzGvC,IAOMuB,cACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,QAAS,GACTC,eAAgB,MAGpBT,EAAKU,aAAeV,EAAKU,aAAaC,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAPLA,mFAWfG,KAAKJ,MAAMjC,iDAGFO,GACT8B,KAAKJ,MAAMc,gBAAgBxC,oCAGtB,IAAAyC,EAAAX,KAAAY,EAEoCZ,KAAKJ,MAAMQ,MAA5CS,EAFHD,EAEGC,kBAAmB3C,EAFtB0C,EAEsB1C,UAE3B,OACI4C,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIC,SAAO,EACPlC,KAAK,SACLmC,SAAU,SAACjD,GAAD,OAAeyC,EAAKJ,aAAarC,IAC3CmC,QAASnC,EACTkD,MAAOP,EACPQ,UAAU,qBACVC,gBAAgB,kBA/BTC,aAqCRC,cAlDf,SAAyBpB,GACrB,MAAO,CACHA,UAImB,SAAAxC,GAAQ,MAC/B,CACID,UAAW,kBAAMC,EAASD,MAC1B+C,gBAAiB,SAACxC,GAAD,OAAeN,EDwBjC,SAAyBM,GAC5B,MAAO,CACHL,KAAMS,EACNJ,aC3ByCwC,CAAgBxC,OAyClDsD,CAGb7B,GC9CF,IAQM8B,cAEJ,SAAAA,EAAY7B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyB,IACjB5B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2B,GAAAtB,KAAAH,KAAMJ,KACD8B,WAAa7B,EAAK6B,WAAWlB,KAAhBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAFDA,0EAKR8B,GAAG,IAAAC,EACUD,EAAEE,OAAlBT,EADMQ,EACNR,MAAOpC,EADD4C,EACC5C,KACbgB,KAAKJ,MAAMkC,WAAW9C,EAAMoC,oCAGrB,IAAAT,EAAAX,KAAAY,EAEwCZ,KAAKJ,MAAMQ,MAApDS,EAFCD,EAEDC,kBAAmBkB,EAFlBnB,EAEkBmB,OAAQC,EAF1BpB,EAE0BoB,UAEjC,OACElB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIK,UAAU,YAAYY,MAAO,CAAEC,MAAO,YAA1C,8BAGApB,EAAAC,EAAAC,cAAA,KAAGiB,MAAO,CAACE,WAAY,SAAvB,gEAEArB,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMH,MAAO,CAACI,YAAa,SAGvBN,EAAOO,OAAS,EACZxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAmBL,MAAM,SAASb,UAAU,aAA5C,sBAGA,KAIc,IAAlBU,EAAOO,QAAgBN,EACnBlB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAmBL,MAAM,WAAzB,gCAGA,KAGNpB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAWC,KAAG,GACZ3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAOC,IAAI,OAAOC,GAAI,IAAtB,QACA9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAKD,GAAI,IACP9B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CACE3B,SAAUnB,KAAK0B,WACf7D,KAAK,OACLmB,KAAK,OACL+D,GAAG,OACHC,YAAY,OACZf,MAAO,CAACgB,MAAO,aAKrBnC,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAWC,KAAG,GACZ3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAOC,IAAI,QAAQC,GAAI,IAAvB,SACA9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAKD,GAAI,IACP9B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAO3B,SAAUnB,KAAK0B,WACpB7D,KAAK,QACLmB,KAAK,QACL+D,GAAG,QACHC,YAAY,4BACZf,MAAO,CAACgB,MAAO,aAKrBnC,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAWC,KAAG,GACZ3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAOC,IAAI,qBAAqBC,GAAI,IAApC,mBAAwD9B,EAAAC,EAAAC,cAAA,OAAKK,UAAU,eAAf,MACxDP,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAKD,GAAI,IACP9B,EAAAC,EAAAC,cAACkC,EAAD,CAAUC,UAAQ,MAIrBtC,EAAkBuC,IAAI,SAACC,EAAUC,GAChC,OACExC,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAWe,IAAKD,EAAGb,KAAG,GACpB3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CACET,MAAO,CAAEC,MAAO,WAChBS,IAAI,cACJC,GAAI,IACHS,EAASjC,MACVN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,eAAf,MAEFP,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAKD,GAAI,IACP9B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CACEjF,KAAK,WACLsD,SAAU,SAAAQ,GAAC,OAAIhB,EAAKf,MAAMV,SAASmE,EAASjC,MAAOO,EAAEE,OAAOT,QAC5DpC,KAAMqE,EAASjC,MAAQ,YAAa2B,GAAG,qBAQjDjC,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAWgB,OAAK,EAACf,KAAG,EAACR,MAAO,CAACwB,UAAW,OAAQpB,YAAa,SAC3DvB,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAKD,GAAI,CAAEc,KAAM,IAAMzB,MAAO,CAACI,YAAa,QAC1CvB,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAQzB,MAAM,GAAGb,UAAU,0BAA0BuC,QAAS5D,KAAKJ,MAAMhB,YAAzE,qBArGSiF,IAAMtC,WA8GdC,cA5Hf,SAAyBpB,GACvB,MAAO,CACLA,UAIuB,SAAAxC,GAAQ,MACjC,CACEsB,SAAU,SAAC4E,EAAKC,GAAN,OAAenG,EFiCtB,SAAqByF,EAAUU,GAClC,MAAO,CACHlG,KAAMU,EACN8E,WACAU,QErC8BC,CAAYF,EAAKC,KACnDnF,WAAY,kBAAMhB,EAASgB,MAC3BkD,WAAY,SAAC9C,EAAM+E,GAAP,OAAgBnG,EF0CzB,SAAoBqG,EAAOF,GAC9B,MAAO,CACHlG,KAAMW,EACNyF,QACAF,QE9CiCjC,CAAW9C,EAAM+E,OAkH3CvC,CAGbC,mBChHayC,mLAbX,OACEpD,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAACmD,EAAA,EAAD,KACErD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,KACEtD,EAAAC,EAAAC,cAACqD,EAAD,gBAPM9C,aCME+C,QACW,cAA7BC,OAAOlB,SAASmB,UAEe,UAA7BD,OAAOlB,SAASmB,UAEhBD,OAAOlB,SAASmB,SAASC,MACvB,4FCNAC,EAAe,CACjB3C,OAAQ,GACR4C,KAAM,GACNC,SAAS,EACT1G,UAAW,GACXgB,SAAU,GACVF,KAAM,GACNC,MAAO,GACP4B,kBAAmB,GACnBmB,WAAW,GA8FA6C,MA1Ff,WAA+C,IAA9BzE,EAA8B0E,UAAAxC,OAAA,QAAAyC,IAAAD,UAAA,GAAAA,UAAA,GAAtBJ,EAAcM,EAAQF,UAAAxC,OAAA,EAAAwC,UAAA,QAAAC,EAC3C,OAAQC,EAAOnH,MACX,KAAKL,EACD,OAAOsC,OAAAmF,EAAA,EAAAnF,CAAA,GAAKM,EAAZ,CAAmBwE,SAAS,IAEhC,KAAKnH,EAGD,IAFA,IAAIS,EAAY8G,EAAO9G,UAEdoF,EAAI,EAAGA,EAAIpF,EAAUoE,OAAQgB,IAAK,CACvC,IAAI4B,EAAIhH,EAAUoF,GACM,kBAApB4B,EAAEC,gBACFjH,EAAUoF,GAAKpF,EAAU,GACzBA,EAAU,GAAKgH,GASvB,OALAhH,EAAUkF,IAAI,SAACC,GACXA,EAASjC,MAAQiC,EAAS8B,cAC1B9B,EAAS+B,MAAQ/B,EAAS8B,gBAGvBrF,OAAAmF,EAAA,EAAAnF,CAAA,GACAM,EADP,CAEIwE,SAAS,EACT1G,cAGR,KAAKR,EACD,IAAIqE,EAAS3B,EAAM2B,OAGnB,OAFAA,EAAOsD,KAAKL,EAAO5G,KAEZ0B,OAAAmF,EAAA,EAAAnF,CAAA,GACAM,EADP,CAEI2B,SACA6C,SAAS,IAGjB,KAAKtG,EACD,OAAOwB,OAAAmF,EAAA,EAAAnF,CAAA,GACAM,EADP,CAEIS,kBAAmBmE,EAAO9G,YAGlC,KAAKK,EACD,IAAIW,EAAWkB,EAAMlB,SAErB,OADAA,EAAS8F,EAAO3B,UAAY2B,EAAOjB,KAC5BjE,OAAAmF,EAAA,EAAAnF,CAAA,GACAM,EADP,CAEIlB,aAGR,KAAKV,EAAa,IACTyF,EAAee,EAAff,MAAOF,EAAQiB,EAARjB,KACZ,OAAOjE,OAAAmF,EAAA,EAAAnF,CAAA,GACAM,EADPN,OAAAwF,EAAA,EAAAxF,CAAA,GAEKmE,EAAQF,IAGjB,KAAKtF,EACD,OAAOqB,OAAAmF,EAAA,EAAAnF,CAAA,GACAM,EADP,CAEIwE,SAAS,IAGjB,KAAKlG,EAED,OAAOoB,OAAAmF,EAAA,EAAAnF,CAAA,GACAM,EADP,CAEI4B,WAAW,EACX4C,SAAS,EACT7C,OAAQ,GACR7C,SAAU,GACV2B,kBAAmB,KAG3B,KAAKlC,EACD,IAAIoD,EAAS3B,EAAM2B,OAGnB,OAFAA,EAAOsD,KAAKL,EAAO5G,KAEZ0B,OAAAmF,EAAA,EAAAnF,CAAA,GACAM,EADP,CAEI4B,WAAW,EACX4C,SAAS,EACT7C,WAGR,QAAS,OAAO3B,6BCjGlBmF,EAAQC,YACVC,EACAC,YACAC,YAAgBC,KAChBD,YAAgBE,OAIpBC,IAASC,OACLjF,EAAAC,EAAAC,cAACgF,EAAA,EAAD,CAAUT,MAAOA,GACbzE,EAAAC,EAAAC,cAACiF,EAAD,OAEFC,SAASC,eAAe,SFuGxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvI,KAAK,SAAAwI,GACjCA,EAAaC","file":"static/js/main.e4ec3708.chunk.js","sourcesContent":["export const FETCH_LOCATION_LIST = 'FETCH_LIST';\r\nexport const FETCH_LOCATION_LIST_SUCCESS='FETCH_LIST_SUCCESS'\r\nexport const FETCH_LOCATION_LIST_FAILED='FETCH_LIST_FAILED'\r\n\r\nfunction initiateFetchList() {\r\n    return {\r\n        type: FETCH_LOCATION_LIST\r\n    }\r\n}\r\n\r\nfunction fetchListSuccess(locations) {\r\n    return {\r\n        type: FETCH_LOCATION_LIST_SUCCESS,\r\n        locations\r\n    }\r\n}\r\n\r\nfunction fetchListFailure(err) {\r\n    return {\r\n        type: FETCH_LOCATION_LIST_FAILED,\r\n        err\r\n    }\r\n}\r\n\r\nexport function fetchList() {\r\n    return function(dispatch) {\r\n        dispatch(initiateFetchList());\r\n        fetch('/feedback/api/get_locations.php')\r\n        .then(res => res.json())\r\n        .then(json => dispatch(fetchListSuccess(json)))\r\n        .catch(err => dispatch(fetchListFailure(err)))\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const UPDATE_LOCATIONS = 'UPDATE_LOCATIONS';\r\n\r\nexport function updateLocations(locations) {\r\n    return {\r\n        type: UPDATE_LOCATIONS,\r\n        locations\r\n    }\r\n}\r\n\r\nexport const ADD_FEEDBACK = 'ADD_FEEDBACK';\r\n\r\nexport function addFeedback(location, text) {\r\n    return {\r\n        type: ADD_FEEDBACK,\r\n        location,\r\n        text\r\n    }\r\n}\r\n\r\n\r\nexport const UPDATE_TEXT = 'UPDATE_TEXT';\r\n\r\nexport function updateText(field, text) {\r\n    return {\r\n        type: UPDATE_TEXT,\r\n        field,\r\n        text\r\n    }\r\n}\r\n\r\n\r\nexport const FORM_SUBMIT = 'FORM_SUBMIT';\r\nexport const FORM_SUBMIT_SUCCESS = 'FORM_SUBMIT_SUCCESS';\r\nexport const FORM_SUBMIT_FAILED = 'FORM_SUBMIT_FAILED';\r\n\r\nfunction initFormSubmit() {\r\n    return {\r\n        type: FORM_SUBMIT\r\n    }\r\n}\r\n\r\nfunction formSubmitSuccess(res) {\r\n    return {\r\n        type: FORM_SUBMIT_SUCCESS,\r\n        res\r\n    }\r\n}\r\n\r\nfunction formSubmitFailure(err) {\r\n    return {\r\n        type: FORM_SUBMIT_FAILED,\r\n        err\r\n    }\r\n}\r\n\r\nexport function submitForm() {\r\n    return (dispatch, getState) => {\r\n        dispatch(initFormSubmit());\r\n\r\n        let form = getState();\r\n\r\n        let formData = {\r\n            'name' : form.name,\r\n            'email' : form.email,\r\n            'feedback' : form.feedback\r\n        };\r\n\r\n        fetch('/feedback/api/insert_feedback.php', {\r\n            body: JSON.stringify(formData),\r\n            method: 'POST'\r\n        })\r\n        .then((res) => {\r\n            if(res.ok) {\r\n                return res.json()\r\n            } else {\r\n                throw new Error('An error occurred.');\r\n            }\r\n        })\r\n        .then(res => dispatch(formSubmitSuccess(res)))\r\n        .catch(err => {\r\n            dispatch(formSubmitFailure(err));\r\n        })\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Select from 'react-select';\r\nimport { connect } from 'react-redux';\r\nimport {fetchList, updateLocations} from './actions'\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        state\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => (\r\n    {\r\n        fetchList: () => dispatch(fetchList()),\r\n        updateLocations: (locations) => dispatch(updateLocations(locations))\r\n    }\r\n)\r\n\r\nclass Selector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            options: [],\r\n            selectedOption: null\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchList();\r\n    }\r\n\r\n    handleChange(locations) {\r\n        this.props.updateLocations(locations);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { selectedLocations, locations } = this.props.state;\r\n\r\n        return (\r\n            <Select\r\n                isMulti\r\n                name=\"colors\"\r\n                onChange={(locations) => this.handleChange(locations)}\r\n                options={locations}\r\n                value={selectedLocations}\r\n                className=\"basic-multi-select\"\r\n                classNamePrefix=\"select\"\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Selector);","import React from 'react';\r\nimport { Col, Button, Form, FormGroup, Label, Input, UncontrolledAlert } from 'reactstrap';\r\nimport Selector from './Selector';\r\nimport { connect } from 'react-redux';\r\nimport { submitForm, addFeedback, updateText } from \"./actions\";\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    state\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => (\r\n  {\r\n    feedback: (loc, text) => dispatch(addFeedback(loc, text)),\r\n    submitForm: () => dispatch(submitForm()),\r\n    updateText: (name, text) => dispatch(updateText(name, text))\r\n  }\r\n)\r\n\r\nclass FormPage extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleText = this.handleText.bind(this);\r\n  }\r\n\r\n  handleText(e) {\r\n    let { value, name } = e.target;\r\n    this.props.updateText(name, value);\r\n  }\r\n\r\n  render() {\r\n\r\n    let { selectedLocations, errors, submitted } = this.props.state;\r\n\r\n    return (\r\n      <div>\r\n        <h2 className=\"display-4\" style={{ color: '#003366' }}>\r\n          Student Union Feedback box\r\n        </h2>\r\n        <p style={{marginLeft: '10px'}}>Comments, questions or requests go in our cool feedback box.</p>\r\n\r\n        <hr />\r\n\r\n        <Form style={{paddingLeft: '10px'}}>\r\n\r\n          {\r\n            errors.length > 0\r\n              ? <UncontrolledAlert color=\"danger\" className=\"col-md-10\">\r\n                An error occurred.\r\n            </UncontrolledAlert>\r\n              : null\r\n          }\r\n\r\n          {\r\n            errors.length === 0 && submitted\r\n              ? <UncontrolledAlert color=\"success\">\r\n                Form submitted successfully!\r\n            </UncontrolledAlert>\r\n              : null\r\n          }\r\n\r\n          <FormGroup row>\r\n            <Label for=\"name\" sm={12}>Name</Label>\r\n            <Col sm={10}>\r\n              <Input\r\n                onChange={this.handleText}\r\n                type=\"text\"\r\n                name=\"name\"\r\n                id=\"name\"\r\n                placeholder=\"Name\"\r\n                style={{width: '400px'}}\r\n              />\r\n            </Col>\r\n          </FormGroup>\r\n\r\n          <FormGroup row>\r\n            <Label for=\"email\" sm={12}>Email</Label>\r\n            <Col sm={10}>\r\n              <Input onChange={this.handleText}\r\n                type=\"email\"\r\n                name=\"email\"\r\n                id=\"email\"\r\n                placeholder=\"example@email.arizona.edu\"\r\n                style={{width: '400px'}}\r\n              />\r\n            </Col>\r\n          </FormGroup>\r\n\r\n          <FormGroup row>\r\n            <Label for=\"exampleSelectMulti\" sm={12}>Select Locations<sup className=\"text-danger\">*</sup></Label>\r\n            <Col sm={10}>\r\n              <Selector required />\r\n            </Col>\r\n          </FormGroup>\r\n\r\n          {selectedLocations.map((location, i) => {\r\n            return (\r\n              <FormGroup key={i} row>\r\n                <Label\r\n                  style={{ color: '#CC0033' }}\r\n                  for=\"exampleText\"\r\n                  sm={12}>\r\n                  {location.value}\r\n                  <sup className=\"text-danger\">*</sup>\r\n                </Label>\r\n                <Col sm={10}>\r\n                  <Input\r\n                    type=\"textarea\"\r\n                    onChange={e => this.props.feedback(location.value, e.target.value)}\r\n                    name={location.value + \"_feedback\"} id=\"feedback_box\"\r\n                  />\r\n                </Col>\r\n              </FormGroup>\r\n            );\r\n          })}\r\n\r\n\r\n          <FormGroup check row style={{marginTop: '40px', paddingLeft: '16px'}}>\r\n            <Col sm={{ size: 10 }} style={{paddingLeft: '0px'}}>\r\n              <Button color=\"\" className=\"su-btn btn-lg btn-block\" onClick={this.props.submitForm}>Submit</Button>\r\n            </Col>\r\n          </FormGroup>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(FormPage);","import React, { Component } from 'react';\nimport './App.css';\nimport FormPage from './Form';\nimport { Container, Jumbotron } from 'reactstrap'\n// import Navbar from './Navbar'\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        {/* <Navbar /> */}\n        <Container >\n          <Jumbotron>\n            <FormPage />\n          </Jumbotron>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    FETCH_LOCATION_LIST,\r\n    FETCH_LOCATION_LIST_SUCCESS,\r\n    FETCH_LOCATION_LIST_FAILED,\r\n    UPDATE_LOCATIONS,\r\n    ADD_FEEDBACK,\r\n    FORM_SUBMIT,\r\n    FORM_SUBMIT_SUCCESS,\r\n    FORM_SUBMIT_FAILED,\r\n    UPDATE_TEXT\r\n} from './actions'\r\n\r\nconst initialState = {\r\n    errors: [],\r\n    list: [],\r\n    loading: false,\r\n    locations: [],\r\n    feedback: {},\r\n    name: '',\r\n    email: '',\r\n    selectedLocations: [],\r\n    submitted: false\r\n}\r\n\r\n\r\nfunction reducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case FETCH_LOCATION_LIST: {\r\n            return { ...state, loading: true };\r\n        }\r\n        case FETCH_LOCATION_LIST_SUCCESS: {\r\n            var locations = action.locations;\r\n\r\n            for (let i = 0; i < locations.length; i++) {\r\n                let l = locations[i];\r\n                if (l.location_name === 'Uncategorized') {\r\n                    locations[i] = locations[0];\r\n                    locations[0] = l;\r\n                }\r\n            }\r\n\r\n            locations.map((location) => {\r\n                location.value = location.location_name;\r\n                location.label = location.location_name;\r\n            })\r\n\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                locations,\r\n            }\r\n        }\r\n        case FETCH_LOCATION_LIST_FAILED: {\r\n            let errors = state.errors;\r\n            errors.push(action.err)\r\n\r\n            return {\r\n                ...state,\r\n                errors,\r\n                loading: false,\r\n            }\r\n        }\r\n        case UPDATE_LOCATIONS: {\r\n            return {\r\n                ...state,\r\n                selectedLocations: action.locations\r\n            }\r\n        }\r\n        case ADD_FEEDBACK: {\r\n            let feedback = state.feedback;\r\n            feedback[action.location] = action.text;\r\n            return {\r\n                ...state,\r\n                feedback\r\n            }\r\n        }\r\n        case UPDATE_TEXT: {\r\n            let {field, text} = action;\r\n            return {\r\n                ...state,\r\n                [field]: text\r\n            }\r\n        }\r\n        case FORM_SUBMIT: {\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        }\r\n        case FORM_SUBMIT_SUCCESS: {\r\n            \r\n            return {\r\n                ...state,\r\n                submitted: true,\r\n                loading: false,\r\n                errors: [],\r\n                feedback: {},\r\n                selectedLocations: [],\r\n            }\r\n        }\r\n        case FORM_SUBMIT_FAILED: {\r\n            let errors = state.errors;\r\n            errors.push(action.err)\r\n\r\n            return {\r\n                ...state,\r\n                submitted: true,\r\n                loading: false,\r\n                errors\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './rootReducer'\nimport thunkMiddleware from 'redux-thunk';\nimport logger from 'redux-logger'\n\n\nconst store = createStore(\n    rootReducer,\n    compose(\n    applyMiddleware(thunkMiddleware),\n    applyMiddleware(logger)\n    )\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}