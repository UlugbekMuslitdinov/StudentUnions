{"version":3,"sources":["actions.js","Selector.js","Form.js","Navbar.js","App.js","serviceWorker.js","rootReducer.js","index.js"],"names":["FETCH_LOCATION_LIST","FETCH_LOCATION_LIST_SUCCESS","FETCH_LOCATION_LIST_FAILED","fetchList","dispatch","type","fetch","then","res","json","locations","catch","err","fetchListFailure","UPDATE_LOCATIONS","ADD_FEEDBACK","UPDATE_TEXT","FORM_SUBMIT","FORM_SUBMIT_SUCCESS","FORM_SUBMIT_FAILED","submitForm","getState","form","formData","name","email","feedback","body","JSON","stringify","method","ok","Error","formSubmitSuccess","Selector","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","options","selectedOption","handleChange","bind","assertThisInitialized","updateLocations","_this2","_this$props$state","selectedLocations","react_default","a","createElement","react_select_esm","isMulti","onChange","value","className","classNamePrefix","Component","connect","FormPage","handleText","e","_e$target","target","updateText","errors","submitted","style","color","Form","length","UncontrolledAlert","FormGroup","row","Label","for","sm","Col","Input","id","placeholder","src_Selector","required","map","location","i","key","check","size","offset","Button","onClick","React","loc","text","addFeedback","field","Nav","toggleNavbar","collapsed","setState","Navbar","dark","NavbarBrand","href","App","Navbar_Nav","Container","Jumbotron","src_Form","Boolean","window","hostname","match","initialState","list","loading","reducer","arguments","undefined","action","objectSpread","l","location_name","label","push","defineProperty","store","createStore","rootReducer","compose","applyMiddleware","thunkMiddleware","logger","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a080f20b.chunk.js","sourcesContent":["export const FETCH_LOCATION_LIST = 'FETCH_LIST';\r\nexport const FETCH_LOCATION_LIST_SUCCESS='FETCH_LIST_SUCCESS'\r\nexport const FETCH_LOCATION_LIST_FAILED='FETCH_LIST_FAILED'\r\n\r\nfunction initiateFetchList() {\r\n    return {\r\n        type: FETCH_LOCATION_LIST\r\n    }\r\n}\r\n\r\nfunction fetchListSuccess(locations) {\r\n    return {\r\n        type: FETCH_LOCATION_LIST_SUCCESS,\r\n        locations\r\n    }\r\n}\r\n\r\nfunction fetchListFailure(err) {\r\n    return {\r\n        type: FETCH_LOCATION_LIST_FAILED,\r\n        err\r\n    }\r\n}\r\n\r\nexport function fetchList() {\r\n    return function(dispatch) {\r\n        dispatch(initiateFetchList());\r\n        fetch('/feedback/api/get_locations.php')\r\n        .then(res => res.json())\r\n        .then(json => dispatch(fetchListSuccess(json)))\r\n        .catch(err => dispatch(fetchListFailure(err)))\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const UPDATE_LOCATIONS = 'UPDATE_LOCATIONS';\r\n\r\nexport function updateLocations(locations) {\r\n    return {\r\n        type: UPDATE_LOCATIONS,\r\n        locations\r\n    }\r\n}\r\n\r\nexport const ADD_FEEDBACK = 'ADD_FEEDBACK';\r\n\r\nexport function addFeedback(location, text) {\r\n    return {\r\n        type: ADD_FEEDBACK,\r\n        location,\r\n        text\r\n    }\r\n}\r\n\r\n\r\nexport const UPDATE_TEXT = 'UPDATE_TEXT';\r\n\r\nexport function updateText(field, text) {\r\n    return {\r\n        type: UPDATE_TEXT,\r\n        field,\r\n        text\r\n    }\r\n}\r\n\r\n\r\nexport const FORM_SUBMIT = 'FORM_SUBMIT';\r\nexport const FORM_SUBMIT_SUCCESS = 'FORM_SUBMIT_SUCCESS';\r\nexport const FORM_SUBMIT_FAILED = 'FORM_SUBMIT_FAILED';\r\n\r\nfunction initFormSubmit() {\r\n    return {\r\n        type: FORM_SUBMIT\r\n    }\r\n}\r\n\r\nfunction formSubmitSuccess(res) {\r\n    return {\r\n        type: FORM_SUBMIT_SUCCESS,\r\n        res\r\n    }\r\n}\r\n\r\nfunction formSubmitFailure(err) {\r\n    return {\r\n        type: FORM_SUBMIT_FAILED\r\n    }\r\n}\r\n\r\nexport function submitForm() {\r\n    return (dispatch, getState) => {\r\n        dispatch(initFormSubmit());\r\n\r\n        let form = getState();\r\n\r\n        let formData = {\r\n            'name' : form.name,\r\n            'email' : form.email,\r\n            'feedback' : form.feedback\r\n        };\r\n\r\n        fetch('/feedback/api/insert_feedback.php', {\r\n            body: JSON.stringify(formData),\r\n            method: 'POST'\r\n        })\r\n        .then((res) => {\r\n            if(res.ok) {\r\n                return res.json()\r\n            } else {\r\n                throw new Error('An error occurred.');\r\n            }\r\n        })\r\n        .then(res => dispatch(formSubmitSuccess(res)))\r\n        .catch(err => {\r\n            dispatch(formSubmitFailure(err));\r\n        })\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Select from 'react-select';\r\nimport { connect } from 'react-redux';\r\nimport {fetchList, updateLocations} from './actions'\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        state\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => (\r\n    {\r\n        fetchList: () => dispatch(fetchList()),\r\n        updateLocations: (locations) => dispatch(updateLocations(locations))\r\n    }\r\n)\r\n\r\nclass Selector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            options: [],\r\n            selectedOption: null\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchList();\r\n    }\r\n\r\n    handleChange(locations) {\r\n        this.props.updateLocations(locations);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { selectedLocations, locations } = this.props.state;\r\n\r\n        return (\r\n            <Select\r\n                isMulti\r\n                name=\"colors\"\r\n                onChange={(locations) => this.handleChange(locations)}\r\n                options={locations}\r\n                value={selectedLocations}\r\n                className=\"basic-multi-select\"\r\n                classNamePrefix=\"select\"\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Selector);","import React from 'react';\r\nimport { Col, Button, Form, FormGroup, Label, Input, UncontrolledAlert } from 'reactstrap';\r\nimport Selector from './Selector';\r\nimport { connect } from 'react-redux';\r\nimport { submitForm, addFeedback, updateText } from \"./actions\";\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    state\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => (\r\n  {\r\n    feedback: (loc, text) => dispatch(addFeedback(loc, text)),\r\n    submitForm: () => dispatch(submitForm()),\r\n    updateText: (name, text) => dispatch(updateText(name, text))\r\n  }\r\n)\r\n\r\nclass FormPage extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleText = this.handleText.bind(this);\r\n  }\r\n\r\n  handleText(e) {\r\n    let { value, name } = e.target;\r\n    this.props.updateText(name, value);\r\n  }\r\n\r\n  render() {\r\n\r\n    let { selectedLocations, errors, submitted } = this.props.state;\r\n\r\n    return (\r\n      <div>\r\n        <h2 className=\"display-4\" style={{ color: '#003366' }}>Feedback Form</h2>\r\n\r\n        <hr /><br />\r\n\r\n        <Form>\r\n\r\n          {\r\n            errors.length > 0\r\n              ? <UncontrolledAlert color=\"danger\">\r\n                An error occurred.\r\n            </UncontrolledAlert>\r\n              : null\r\n          }\r\n\r\n          {\r\n            errors.length === 0 && submitted\r\n              ? <UncontrolledAlert color=\"success\">\r\n                Form submitted successfully!\r\n            </UncontrolledAlert>\r\n              : null\r\n          }\r\n\r\n          <FormGroup row>\r\n            <Label for=\"name\" sm={2}>Name</Label>\r\n            <Col sm={10}>\r\n              <Input\r\n                onChange={this.handleText}\r\n                type=\"text\"\r\n                name=\"name\"\r\n                id=\"name\"\r\n                placeholder=\"Name\"\r\n              />\r\n            </Col>\r\n          </FormGroup>\r\n\r\n          <FormGroup row>\r\n            <Label for=\"email\" sm={2}>Email</Label>\r\n            <Col sm={10}>\r\n              <Input onChange={this.handleText}\r\n                type=\"email\"\r\n                name=\"email\"\r\n                id=\"email\"\r\n                placeholder=\"example@email.arizona.edu\"\r\n              />\r\n            </Col>\r\n          </FormGroup>\r\n\r\n          <FormGroup row>\r\n            <Label for=\"exampleSelectMulti\" sm={2}>Select Locations<sup className=\"text-danger\">*</sup></Label>\r\n            <Col sm={10}>\r\n              <Selector required />\r\n            </Col>\r\n          </FormGroup>\r\n\r\n          {selectedLocations.map((location, i) => {\r\n            return (\r\n              <FormGroup key={i} row>\r\n                <Label\r\n                  style={{ color: '#CC0033' }}\r\n                  for=\"exampleText\"\r\n                  sm={2}>\r\n                  {location.value}\r\n                  <sup className=\"text-danger\">*</sup>\r\n                </Label>\r\n                <Col sm={10}>\r\n                  <Input\r\n                    type=\"textarea\"\r\n                    onChange={e => this.props.feedback(location.value, e.target.value)}\r\n                    name={location.value + \"_feedback\"} id=\"feedback_box\"\r\n                  />\r\n                </Col>\r\n              </FormGroup>\r\n            );\r\n          })}\r\n\r\n\r\n          <FormGroup check row>\r\n            <Col sm={{ size: 10, offset: 2 }}>\r\n              <Button color=\"outline-success\" onClick={this.props.submitForm}>Submit</Button>\r\n            </Col>\r\n          </FormGroup>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(FormPage);","import React from 'react';\r\nimport { Navbar, NavbarBrand } from 'reactstrap';\r\n\r\nexport default class Nav extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggleNavbar = this.toggleNavbar.bind(this);\r\n    this.state = {\r\n      collapsed: true\r\n    };\r\n  }\r\n\r\n  toggleNavbar() {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar color=\"primary\" dark>\r\n          <NavbarBrand href=\"/\" className=\"mr-auto\">Arizona Student Unions</NavbarBrand>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport FormPage from './Form';\nimport { Container, Jumbotron } from 'reactstrap'\nimport Navbar from './Navbar'\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <Container >\n          <Jumbotron>\n            <FormPage />\n          </Jumbotron>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    FETCH_LOCATION_LIST,\r\n    FETCH_LOCATION_LIST_SUCCESS,\r\n    FETCH_LOCATION_LIST_FAILED,\r\n    UPDATE_LOCATIONS,\r\n    ADD_FEEDBACK,\r\n    FORM_SUBMIT,\r\n    FORM_SUBMIT_SUCCESS,\r\n    FORM_SUBMIT_FAILED,\r\n    UPDATE_TEXT\r\n} from './actions'\r\n\r\nconst initialState = {\r\n    errors: [],\r\n    list: [],\r\n    loading: false,\r\n    locations: [],\r\n    feedback: {},\r\n    name: '',\r\n    email: '',\r\n    selectedLocations: [],\r\n    submitted: false\r\n}\r\n\r\n\r\nfunction reducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case FETCH_LOCATION_LIST: {\r\n            return { ...state, loading: true };\r\n        }\r\n        case FETCH_LOCATION_LIST_SUCCESS: {\r\n            var locations = action.locations;\r\n\r\n            for (let i = 0; i < locations.length; i++) {\r\n                let l = locations[i];\r\n                if (l.location_name === 'Uncategorized') {\r\n                    locations[i] = locations[0];\r\n                    locations[0] = l;\r\n                }\r\n            }\r\n\r\n            locations.map((location) => {\r\n                location.value = location.location_name;\r\n                location.label = location.location_name;\r\n            })\r\n\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                locations,\r\n            }\r\n        }\r\n        case FETCH_LOCATION_LIST_FAILED: {\r\n            let errors = state.errors;\r\n            errors.push(action.err)\r\n\r\n            return {\r\n                ...state,\r\n                errors,\r\n                loading: false,\r\n            }\r\n        }\r\n        case UPDATE_LOCATIONS: {\r\n            return {\r\n                ...state,\r\n                selectedLocations: action.locations\r\n            }\r\n        }\r\n        case ADD_FEEDBACK: {\r\n            let feedback = state.feedback;\r\n            feedback[action.location] = action.text;\r\n            return {\r\n                ...state,\r\n                feedback\r\n            }\r\n        }\r\n        case UPDATE_TEXT: {\r\n            let {field, text} = action;\r\n            return {\r\n                ...state,\r\n                [field]: text\r\n            }\r\n        }\r\n        case FORM_SUBMIT: {\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        }\r\n        case FORM_SUBMIT_SUCCESS: {\r\n            \r\n            return {\r\n                ...state,\r\n                submitted: true,\r\n                loading: false,\r\n                errors: [],\r\n                feedback: {},\r\n                selectedLocations: [],\r\n            }\r\n        }\r\n        case FORM_SUBMIT_FAILED: {\r\n            let errors = state.errors;\r\n            errors.push(action.err)\r\n\r\n            return {\r\n                ...state,\r\n                submitted: true,\r\n                loading: false,\r\n                errors\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './rootReducer'\nimport thunkMiddleware from 'redux-thunk';\nimport logger from 'redux-logger'\n\n\nconst store = createStore(\n    rootReducer,\n    compose(\n    applyMiddleware(thunkMiddleware),\n    applyMiddleware(logger)\n    )\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}