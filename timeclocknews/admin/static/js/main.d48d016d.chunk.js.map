{"version":3,"sources":["components/Navbar.js","actions.js","components/List.js","components/Home.js","components/Upload.js","components/Sidebar.js","App.js","serviceWorker.js","rootReducer.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","Component","connect","state","FETCH_LIST","FETCH_LIST_SUCCESS","FETCH_LIST_FAILED","fetchList","dispatch","type","fetch","then","res","json","list","catch","err","fetchListFailure","UPLOAD_ROUTE","ADD_PICTURE","UPLOAD_PICTURE","UPLOAD_PICTURE_SUCCESS","UPLOAD_PICTURE_FAILED","uploadPictures","pictures","Promise","resolve","reject","formData","FormData","forEach","picture","i","append","body","method","uploadPictureSuccess","uploadPictureFailure","REORDER","REORDER_UPLOAD","REORDER_UPLOAD_SUCCESS","REORDER_UPLOAD_FAILED","reorderUpload","newList","JSON","stringify","reorderUploadFailed","DELETE","DELETE_SUCCESS","DELETE_FAILED","deleteImage","name","deleteFailed","DISMISS_ALERT","List","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","confirmDeletion","confirmAlert","title","message","buttons","label","onClick","delete","bind","assertThisInitialized","_this2","that","dragProps","onDragEnd","fromIndex","toIndex","reorder","nodeSelector","handleSelector","lib_default","map","img","index","style","textAlign","key","path","data-toggle","src","alt","height","width","insertion_date","from","to","Home","uploadNewOrder","errorComponent","successComponent","_this$props$state","operationSuccess","errors","postOperation","operation","showAlert","length","data-dismiss","aria-label","aria-hidden","role","dismissAlert","components_List","Upload","onDrop","onSubmit","uploadRoute","setPictures","e","preventDefault","history","push","compiled_default","withIcon","buttonText","onChange","imgExtension","maxFileSize","withPreview","margin","Sidebar","nav","marginTop","Link","marginRight","App","BrowserRouter","basename","components_Navbar","components_Sidebar","Switch","Route","exact","component","Boolean","window","location","hostname","match","initialState","loading","reducer","arguments","undefined","action","objectSpread","item","splice","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d48d016d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        state\r\n    };\r\n}\r\n\r\nclass Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0\">\r\n                <a className=\"navbar-brand col-sm-3 col-md-2 mr-0\" href=\"/\">Arizona Student Unions</a>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n)(Navbar);","import fetch from 'cross-fetch';\r\n\r\nexport const FETCH_LIST = 'FETCH_LIST';\r\nexport const FETCH_LIST_SUCCESS='FETCH_LIST_SUCCESS'\r\nexport const FETCH_LIST_FAILED='FETCH_LIST_FAILED'\r\n\r\nfunction initiateFetchList() {\r\n    return {\r\n        type: FETCH_LIST\r\n    }\r\n}\r\n\r\nfunction fetchListSuccess(list) {\r\n    return {\r\n        type: FETCH_LIST_SUCCESS,\r\n        list\r\n    }\r\n}\r\n\r\nfunction fetchListFailure(err) {\r\n    return {\r\n        type: FETCH_LIST_FAILED,\r\n        err\r\n    }\r\n}\r\n\r\nexport function fetchList() {\r\n    return function(dispatch) {\r\n        dispatch(initiateFetchList());\r\n\r\n        fetch('/timeclocknews/admin/get_slides.php')\r\n        .then(res => res.json())\r\n        .then(json => dispatch(fetchListSuccess(json)))\r\n        .catch(err => dispatch(fetchListFailure(err)))\r\n    }\r\n}\r\n\r\n\r\n\r\n// UPLOAD\r\nexport const UPLOAD_ROUTE = 'UPLOAD_ROUTE';\r\nexport function uploadRoute() {\r\n    return {\r\n        type: UPLOAD_ROUTE\r\n    }\r\n}\r\n\r\nexport const ADD_PICTURE = 'ADD_PICTURE';\r\nexport function setPictures(pictures) {\r\n    return {\r\n        type: ADD_PICTURE,\r\n        pictures\r\n    }\r\n}\r\n\r\nexport const UPLOAD_PICTURE = 'UPLOAD_PICTURE';\r\nexport const UPLOAD_PICTURE_SUCCESS = 'UPLOAD_PICTURE_SUCCESS';\r\nexport const UPLOAD_PICTURE_FAILED = 'UPLOAD_PICTURE_FAILED';\r\n\r\nexport function initiateUploadPicture() {\r\n    return {\r\n        type: UPLOAD_PICTURE\r\n    }\r\n}\r\n\r\n\r\nexport function uploadPictureSuccess(res) {\r\n    return {\r\n        type: UPLOAD_PICTURE_SUCCESS,\r\n        res\r\n    }\r\n}\r\n\r\n\r\nexport function uploadPictureFailure(err) {\r\n    return {\r\n        type: UPLOAD_PICTURE_FAILED,\r\n        err\r\n    }\r\n}\r\n\r\nexport function uploadPictures(pictures) {\r\n    return function(dispatch) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            dispatch(initiateUploadPicture());\r\n\r\n            var formData = new FormData();\r\n\r\n            pictures.forEach((picture, i) => {\r\n                formData.append(i, picture);\r\n            });\r\n\r\n\r\n            fetch('/timeclocknews/admin/upload.php', {\r\n                body: formData,\r\n                method: 'POST'\r\n            })\r\n            .then((res) => {return res.json()})\r\n            .then(res => dispatch(uploadPictureSuccess(res)))\r\n            .then(() => resolve())\r\n            .catch(err => {\r\n                dispatch(uploadPictureFailure(err));\r\n                reject(err);\r\n            })\r\n        });\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// REORDER\r\nexport const REORDER = 'REORDER';\r\nexport function reorder(from, to) {\r\n    return {\r\n        type: REORDER,\r\n        from,\r\n        to\r\n    }\r\n}\r\n\r\n// REORDER UPLOAD\r\nexport const REORDER_UPLOAD = 'REORDER_UPLOAD';\r\nexport const REORDER_UPLOAD_SUCCESS = 'REORDER_UPLOAD_SUCCESS';\r\nexport const REORDER_UPLOAD_FAILED = 'REORDER_UPLOAD_FAILED';\r\n\r\nexport function initiateReorderUpload() {\r\n    return {\r\n        type: REORDER_UPLOAD\r\n    }\r\n}\r\n\r\nexport function reorderUploadSuccess(list) {\r\n    return {\r\n        type: REORDER_UPLOAD_SUCCESS,\r\n        list\r\n    }\r\n}\r\n\r\nexport function reorderUploadFailed(err) {\r\n    return {\r\n        type: REORDER_UPLOAD_FAILED,\r\n        err\r\n    }\r\n}\r\n\r\nexport function reorderUpload(newList) {\r\n        return function(dispatch) {\r\n            dispatch(initiateReorderUpload());\r\n            \r\n            fetch('/timeclocknews/admin/change_order.php', {\r\n                body: JSON.stringify(newList),\r\n                method: 'POST'\r\n            })\r\n            .then((res) => {return res.json()})\r\n            .then(res => dispatch(reorderUploadSuccess(res)))\r\n            .catch(err => dispatch(reorderUploadFailed(err)))\r\n        }\r\n}\r\n\r\nexport const DELETE = 'DELETE';\r\nexport const DELETE_SUCCESS = 'DELETE_SUCCESS';\r\nexport const DELETE_FAILED = 'DELETE_FAILED';\r\n\r\nfunction initiateDelete() {\r\n    return {\r\n        type: DELETE\r\n    }\r\n}\r\n\r\nfunction deleteSuccess(list) {\r\n    return {\r\n        type: DELETE_SUCCESS,\r\n        list\r\n    }\r\n}\r\n\r\nfunction deleteFailed(err) {\r\n    return {\r\n        type: DELETE_FAILED,\r\n        err\r\n    }\r\n}\r\n\r\nexport function deleteImage(name) {\r\n    return function(dispatch) {\r\n        dispatch(initiateDelete());\r\n        \r\n        fetch('/timeclocknews/admin/delete.php', {\r\n            body: JSON.stringify({name}),\r\n            method: 'POST'\r\n        })\r\n        .then((res) => {return res.json()})\r\n        .then(res => dispatch(deleteSuccess(res)))\r\n        .catch(err => dispatch(deleteFailed(err)))\r\n    }\r\n}\r\n\r\nexport const DISMISS_ALERT = 'DISMISS_ALERT';\r\nexport function dismissAlert() {\r\n    return {\r\n        type: DISMISS_ALERT\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport ReactDragListView from 'react-drag-listview/lib/index.js';\r\nimport { connect } from 'react-redux';\r\nimport { fetchList, reorder, deleteImage } from '../actions'\r\nimport './css/list.css'\r\n\r\nimport { confirmAlert } from 'react-confirm-alert'; // Import\r\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        state\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => (\r\n    {\r\n        fetchList: () => dispatch(fetchList()),\r\n        reorder: (from, to) => dispatch(reorder(from, to)),\r\n        delete: (name) => dispatch(deleteImage(name))\r\n    }\r\n)\r\n\r\nclass List extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.confirmDeletion = this.confirmDeletion.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchList();\r\n    }\r\n\r\n    confirmDeletion = (name) => {\r\n        confirmAlert({\r\n            title: 'Delete',\r\n            message: 'Are you sure you want to delete this image?',\r\n            buttons: [\r\n                {\r\n                    label: 'Yes',\r\n                    onClick: () => this.props.delete(name)\r\n                },\r\n                {\r\n                    label: 'No',\r\n                    onClick: () => { }\r\n                }\r\n            ]\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const that = this;\r\n        const dragProps = {\r\n            onDragEnd(fromIndex, toIndex) {\r\n                that.props.reorder(fromIndex, toIndex)\r\n            },\r\n            nodeSelector: 'li',\r\n            handleSelector: 'li'\r\n        };\r\n\r\n        let { list } = this.props.state;\r\n\r\n        return (\r\n            <div className=\"table\">\r\n                <ReactDragListView {...dragProps}>\r\n                    <ul>\r\n                        {list.map((img, index) => (\r\n                            <li className=\"card\" style={{ textAlign: 'center' }} key={index}>\r\n\r\n                                <a href={img.path} data-toggle=\"lightbox\">\r\n                                    <img className=\"card-img-top\" src={img.path} alt=\"card\" style={{ height: '200px', width: 'auto' }} />\r\n                                </a>\r\n\r\n\r\n                                <div className=\"card-body\">\r\n                                    <p className=\"card-text\">Inserted on {img.insertion_date}</p>\r\n\r\n                                    <button type=\"button\" className=\"btn btn-outline-danger\" onClick={() => this.confirmDeletion(img.name)}>\r\n                                        Delete\r\n                                </button>\r\n                                </div>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </ReactDragListView>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(List);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport List from './List'\r\nimport './css/dashboard.css'\r\nimport { reorderUpload, dismissAlert } from '../actions';\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        state\r\n    };\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => (\r\n    {\r\n        reorderUpload: (list) => dispatch(reorderUpload(list)),\r\n        dismissAlert: () => dispatch(dismissAlert())\r\n    }\r\n)\r\n\r\nclass Home extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        // This binding is necessary to make `this` work in the callback\r\n        this.uploadNewOrder = this.uploadNewOrder.bind(this);\r\n    }\r\n\r\n    uploadNewOrder() {\r\n        this.props.reorderUpload(this.props.state.list)\r\n    }\r\n\r\n    render() {\r\n\r\n        let {\r\n            operationSuccess,\r\n            errors,\r\n            postOperation,\r\n            operation,\r\n            showAlert\r\n        } = this.props.state;\r\n\r\n        let errorComponent, successComponent;\r\n        \r\n        if(errors.length > 0) {\r\n            errorComponent = errors.map((err, i) => {\r\n                return (\r\n                    <div key={i} className=\"alert alert-danger alert-dismissible fade show\">\r\n                        {err}\r\n                        <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                        </button>\r\n                    </div>\r\n                );\r\n            })\r\n        } else {\r\n            errorComponent = null;\r\n        }\r\n\r\n        successComponent = (\r\n            <div className=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\r\n                {operation} Successful!\r\n                <button\r\n                type=\"button\"\r\n                className=\"close\"\r\n                onClick={() => this.props.dismissAlert()}\r\n                aria-label=\"Close\"\r\n                >\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n            </div>\r\n        );\r\n\r\n\r\n        return (\r\n            <div>\r\n                {errors.length > 0 ? errorComponent : null}\r\n                {operationSuccess && postOperation && showAlert ? successComponent : null}\r\n\r\n                <div className=\"row\">\r\n                    <h1 className=\"display-4 col-md-10\">Time Clock News Dashboard</h1>\r\n\r\n                    <div className=\"btn-toolbar mb-2 mb-md-0 col-md-2\">\r\n                        <div className=\"btn-group mr-2\">\r\n                            <button\r\n                            className=\"btn btn-outline-success\"\r\n                            onClick={this.uploadNewOrder}\r\n                            >\r\n                            Save Order\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div><hr />\r\n                \r\n                <List />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Home);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { uploadRoute, setPictures, uploadPictures } from '../actions';\r\nimport ImageUploader from 'react-images-upload';\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        state,\r\n        errors: state.errors\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => (\r\n    {\r\n        uploadRoute: () => dispatch(uploadRoute()),\r\n        setPictures: (pictures) => dispatch(setPictures(pictures)),\r\n        uploadPictures: (pictures) => dispatch(uploadPictures(pictures))\r\n    }\r\n)\r\n\r\nclass Upload extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onDrop = this.onDrop.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.uploadRoute();\r\n    }\r\n\r\n    onDrop(pictures) {\r\n        this.props.setPictures(pictures);\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        \r\n        this.props.uploadPictures(this.props.state.pictures)\r\n        .then(() => this.props.history.push('/'))\r\n        .catch(err => {});\r\n    }\r\n\r\n    render() {\r\n        let pictures = this.props.state.pictures;\r\n\r\n        let errors;\r\n        \r\n        if(this.props.errors.length > 0) {\r\n            errors = this.props.errors.map((err, i) => {\r\n                return (\r\n                    <div key={i} className=\"alert alert-danger\">{err}</div>\r\n                );\r\n            })\r\n        } else {\r\n            errors = null;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"display-4\">Upload</h1><hr />\r\n\r\n                {errors}\r\n\r\n                <form onSubmit={this.onSubmit}>\r\n                    <ImageUploader\r\n                        withIcon={true}\r\n                        buttonText='Choose images'\r\n                        onChange={this.onDrop}\r\n                        imgExtension={['.jpg', '.gif', '.png']}\r\n                        maxFileSize={5242880}\r\n                        withPreview\r\n                    />\r\n\r\n                    \r\n                {\r\n                    pictures.length > 0\r\n                        ? (\r\n                            <div className=\"text-center\" style={{ margin: '20px' }}>\r\n                                    <button\r\n                                        className=\"btn btn-lg btn-outline btn-primary\"\r\n                                        type=\"submit\"\r\n                                    >\r\n                                        Upload\r\n                                </button>\r\n                            </div>\r\n                        )\r\n                        : null\r\n                }\r\n\r\n                </form>\r\n                <br />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Upload);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        state\r\n    };\r\n}\r\n\r\nclass Sidebar extends Component {\r\n    render() {\r\n        let nav = this.props.state.nav;\r\n\r\n        return (\r\n\r\n            // d-none d-md-block \r\n\r\n            <nav style={{marginTop: \"48px\"}} className=\"col-md-2 bg-light sidebar\">\r\n                <div className=\"sidebar-sticky\">\r\n                    <ul className=\"nav flex-column\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className={\"nav-link \" + (nav === 'Dashboard' ? 'active' : '')} to=\"/\">\r\n                                <span className=\"fa fa-desktop\" style={{ marginRight: '15px' }}></span>\r\n                                Dashboard <span className=\"sr-only\">(current)</span>\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className={\"nav-link \" + (nav === 'Upload' ? 'active' : '')} to=\"/Upload\">\r\n                                <span className=\"fa fa-upload\" style={{ marginRight: '15px' }}></span>\r\n                                Upload\r\n                            </Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n)(Sidebar);","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Navbar from './components/Navbar'\nimport Home from './components/Home'\nimport Upload from './components/Upload'\nimport Sidebar from './components/Sidebar'\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename={'/timeclocknews/admin'}>\n        <div>\n          <Navbar />\n\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <Sidebar />\n\n              <div role=\"main\" className=\"col-md-10 ml-sm-auto col-lg-10 pt-3 px-4\">\n                <Switch>\n                  <Route exact path=\"/(|index.php)/\" component={Home}></Route>\n                  <Route path=\"/Upload\" component={Upload}></Route>\n                </Switch>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    FETCH_LIST,\r\n    FETCH_LIST_SUCCESS,\r\n    FETCH_LIST_FAILED,\r\n    UPLOAD_ROUTE,\r\n    ADD_PICTURE,\r\n    UPLOAD_PICTURE_SUCCESS,\r\n    UPLOAD_PICTURE_FAILED,\r\n    REORDER,\r\n    REORDER_UPLOAD,\r\n    REORDER_UPLOAD_SUCCESS,\r\n    REORDER_UPLOAD_FAILED,\r\n    DELETE,\r\n    DELETE_SUCCESS,\r\n    DELETE_FAILED,\r\n    DISMISS_ALERT\r\n} from './actions'\r\n\r\nconst initialState = {\r\n    errors: [],\r\n    list: [],\r\n    loading: false,\r\n    nav: 'Dashboard',\r\n    pictures: [],\r\n    postOperation: false,\r\n    operation: '',\r\n    operationSuccess: false\r\n}\r\n\r\n\r\nfunction reducer(state = initialState, action) {\r\n    switch(action.type) {\r\n        case FETCH_LIST: {\r\n            return {...state, loading: true, nav: 'Dashboard'};\r\n        }\r\n        case FETCH_LIST_SUCCESS: {\r\n            let list = action.list;\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                list,\r\n                nav: 'Dashboard'\r\n            }\r\n        }\r\n        case FETCH_LIST_FAILED: {\r\n            let errors = state.errors;\r\n            errors.push(action.err)\r\n            \r\n            return {\r\n                ...state,\r\n                errors,\r\n                loading: false,\r\n                nav: 'Dashboard'\r\n            }\r\n        }\r\n        case UPLOAD_ROUTE: {\r\n            return {\r\n                ...state,\r\n                nav: 'Upload'\r\n            }\r\n        }\r\n        case ADD_PICTURE: {\r\n            let pictures = action.pictures;\r\n            return {\r\n                ...state,\r\n                pictures\r\n            }\r\n        }\r\n        case UPLOAD_PICTURE_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                errors: [],\r\n                operation: 'Upload',\r\n                operationSuccess: true,\r\n                postOperation: true,\r\n                showAlert: true\r\n            }\r\n        }\r\n        case UPLOAD_PICTURE_FAILED: {\r\n            let errors = state.errors;\r\n            errors.push(action.err);\r\n\r\n            return {\r\n                ...state,\r\n                errors,\r\n                operation: 'Upload',\r\n                operationSuccess: false,\r\n                postOperation: true\r\n            }\r\n        }\r\n        case REORDER: {\r\n            let {list} = state;\r\n            let item = list.splice(action.from, 1)[0];\r\n            list.splice(action.to, 0, item);\r\n\r\n            return {\r\n                ...state,\r\n                list\r\n            }\r\n        }\r\n        case REORDER_UPLOAD: {\r\n            return {\r\n                ...state,\r\n                postOperation: false,\r\n                loading: true\r\n            }\r\n        }\r\n        case REORDER_UPLOAD_SUCCESS: {\r\n            let {list} = action;\r\n            return {\r\n                ...state,\r\n                errors: [],\r\n                loading: false,\r\n                operation: 'Reorder',\r\n                operationSuccess: true,\r\n                postOperation: true,\r\n                showAlert: true,\r\n                list\r\n            }\r\n        }\r\n        case REORDER_UPLOAD_FAILED: {\r\n            let errors = state.errors;\r\n            errors.push(action.err);\r\n\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                operation: 'Reorder',\r\n                operationSuccess: false,\r\n                postOperation: true,\r\n                errors\r\n            }\r\n        }\r\n        case DELETE: {\r\n            return {\r\n                ...state,\r\n                postOperation: false,\r\n                loading: true\r\n            }\r\n        }\r\n        case DELETE_SUCCESS: {\r\n            let {list} = action;\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                list,\r\n                operation: 'Delete',\r\n                operationSuccess: true,\r\n                postOperation: true,\r\n                showAlert: true\r\n            }\r\n        }\r\n        case DELETE_FAILED: {\r\n            let errors = state.errors;\r\n            errors.push(action.err);\r\n\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                operation: 'Delete',\r\n                operationSuccess: false,\r\n                postOperation: true,\r\n                errors\r\n            }\r\n        }\r\n        case DISMISS_ALERT: {\r\n            return {\r\n                ...state,\r\n                showAlert: false\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './rootReducer'\nimport thunkMiddleware from 'redux-thunk';\nimport 'babel-polyfill';\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunkMiddleware)\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}