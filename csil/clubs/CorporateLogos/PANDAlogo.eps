%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 8%%For: (Vince K Chau) (Panda Management Company)%%Title: (Panda Express \(CMYK\) logo)%%CreationDate: (1/11/00) (5:55 PM)%%BoundingBox: 177 265 438 525%%HiResBoundingBox: 177.2349 265.0596 437.0088 524.8315%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%DocumentCustomColors: (PANTONE 185 CV)%%CMYKCustomColor: 0 0.91 0.76 0 (PANTONE 185 CV)%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 7 8 605 786%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -126.0361 803.0361 0.97 914 826 18 1 1 3 40 0 0%AI5_OpenViewLayers: 7%%PageOrigin:7 8%%AI3_PaperRect:-7 786 605 -6%%AI3_Margin:7 -8 -7 6%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration]) Pc0 0 0 1 k(C=0 M=0 Y=0 K=100) Pc0 0.91 0.76 0 (PANTONE 185 CV) 0 x(PANTONE 185 CV) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Undo New Calligraphic Brush) (Calligraphic Brush Tool)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 100 Lb(Layer 1) Ln0 Auu1 A0 O0 0 0 0 k0 R0.05 1 1 0 K800 Ar0 J 0 j 3.5876 w 4 M []0 d%AI3_Note:0 D0 XR433.9521 377.1191 m443.7969 447.1641 394.9932 511.9297 324.9473 521.7754 c254.9028 531.6196 190.1372 482.8159 180.2915 412.7705 c170.4468 342.7256 219.251 277.96 289.2959 268.1152 c359.3428 258.2695 424.1074 307.0742 433.9521 377.1191 cb0 A0 0.91 0.76 0 (PANTONE 185 CV) 0.7 X3.0505 w307.1211 394.9443 mB0.05 1 1 0 k1 w307.1211 314.8984 m351.3301 314.8984 387.168 350.7373 387.168 394.9443 c387.168 439.1528 351.3301 474.9912 307.1211 474.9912 c262.9141 474.9912 227.0757 439.1528 227.0757 394.9443 c227.0757 350.7373 262.9141 314.8984 307.1211 314.8984 cf0 0.91 0.76 0 (PANTONE 185 CV) 0.7 x0 R0 0.91 0.76 0 (PANTONE 185 CV) 0.7 X3.0505 w307.1211 394.9443 mB0.05 1 1 0 K1.0168 w218.8481 376.2715 m227.4082 335.71 263.2305 305.1035 306.3926 304.7256 c350.0459 304.3447 386.7363 335.0146 395.4795 376.1211 cS0 0.91 0.76 0 (PANTONE 185 CV) 0 X1.0169 w395.4795 376.1211 mS218.8481 376.2715 mS307.1807 395 mS0.05 1 1 0 K1.0168 w191.4424 369.7568 m202.9878 316.4854 250.3955 276.5791 307.1211 276.5791 c363.3994 276.5791 410.5029 315.8545 422.5205 368.4902 cS0 0.91 0.76 0 (PANTONE 185 CV) 0 X1.0169 w422.5205 368.4902 mS191.4424 369.7568 mS307.1211 394.9443 mS0.8231 w307.1211 394.6348 mN1 w307.1523 394.9404 mN0 O0 0 0 1 k205.8257 389.7031 m202.6699 392.1689 L200.2051 389.0127 L203.3608 386.5488 L205.8257 389.7031 Lf414.54 388.7949 m412.1875 392.0342 L408.9492 389.6816 L411.3018 386.4424 L414.54 388.7949 Lfuu*u0 R0 0 0 1 K0.3549 w263.8555 503.4102 m267.4473 504.7778 L286.6328 484.7397 L282.9038 483.3193 L278.1816 488.416 L266.48 483.9619 L266.3438 477.0156 L262.7515 475.6475 L263.8555 503.4102 lb1 D266.7559 500.832 m266.5073 487.1836 L276.0186 490.8052 L266.7559 500.832 lb*U*u0 D305.6289 511.9185 m319.9277 511.292 L319.7871 508.0737 L309.1445 508.5396 L308.8184 501.0801 L318.5098 500.6553 L318.3682 497.4375 L308.6777 497.8623 L308.3086 489.4507 L318.9512 488.9849 L318.8086 485.7666 L304.5107 486.3926 L305.6289 511.9185 lb*U*u334.4697 495.8721 m329.7578 510.0684 L333.9678 508.8145 L337.6934 497.4702 L346.9834 504.9404 L350.9824 503.7495 L339.2607 494.522 L344.5 479.0225 L340.0801 480.3394 L335.9453 492.8735 L325.8721 484.5684 L321.6631 485.8218 L334.4697 495.8721 lb*U*u360.1064 499.2588 m365.8838 495.8706 L370.3994 493.2241 373.2314 489.4424 370.2881 484.4219 c367.4189 479.5278 362.5801 480.0317 358.6016 482.3633 c355.5068 484.1777 L350.3428 475.3687 L347.1855 477.2197 L360.1064 499.2588 lb1 D357.1357 486.9565 m360.2617 485.124 L362.2207 483.9756 365.2568 483.5107 366.96 486.416 c368.5889 489.1943 366.2764 491.9072 364.3193 493.0552 c361.6348 494.6289 L357.1357 486.9565 lb*U*u0 D381.9688 484.9839 m386.4951 480.6611 L390.1465 477.1733 393.1113 473.2285 388.8896 468.8086 c386.7402 466.5591 383.5566 466.5645 381.0586 468.2412 c381.0078 468.188 L381.5264 467.0864 381.543 466.3105 381.0391 464.6167 c377.5059 453.9219 L374.4893 456.8037 L377.7744 465.9131 L378.6719 468.4971 377.7979 469.3306 376.3955 470.6709 c374.8076 472.187 L366.9727 463.9829 L364.3252 466.5107 L381.9688 484.9839 lb1 D377.0332 474.5161 m379.2822 472.3672 L381.7959 469.9663 384.3398 469.6621 386.0332 471.436 c387.626 473.103 387.3672 475.375 384.9316 477.7007 c382.3916 480.1274 L377.0332 474.5161 lb*U*u0 D401.4199 464.1978 m409.2021 452.1919 L406.5 450.4395 L400.707 459.3755 L394.4434 455.3149 L399.7188 447.1777 L397.0156 445.4253 L391.7412 453.563 L384.6787 448.9849 L390.4717 440.0488 L387.7686 438.2969 L379.9854 450.3032 L401.4199 464.1978 lb*U*u414.6592 429.9102 m414.6777 431.9141 414.6201 432.9893 413.9414 434.7681 c413.2109 436.6831 411.667 438.6792 409.1699 437.7266 c404.5879 435.978 409.5615 426.124 401.6973 423.124 c396.6016 421.1802 393.084 424.3428 391.2578 429.1304 c390.6191 430.8062 390.4717 432.6294 390.3848 434.3984 c393.6953 435.269 L393.6592 433.9238 393.7578 431.6113 394.4248 429.8682 c395.167 427.9189 397.3047 425.6011 400.1094 426.6699 c405.4434 428.7051 400.0596 438.4028 407.4785 441.2329 c411.7188 442.8511 415.2559 440.3604 416.8984 436.0522 c417.5 434.4795 417.9434 432.4937 417.9883 430.6318 C414.6592 429.9102 lb*U*u419.4688 407.7686 m419.8867 409.7295 420.043 410.7939 419.7314 412.6709 c419.3945 414.6934 418.2764 416.9556 415.6416 416.5176 c410.8057 415.7144 413.7227 405.0708 405.4199 403.6924 c400.04 402.7988 397.2217 406.5967 396.3828 411.6504 c396.0898 413.4189 396.3057 415.2363 396.5723 416.9868 c399.9893 417.1826 L399.6875 415.8721 399.3252 413.5859 399.6309 411.7446 c399.9727 409.687 401.6074 406.9907 404.5684 407.4824 c410.1992 408.418 406.8486 418.9897 414.6816 420.2905 c419.1582 421.0337 422.1289 417.8916 422.8838 413.3433 c423.1592 411.6826 423.2002 409.6489 422.874 407.8145 C419.4688 407.7686 lb*U0.4 0.4 0.4 1 k0.4 0.4 0.4 1 K0.6778 w307.1807 395 mBUu*u0 0 0 1 k0 0 0 1 K0.3549 w198.0176 436.4727 m199.4419 440.042 L227.1694 440.5942 L225.6895 436.8896 L218.7441 436.8652 L214.1025 425.2417 L219.1211 420.4395 L217.6958 416.8706 L198.0176 436.4727 lb1 D201.8774 436.8618 m211.75 427.4419 L215.5229 436.8906 L201.8774 436.8618 lb*U*u0 D209.0186 458.959 m212.0854 462.8813 L235.2378 459.0938 L235.2827 459.1514 L219.0747 471.8223 L221.3286 474.7065 L241.4595 458.9692 L238.5732 455.2778 L214.895 459.1055 L214.8501 459.0474 L231.4048 446.1069 L229.1504 443.2227 L209.0186 458.959 lb*U*u230.6353 483.7266 m236.7515 488.1382 L242.897 492.5703 250.5371 492.3037 255.1406 485.9209 c260.1519 478.9731 258.5269 472.3403 251.6987 467.4146 c245.5825 463.0034 L230.6353 483.7266 lb1 D246.667 467.7573 m249.7847 470.0059 L254.8906 473.6895 255.9336 478.1875 252.0791 483.5317 c248.5884 488.3716 243.2378 488.8442 238.9619 485.7607 c235.4888 483.2554 L246.667 467.7573 lb*U0.4 0.4 0.4 1 k0.4 0.4 0.4 1 K0.6778 w0 D307.1807 395 mBUu*u0 0 0 1 k0 0 0 1 K0.3549 w191.125 409.2236 m192.3457 415.8125 L193.3003 420.9609 195.8945 424.9121 201.6191 423.8516 c207.1997 422.8164 208.3726 418.0938 207.5313 413.5566 c206.8779 410.0283 L216.9233 408.1665 L216.2563 404.5654 L191.125 409.2236 lb1 D203.71 410.6152 m204.3701 414.1797 L204.7842 416.4121 204.188 419.4277 200.8755 420.041 c197.707 420.6289 195.9414 417.5293 195.5278 415.2979 c194.9604 412.2368 L203.71 410.6152 lb*U0.4 0.4 0.4 1 k0.4 0.4 0.4 1 K0.6778 w0 D307.1807 395 mBUU0 0 0 1 k0.1411 w350.4668 427.8867 m352.709 425.7466 354.9238 423.4434 357.0127 420.9736 c363.54 413.2603 368.0186 405.3525 370.1748 395.7886 c371.5439 390.9688 371.7354 385.8975 371.5518 380.8506 c371.4775 378.751 371.3867 377.5146 371.083 375.3721 c370.9688 374.5654 370.9053 373.583 370.6709 372.5996 C370.1758 369.7783 369.3779 367.0225 368.2793 364.5137 c367.1006 361.8184 365.9844 360.0547 364.2588 357.6963 C363.8975 357.1895 363.2002 356.3965 362.6748 355.8145 C362.123 355.2227 361.7725 354.7793 360.8486 353.9678 C359.2686 352.4961 357.3027 351.292 354.9883 350.4102 C353.3135 349.8018 351.7158 349.3955 349.9404 349.2939 C349.2813 348.1836 348.3672 346.8584 347.6299 345.7178 c344.334 340.3145 339.4365 335.6465 334.2881 332.6787 C334.123 332.5684 333.6631 332.3145 333.3594 332.1523 C331.2695 330.9512 329.1934 329.9199 326.7559 329.1016 C325.4824 328.6836 324.3584 328.3662 322.7969 327.9854 C322.4873 327.9063 322.2324 327.8438 321.6123 327.7256 c321.2773 327.6621 320.8701 327.6055 320.54 327.5801 C319.8555 327.5107 317.2227 327.3203 316.1074 327.293 C315.6211 327.2734 315.0029 327.2422 314.2744 327.2334 C312.752 327.209 311.0713 327.6055 309.2266 328.1133 C306.6895 328.9756 304.3496 330.9668 303.4487 333.7373 C302.3833 337.0859 304.9902 340.3906 307.3994 342.3691 C309.251 344.2705 311.4805 346.3926 312.6055 348.7803 c313.1328 349.8975 313.2598 352.4004 313.0879 354.0498 C312.9736 354.749 312.8779 355.0771 312.625 355.6865 C311.7627 358.1719 309.0264 360.8369 306.5498 361.4795 C306.2051 361.5801 305.8555 361.6748 305.4307 361.7705 C303.5024 362.1523 301.645 362.0039 299.5869 361.4707 c298.6099 361.2168 297.7227 360.7412 296.8472 360.0244 C294.3618 357.6133 293.394 353.749 294.7959 350.3496 C294.9155 350.0078 294.9951 349.8018 295.1475 349.4971 c296.375 347.041 297.5908 344.4766 298.0137 341.6328 c298.2617 339.9727 298.1021 338.3867 297.4053 336.8125 C296.3906 334.8594 294.3301 333.5674 292.0527 333.0596 c290.4795 332.709 288.8564 332.958 287.4106 333.2881 C286.2949 333.5166 284.0239 334.2012 282.8447 334.6826 C282.2607 334.8848 281.71 335.0898 281.1138 335.4063 C280.251 335.7549 279.6162 336.1035 278.71 336.5859 C277.9683 337.1182 277.0488 337.752 276.2241 338.4111 c273.3682 340.6973 271.2456 342.2861 268.8037 344.8926 C268.1064 345.4883 267.1553 346.6621 266.5342 347.417 C265.5381 348.5332 264.4404 350.5625 263.3252 352.3896 C263.0015 352.9404 262.5571 353.7646 262.1646 354.7607 C261.4473 356.5557 261.0249 358.2803 260.4458 360.7598 c260.021 362.5801 259.7041 364.3877 259.5322 366.2891 c259.2988 368.8818 259.3228 371.8389 259.5962 374.2559 C259.8306 375.3896 260.0522 376.6592 260.3823 377.8574 C261.2256 380.876 262.1963 383.7178 263.3115 386.5576 c263.9204 387.9531 264.2061 388.834 264.7896 389.9629 C264.9985 390.5469 265.5068 391.3711 265.7471 391.8271 C266.1406 392.4502 266.8867 393.4365 267.1543 393.8984 C266.7798 394.7041 266.8174 394.7539 266.3228 396.0801 C266.0884 396.71 265.7607 397.6782 265.5273 398.4673 C265.311 399.2412 265.1689 399.6558 265.0483 400.1245 C264.8838 400.7334 264.6924 401.54 264.5342 402.4282 C264.2813 403.6011 264.0449 405.186 263.9624 406.3032 C263.8867 406.9624 263.8096 407.9277 263.8032 408.498 C263.7456 410.02 263.873 411.7319 263.981 412.7593 c264.2515 415.3389 264.6709 417.5264 265.4063 419.9097 c265.6973 420.855 265.938 421.7109 266.3877 422.7002 C266.8257 423.7085 267.3335 424.5337 267.7324 425.3896 C267.207 425.8008 266.4102 426.4727 266.0483 426.8213 C265.8076 427.043 265.1899 427.6138 264.8721 427.9375 C264.5557 428.2485 264.3164 428.4702 264.1426 428.686 C263.4395 429.4277 L262.7476 430.1191 261.7959 431.3877 261.0034 432.5986 C258.9238 435.998 258.873 439.7261 259.7861 443.6587 C260.0396 444.394 260.3193 445.2314 260.623 445.916 C261.5366 447.3882 L262.209 448.5098 263.6733 449.7529 264.2568 450.2729 C264.5615 450.5146 265.0303 450.856 265.6646 451.2183 C266.2041 451.5854 266.8379 451.7246 267.751 452.1816 C268.0225 452.3071 268.4556 452.4097 268.9692 452.5625 C269.4063 452.6641 270.4531 452.791 270.9219 452.791 C272.5205 452.8921 273.6362 452.6895 275.1836 452.3848 C276.1611 452.1094 277.0801 451.7607 277.7964 451.3955 C278.1577 451.2056 278.5391 450.9678 278.7856 450.7871 C280.251 449.7939 281.4399 448.6377 282.521 447.4351 C283.4536 446.3384 284.5996 444.5361 285.3604 443.3447 C285.7441 442.8057 286.3188 443.4219 287.6914 444.0308 C291.7891 445.7998 294.6919 446.6694 298.6875 447.1455 c302.7349 447.627 304.9287 447.7793 308.8281 447.3354 c312.9629 446.8647 316.8486 446.0879 320.7168 444.4072 C320.9072 444.5654 321.5615 445.105 321.6426 445.2383 C322.0732 445.6563 322.7402 446.2588 323.3105 446.6519 C324.2939 447.3052 325.2451 447.876 326.0205 448.2246 C327.5918 448.9536 330.2559 450.0005 332.8428 449.874 C335.3027 449.645 337.5859 448.7827 339.4121 447.2603 c342.0508 445.333 343.6484 441.8325 343.624 438.4834 c343.624 437.5962 343.7441 435.2393 343.4648 434.2236 C344.3018 433.564 344.7842 433.2124 345.501 432.5933 c346.8076 431.4644 348.6162 429.7676 349.4033 428.937 C349.7139 428.6299 350.2676 428.1245 350.4668 427.8867 Cf0 0 0 0 k1 w341.5752 411.8364 m341.4482 412.8062 341.2275 413.6621 340.9346 414.9941 c340.25 418.1147 339.4639 421.2344 338.4482 424.1265 C338.2773 424.5381 337.8018 424.4746 337.6182 424.2529 C337.0098 423.5557 335.6455 423.1113 334.5479 423.0039 C334.0605 422.9849 333.4268 423.0479 332.7529 423.1621 C331.5234 423.4604 330.2236 423.9038 328.9365 424.6079 C328.0986 425.0454 327.4971 425.458 326.7744 425.9404 C326.0693 426.4092 325.4199 426.9043 324.8203 427.3989 c324.1357 427.9634 323.2158 428.8193 322.4609 429.5928 C321.1553 430.8799 319.9844 432.6729 319.1445 434.1719 c318.5547 435.2241 318.1426 436.3818 317.9775 437.0884 c317.7998 437.8506 317.8262 438.7119 317.8506 439.1558 C317.9521 439.8384 318.334 440.7734 318.5869 441.2236 C318.9678 441.959 319.1738 442.3115 319.6143 442.9678 C319.9492 443.4209 320.4258 444.0708 320.7168 444.4072 C320.2988 444.6104 319.9277 444.7368 319.5977 444.8892 C319.0625 445.1011 318.6816 445.2598 318.1074 445.4536 C317.7939 445.5454 317.4453 445.688 316.8955 445.8662 C316.3672 446.0049 315.9863 446.1323 315.3838 446.2969 c314.3154 446.5894 313.5771 446.7026 312.4355 446.9565 C309.7402 447.4321 307.4727 447.7021 304.7583 447.7236 C304.4536 447.73 303.6055 447.6782 303.106 447.6641 c302.7803 447.6538 302.0425 447.604 301.5752 447.5527 C301.0674 447.4985 299.7993 447.3687 299.1719 447.2959 C297.5645 447.1152 295.7085 446.8452 293.8794 446.3477 C293.5527 446.2749 293.1719 446.1475 292.8896 446.0752 C289.2373 445.0352 286.6494 443.9121 283.3521 441.9082 C282.7554 441.5342 282.1846 441.249 281.8301 440.9951 C280.1245 439.854 277.5869 437.7612 276.5474 436.8418 C276.1611 436.5557 275.875 436.2075 275.4375 435.7446 C272.9517 433.1313 270.6899 430.2505 268.7598 427.3159 c268.4556 426.853 268.3442 426.6948 268.1982 426.4468 C267.9165 425.9971 267.5361 425.3945 267.333 424.9761 C267.0762 424.5068 266.3652 423.0537 266.1182 422.4268 c265.459 420.749 264.8086 418.6094 264.3872 416.5483 C264.2861 416.0723 264.127 415.3115 264.0796 414.8774 C263.9868 414.2119 263.8252 412.8535 263.7593 412.0073 C263.7153 411.4434 263.6514 410.127 263.6455 409.4229 C263.7153 408.0654 263.6831 406.417 263.9336 404.9805 C264.1899 402.231 264.9673 399.6475 265.3799 398.3657 C265.6582 397.4531 266.1255 396.1748 266.4067 395.417 C267.0918 393.7178 268.1572 392.0869 269.1465 390.5146 C269.5327 389.9121 269.8506 389.3105 270.2495 388.7207 c273.7622 383.5361 278.6846 379.0986 283.2754 374.9922 C285.1973 373.3604 287.9565 372.0928 288.8311 371.6426 C291.6973 370.3486 293.854 369.917 296.6182 369.46 C297.8491 369.3652 299.0859 369.334 300.3223 369.4795 C301.3369 369.6504 302.0664 369.8086 302.8335 370.0693 C305.625 371.1855 309.0742 372.6309 311.8896 373.7734 C312.6895 374.0898 313.4492 374.501 314.1855 374.8125 C314.6865 375.041 315.7012 375.5479 316.3535 375.9609 C317.8262 376.7852 318.6191 377.166 319.5254 377.8066 C320.2676 378.2119 321.6943 379.2266 322.3164 379.6328 C324.7695 381.2246 327.3066 383.1914 329.418 385.1123 C330.2881 385.8535 331.1113 386.6465 331.7207 387.3369 C333.5537 389.2148 335.4795 391.7578 336.8506 394.1162 C338.0859 396.0005 339.1846 398.5566 340.0723 400.8145 C340.4014 401.6128 340.624 402.2788 340.832 403.1924 C341.4414 405.8018 341.6836 406.8945 341.7207 409.6738 c341.7334 410.5869 341.7031 410.999 341.5752 411.8364 Cf370.1035 396.6895 m370.4775 395.2236 370.7305 394.0664 370.9717 392.4873 c371.1943 391.0322 371.3506 389.4053 370.5254 387.998 C370.2715 387.5029 370.1133 387.2803 369.8027 386.7354 C367.5439 382.7773 363.1318 380.749 358.8447 381.0283 C358.0947 381.1289 357.1445 381.1807 357.0684 382.2451 C356.8906 388.8027 356.1934 395.3975 354.6836 401.7275 C354.1641 404.1182 353.4023 406.4326 352.6289 408.6523 C352.1494 409.9053 351.626 411.1255 350.9795 412.4321 c350.4658 413.4702 349.915 414.5127 349.4072 415.4761 C349.1367 415.9141 348.9316 416.3105 348.6719 416.6943 C347.123 419.0029 345.8555 420.9561 344.1055 423.0356 c343.1924 424.2529 342 425.3442 340.8838 426.3081 C340.2119 426.9478 340.7822 427.7412 341.2578 428.8066 c341.6055 429.583 341.877 430.1821 342.1875 430.9697 C342.3838 431.4507 342.5576 431.9111 342.7793 432.5391 C343.0498 433.2896 343.1611 433.877 343.3379 434.5234 C344.2061 433.877 344.874 433.3057 345.501 432.748 C350.1689 428.4858 354.7969 423.9839 358.958 418.7583 C359.8389 417.6738 360.3789 416.96 360.8486 416.2466 C361.2031 415.771 361.8721 414.833 362.334 414.1221 c363.1211 412.917 364.0879 411.3154 364.7422 410.104 c365.6406 408.4385 366.5293 406.7344 367.335 404.9521 C367.9316 403.6694 368.5439 401.9307 368.9736 400.6436 C369.3682 399.521 369.9189 397.4243 370.1035 396.6895 Cf0 0 0 1 k0.1411 w282.9717 411.6963 m283.6758 411.8862 285.001 412.2041 286.0918 411.3926 C287.2329 410.1494 287.8921 408.0942 288.2734 406.4204 C288.5264 405.6348 288.7168 404.9424 288.8818 404.0547 c289.2959 401.8286 287.9883 399.6792 286.8589 398.144 C285.8315 396.793 285.1973 395.6836 284.5693 394.7256 C284.1831 394.1611 283.7358 393.376 283.4717 392.8545 c282.9463 391.8154 283.0479 391.4541 282.3628 390.5908 C281.9063 390.084 281.2969 389.7031 280.6123 389.6016 C278.3037 389.7285 277.0356 392.1377 275.9697 393.9395 C275.748 394.3838 275.5898 394.7637 275.4375 395.334 C275.2598 396.0957 275.1455 397.0151 275.1836 397.7695 C275.2598 401.9561 276.605 405.9131 279.4458 409.2104 C280.0601 409.8574 280.5044 410.4595 281.3223 410.9224 C281.9316 411.3481 282.4702 411.5698 282.9717 411.6963 Cf315.8213 388.2832 m316.3545 388.749 316.6875 389.2373 317.2383 390.0049 C317.873 390.9268 318.0635 391.3545 318.3613 391.9229 C318.5703 392.3213 318.8076 392.7813 319.0498 393.4258 C319.3477 394.3359 319.4111 394.6201 319.5479 395.3633 C319.7275 396.1431 319.7598 396.6191 319.8809 397.2881 c320.2861 399.5415 319.29 401.8525 318.1553 403.7314 c317.3174 405.1172 316.252 406.75 315.0098 407.8662 C313.8506 408.9326 312.4199 409.8262 311.3828 410.3486 C310.7861 410.6343 310.3262 410.793 309.7588 410.9575 C308.9629 411.0938 307.9238 411.2759 306.6953 410.5737 C306.0928 410.333 305.4595 409.8262 305.1997 409.4067 C304.9834 409.1279 304.7236 408.7729 304.4575 408.3481 C302.8335 405.4814 302.4019 401.8545 304.1021 398.8613 C304.3496 398.4106 304.4448 398.1572 304.7104 397.8076 C306.0615 396.2222 306.79 394.542 307.5459 393.2549 C308.04 392.2842 L308.4395 391.4346 308.7891 390.1035 309.3281 389.374 C310.1396 388.1816 310.9766 387.376 312.3213 387.3438 C312.7842 387.2803 313.4336 387.2646 314.0215 387.3438 C314.4004 387.4082 314.7656 387.5498 315.0449 387.7119 C315.2891 387.8516 315.6064 388.0742 315.8213 388.2832 Cf289.6743 381.7383 m292.5225 380.8125 295.4771 380.3936 298.8765 380.5957 C299.2759 380.623 299.688 380.6533 300.126 380.6475 C300.9121 380.623 301.7427 380.9014 302.2246 379.6826 C302.3262 378.999 302.124 378.3652 301.4893 378.1113 C300.7539 377.7295 300.291 377.6416 299.6309 377.6152 C299.2246 377.6152 298.6099 377.5469 298.2236 377.6797 C297.7227 377.8008 297.1201 377.8311 296.9736 377.6035 C296.1367 376.6396 297.5825 374.5859 295.8325 374.2041 C294.8682 374.0898 294.4883 374.501 294.0059 375.1172 C293.1436 376.209 292.5537 377.3887 291.4756 378.2891 C291.1909 378.498 290.873 378.7197 290.4551 378.7832 C289.0337 379.0361 287.8643 379.1592 287.4077 380.6816 C287.2427 381.2715 287.6074 381.8262 287.9683 381.9912 C288.3745 382.1182 288.6538 382.0488 289.0088 381.9414 C289.6743 381.7383 Lfu0 0 0 0 k1 w281.4238 397.6196 m282.5088 397.6196 283.3882 398.499 283.3882 399.584 c283.3882 400.6689 282.5088 401.5483 281.4238 401.5483 c280.3389 401.5483 279.4595 400.6689 279.4595 399.584 c279.4595 398.499 280.3389 397.6196 281.4238 397.6196 cfUu310.9766 396.5415 m312.0615 396.5415 312.9404 397.4204 312.9404 398.5059 c312.9404 399.5903 312.0615 400.4702 310.9766 400.4702 c309.8916 400.4702 309.0117 399.5903 309.0117 398.5059 c309.0117 397.4204 309.8916 396.5415 310.9766 396.5415 cfUu*u0 0 0 1 k210.6016 364.8369 m210.9102 365.7676 210.9419 366.6963 210.5552 368.1553 c209.8633 370.7646 207.5063 371.998 204.978 371.3262 c202.3188 370.6211 201.0586 368.2402 201.6826 365.8906 c201.979 364.7695 202.1694 364.5098 202.3579 364.125 c205.7954 365.0371 L205.1626 367.4199 L206.4927 367.7725 L207.5542 363.7686 L201.6694 362.208 L201.2954 362.7686 200.7192 363.7598 200.252 365.5283 c199.3008 369.1104 200.9712 372.1035 204.5708 373.0586 c208.0562 373.9814 211.0449 372.0674 211.96 368.6133 c212.3979 366.9609 212.3491 366.167 212.2744 365.1416 C210.6016 364.8369 lf*U*u216.9722 354.6553 m218.4229 351.4102 216.9146 348.459 213.7456 347.043 c210.5 345.5928 207.3784 346.4551 205.9209 349.7148 c204.4634 352.9756 205.9023 355.8779 209.1475 357.3281 c212.3154 358.7451 215.5215 357.9014 216.9722 354.6553 cf1 D207.2671 350.3174 m208.3691 347.8545 210.8921 347.7148 213.0195 348.665 c215.1938 349.6367 216.6943 351.7041 215.6245 354.0537 c214.5864 356.418 212.0459 356.6787 209.8721 355.7061 c207.7446 354.7539 206.166 352.7822 207.2671 350.3174 cf*U*u0 D221.1938 333.0771 m218.4448 331.2705 216.0605 331.6904 214.4746 334.1035 c212.8892 336.5156 213.4492 338.8711 216.1982 340.6787 c221.9341 344.4492 L222.856 343.0459 L217.3018 339.3965 L215.4233 338.1611 214.519 336.7246 215.709 334.9141 c216.8979 333.1055 218.5752 333.3643 220.4546 334.5996 c226.0078 338.25 L226.9302 336.8467 L221.1938 333.0771 lf*U*u230.8037 331.8916 m232.7124 329.75 L234.2524 328.0215 235.4614 326.1123 233.3711 324.249 c232.3066 323.2998 230.853 323.4189 229.7734 324.2764 c229.749 324.2539 L229.9443 323.7324 229.9238 323.377 229.6309 322.6221 c227.625 317.8682 L226.3525 319.2949 L228.1875 323.3359 L228.6924 324.4814 228.3247 324.8936 227.7329 325.5576 c227.0635 326.3086 L223.1831 322.8506 L222.0669 324.1006 L230.8037 331.8916 lf1 D228.165 327.291 m229.1138 326.2266 L230.1733 325.0381 231.3247 324.8057 232.1631 325.5527 c232.9512 326.2568 232.9165 327.3027 231.8896 328.4551 c230.8179 329.6563 L228.165 327.291 lf*U*u0 D240.1533 321.8604 m242.3086 320.1211 L239.0581 310.2373 L247.9785 315.5488 L250.1338 313.8105 L242.7788 304.6914 L241.4722 305.7451 L247.8369 313.6357 L247.811 313.6563 L238.4282 308.1992 L237.1484 309.2334 L240.4946 319.5566 L240.4688 319.5771 L234.105 311.6885 L232.7974 312.7422 L240.1533 321.8604 lf*U*u255.5762 310.4209 m261.2739 307.1709 L260.543 305.8887 L256.3022 308.3076 L254.6064 305.335 L258.4678 303.1328 L257.7358 301.8496 L253.8745 304.0527 L251.9624 300.7021 L256.2031 298.2832 L255.4717 296.999 L249.7744 300.251 L255.5762 310.4209 lf*U*u268.4229 302.2471 m265.0518 303.626 L265.6108 304.9922 L273.9053 301.6016 L273.3457 300.2344 L269.9761 301.6123 L266.1011 292.1377 L264.5474 292.7734 L268.4229 302.2471 lf*U*u295.4316 294.6279 m294.7715 295.1758 293.9941 295.5205 293.1489 295.6553 c290.4814 296.084 288.4004 294.4463 287.9834 291.8447 c287.5464 289.127 289.2129 287.0068 291.6152 286.6221 c292.4434 286.4883 293.5884 286.5264 294.2241 286.7813 c294.0659 285.1602 L293.1289 284.9346 292.0439 285.0576 291.3647 285.167 c287.7021 285.7539 285.644 288.498 286.2344 292.1768 c286.8062 295.7393 289.7715 297.6934 293.3003 297.127 c294.1948 296.9844 295.0518 296.71 295.8218 296.2139 C295.4316 294.6279 lf*U*u301.3916 296.04 m303.0693 296.0176 L303.0039 291.1182 L308.6074 291.042 L308.6729 295.9414 L310.3506 295.918 L310.1924 284.208 L308.5156 284.2305 L308.5869 289.5654 L302.9834 289.6416 L302.9111 284.3057 L301.2334 284.3301 L301.3916 296.04 lf*U*u316.9854 296.4463 m318.6533 296.623 L319.8906 284.9775 L318.2217 284.8018 L316.9854 296.4463 lf*U*u325.0801 297.4707 m327.3027 297.9844 L334.4561 289.959 L334.4893 289.9678 L332.3691 299.1533 L334.0049 299.5293 L336.6357 288.1221 L334.5439 287.6396 L327.2158 295.8291 L327.1826 295.8213 L329.3477 286.4414 L327.7129 286.0635 L325.0801 297.4707 lf*U*u340.1426 301.5381 m346.2617 303.9111 L346.7939 302.5342 L342.2422 300.7676 L343.4805 297.5762 L347.626 299.1855 L348.1602 297.8076 L344.0137 296.2002 L345.4092 292.6025 L349.9629 294.3672 L350.4971 292.9902 L344.3799 290.6172 L340.1426 301.5381 lf*U*u357.3447 307.5322 m356.4326 307.4199 355.9473 307.3281 355.1797 306.9121 c354.3535 306.4648 353.5391 305.6416 354.123 304.5645 c355.1934 302.5879 359.374 305.4434 361.2119 302.0469 c362.4043 299.8486 361.1787 298.0576 359.1113 296.9395 c358.3877 296.5479 357.5684 296.3701 356.7686 296.2246 c356.1729 297.6777 L356.7871 297.7422 357.8311 297.9258 358.584 298.333 c359.4268 298.7891 360.3516 299.9014 359.6953 301.1113 c358.4492 303.4141 354.3633 300.3809 352.6299 303.584 c351.6396 305.415 352.5576 307.1719 354.418 308.1797 c355.0967 308.5469 355.9727 308.8691 356.8174 309.001 C357.3447 307.5322 lf*U*u362.1602 312.5742 m367.498 316.3906 L368.3564 315.1895 L364.3857 312.3496 L366.3779 309.5645 L369.9932 312.1523 L370.8535 310.9521 L367.2354 308.3643 L369.4824 305.2246 L373.4541 308.0664 L374.3135 306.8643 L368.9766 303.0469 L362.1602 312.5742 lf*U*u378.8652 326.6348 m383.0342 331.2578 L384.1309 330.2695 L381.0859 326.8926 L383.6279 324.6006 L386.5371 327.8281 L387.6338 326.8389 L384.7256 323.6123 L388.6865 320.04 L387.5645 318.7939 L378.8652 326.6348 lf*U*u389.2617 339.9688 m391.2441 342.9238 394.5479 343.209 397.4316 341.2744 c400.3848 339.293 401.3105 336.1855 399.3184 333.2178 c397.3281 330.252 394.1016 329.9316 391.1494 331.9131 c388.2656 333.8486 387.2793 337.0156 389.2617 339.9688 cf1 D398.0918 334.042 m399.5977 336.2852 398.377 338.499 396.4414 339.7979 c394.4629 341.126 391.9141 341.3018 390.4883 339.1465 c389.0342 337.0107 390.1611 334.7188 392.1396 333.3896 c394.0762 332.0898 396.5879 331.7988 398.0918 334.042 cf*U*u0 D397.1992 354.2197 m398.6699 357.4619 401.8857 358.2881 405.0498 356.8525 c408.29 355.3828 409.7148 352.4688 408.2383 349.2109 c406.7588 345.9561 403.6289 345.1094 400.3867 346.5791 c397.2227 348.0146 395.7295 350.9795 397.1992 354.2197 cf1 D406.8926 349.8223 m408.0088 352.2832 406.4395 354.2676 404.3145 355.2324 c402.1426 356.2168 399.5977 355.9717 398.5449 353.6094 c397.4619 351.2627 398.9521 349.1846 401.123 348.2002 c403.248 347.2354 405.7754 347.3604 406.8926 349.8223 cf*U*u0 D401.542 364.5781 m402.4424 367.9141 L403.3477 371.2656 406.1416 373.3779 409.623 372.4375 c413.4121 371.4141 414.751 368.585 413.7441 364.8604 c412.8438 361.5264 L401.542 364.5781 lf1 D411.8555 363.5293 m412.3154 365.2305 L413.0674 368.0156 412.1396 369.917 409.2256 370.7031 c406.585 371.417 404.5449 370.0391 403.915 367.708 c403.4043 365.8125 L411.8555 363.5293 lf*UUU*u0 D395.1309 288.8018 m395.1309 290.9619 396.7588 292.5889 398.8447 292.5889 c400.9072 292.5889 402.5352 290.9619 402.5352 288.8018 c402.5352 286.6084 400.9072 284.9912 398.8447 284.9912 c396.7588 284.9912 395.1309 286.6084 395.1309 288.8018 cf1 D398.8447 284.2314 m401.3291 284.2314 403.4512 286.1611 403.4512 288.8018 c403.4512 291.4189 401.3291 293.3486 398.8447 293.3486 c396.3359 293.3486 394.2139 291.4189 394.2139 288.8018 c394.2139 286.1611 396.3359 284.2314 398.8447 284.2314 cf397.8799 288.4404 m398.7969 288.4404 L400.1836 286.1611 L401.0752 286.1611 L399.5801 288.4775 l400.3525 288.5732 400.9434 288.9834 400.9434 289.9248 c400.9434 290.9619 400.3281 291.4189 399.0859 291.4189 C397.084 291.4189 L397.084 286.1611 L397.8799 286.1611 l397.8799 288.4404 Lf0 D397.8799 289.1162 m397.8799 290.7432 L398.9648 290.7432 l399.5205 290.7432 400.1113 290.624 400.1113 289.9717 c400.1113 289.165 399.5078 289.1162 398.833 289.1162 c397.8799 289.1162 Lf*UU306.2524 8587.5 m306.2524 -7795.5 L(N) *-7885.5 394.7168 m8497.5 394.7168 L(N) *LB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF