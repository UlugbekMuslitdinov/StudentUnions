%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 9.0%%For: (STA Travel) (STA Travel)%%Title: (sta_logo_color.EPS)%%CreationDate: 7/21/03 11:40 AM%%BoundingBox: -215 23 315 207%%HiResBoundingBox: -214.0835 23.8203 314.0508 206.2231%%DocumentProcessColors: Cyan Magenta%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%DocumentCustomColors: (PANTONE 293 C)%%+ (PANTONE 293 CVC)%%CMYKCustomColor: 1 0.57 0 0.02 (PANTONE 293 C)%%+ 1 0.56 0 0 (PANTONE 293 CVC)%%+ 1 0 0 0 (PANTONE Process Cyan CV)%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 131071 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 131.9141 -25.0977 131.9141 -25.0977%AI3_TileBox: -253.5859 -318.5977 514.4141 270.4023%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 792 612%AI5_RulerUnits: 0%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -536.5859 391.4023 0.6667 749 547 18 1 1 8 42 0 0%AI5_OpenViewLayers: 7%%PageOrigin:-253.5859 -318.5977%%AI3_PaperRect:-11 602 779 -12%%AI3_Margin:11 -13 -11 12%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI7_Thumbnail: 128 44 8%%BeginData: 9352 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFD87FF5A2F2F292F2F2F292F2F2F292F2F2F292F2F2F292F%2F2F292F2F2F292F2F2F292F2F2F292F2F2F292F2F2F07302F2F2F302F2F%2F302F2F2F302F2F2F302F2F2F302F2F2F302F2F2F302F2F2F302F2F2F30%2F2F2F302F2F2F302F2F2F302F2F2F302F2F2F302F2F2F302F2F2F302F2F%2F302F2F2F302F2F2F3053FD06FF2F2F0730072F0730072F0730072F0730%072F0730072F0730072F0730072F0730072F0730072F0730072F07361414%143614141436141414361414143614141436141414361414143614141436%141414361414143614141436141414361414143614141436141414361414%14361414143614141436141414360D30FD06FF300707070D0707070D0707%070D0707070D0707070D0707070D0707070D0707070D0707070D0707070D%07070D141414131414141314141413141414131414141314141413141414%131414141314141413141414131414141314141413141414131414141314%14141314141413141414131414141314141413142FFD06FF2F2F072F072F%072F072F072F072F072F072F072F072F072F072F072F072F072F072F072F%072F072F072F0714141A1414141A1414141A1414141A1414141A1414141A%1414141A1414141A1414141A1414141A1414141A1414141A1414141A1414%141A1414141A1414141A1414141A1414141A1414141A14140D30FD06FF2F%070D0707070D0707070D0707070D0707070D0707070D0707070D0707070D%0707070D0707070D0707070D0D1413141414131414141314141413141414%131414141314141413141414131414141314141413141414131414141314%141413141414131414141314141413141414131414141314141413141414%2FFD06FF2F30072F0730072F0730072F0730072F0730072F0730072F0730%072F0730072F0730072F0730072F07300714141A1414141A1414141A1414%141A1414141A1414141A1414141A1414141A1414141A1414141A1414141A%1414141A1414141A1414141A1414141A1414141A1414141A1414141A1414%141A14141430FD06FF2F070D0707070D075A84A984A87E2F070753A984A8%84A984A884A97E07070D53A884A98407070D0707072F0D14136184AF84AF%84AF84AF8485133C84AF84AF84AF603C141413FD0414AF84AF8460141413%6184AF84141414136184AF841414AF84AF84AF84AF843C133C84AF843C14%1413141414131414142FFD06FF2F2F072F072F07AFFD06FFAF30077EFD09%FFA9072F07A9FD04FF2F2F072F072F0714141460FD09FFA91436FD08FF61%1414141A1461FD04FF841A141436FFFFFF361A141484FFFFAF141AFD08FF%3C1436FFFFFF361A1414141A1414141A1430FD06FF2F0707070D075AFFFF%FFA97EFFFFFF7E0D5AFD09FF7E0D0707A8FD04FF7E0707070D07070D1414%84FD09FFAF143CFD08FFA8141414131484FD05FF13141414FFFFFF601314%14AFFFFF601413FD08FF3C143CFFFFFF3C131414141314141413142FFD06%FF2F2F0730072F7EFFFFFF07307EFFFFA9072F073007FFFFFF5A2F073007%2F2FFD05FFA92F0730072F07361414141A1414FFFFFF61141A141436FFFF%FF141A85FFFFFF3614141A14FD06FF3D141414FFFFFF841A143CFFFFFF3C%141AFFFFFF611414141A141436FFFFFF361A1414141A1414141A1430FD06%FF300707070D07A8FFFFA807075A84A85A0D0707070DFFFFFF7E0707070D%077EFFFF84FFFFFF0707070D07070D141414131414FFFFFF36141314143C%FFFFFF14133CFFFFFF3C1414133CFFFFA8FFFFFF6014141460FFFFAF1314%60FFFFFF141413FFFFFF361414141314143CFFFFFF3C1314141413141414%13142FFD06FF2F2F072F072F7EFFFFFF7E2F072F072F072F072F07FFFFFF%5A2F072F072FA8FFFF5AFFFFFF5A072F072F0714141A1414141AFFFFFF61%1414141A3CFFFFFF141460FFFFFF141A141460FFFF8B84FFFFAF141A1461%FFFFFF1414AFFFFF841A1414FFFFFF60141A1414141A3CFFFFFF3C14141A%1414141A14140D30FD06FF2F070D0707072FFD04FFA85A070D0707070D07%07FFFFFF7E070D070707FFFFFF07A9FFFF7E0D0707070D0D141314141413%FFFFFF36141414133CFFFFFF3C36AFFFFF841413141485FFFF6060FFFFFF%14131414FFFFFF3614A8FFFF60131414FFFFFFA8AF84AF6014133CFFFFFF%3C141413141414131414142FFD06FF2F30072F0730075AFD05FFA92F2F07%30072F07FFFFFF5A30072F075AFFFFA8307EFFFFFF072F07300714141A14%14141AFFFFFF611414141A3CFD07FFAF3C141A1414FFFFFF3C36FFFFFF3C%1A1414AFFFFF8514FFFFFF361A1414FD07FFAF141A3CFFFFFF3C14141A14%14141A14141430FD06FF2F070D0707070D0730A8FD05FF0707070D0707FF%FFFF7E070D07077EFFFF7E075AFFFFFF300707072F0D141314141413FFFF%FF36141414133CFD07FFAF3614131436FFFFFF1414A9FFFF8513141485FF%FF8460FFFFA914131414FFFFFFA9AF84AF8414133CFFFFFF3C1414131414%14131414142FFD06FF2F2F072F072F072F072F5AFD04FFA9072F072F07FF%FFFF5A2F072F07FFFFFF7E5453FFFFFF542F072F07FD04141A1414FFFFFF%60141A141436FFFFFF3685FD04FF1414148BFFFFA9613CAFFFFFAF14141A%60FFFFFF84FFFF8B1414141AFFFFFF611414141A141436FFFFFF361A1414%141A1414141A1430FD06FF2F0707070D072F2F30070729FFFFFFA80D0707%070DFFFFFF7E0707072FFD09FF84070D07070D141414131414FFFFFF3614%1314143CFFFFFF141360FFFFFF141414A8FD09FF1414133CFFFFFFAFFFFF%3614141413FFFFFF361414141314143CFFFFFF3C13141414131414141314%2FFD06FF2F2F0730072FFFFFFF7E07305AFFFFFF072F073007FFFFFF5A2F%07305AFD0AFF30072F07361414141A1414FFFFFF61141A141436FFFFFF14%1A3CFFFFFF361414FD0AFF61141A14FD06FF3C1414141AFFFFFF61141414%1A141436FFFFFF361A1414141A1414141A1430FD06FF300707070D07A8FF%FF840707A9FFFFA80D0707070DFFFFFF7E070707A9FFFF7E542F3053FFFF%FF2F0D07070D141414131414FFFFFF36141314143CFFFFFF14133CFFFFFF%3C1460FFFFAF3C363C36AFFFFF8414131484FD04FFAF1314141413FFFFFF%361414141314143CFFFFFF60363C363C1314141413142FFD06FF2F2F072F%072F7EFFFFFFA9A9FFFFFF84072F072F07FFFFFF5A2F072FFFFFFF5A072F%072FFFFFFF7E072F0714141A1414141AFFFFFF611414141A3CFFFFFF1414%14FFFFFF361A85FFFFAF1414141A85FFFFFF14141461FD04FF8414141A14%14FD08FF601A3CFD07FFA914141A14140D30FD06FF2F070D0707072FA8FD%06FFA90707070D0707FFFFFF7E070D2FFFFFFF0707070D07A8FFFFA80707%0D0D141314141413FFFFFF36141414133CFFFFFF141414FFFFFF6013FFFF%FF5A1414141360FFFFFF3C141414FD04FF3C1414131414FD08FF84133CFD%07FFAF1414131414142FFD06FF2F30072F0730072F5AA9A8A97E5A072F07%30072F077E5A7E2F3007545A7E5A2F0730072F2F7E5A7E07300714141A14%14141A6085603C1414141A3685608B141414856085361A6085603C141414%1A3685608B3614141A6085608B1414141A1414608B6085608B6085361A36%85608B6085608B6014141A14141430FD06FF2F070D0707070D0707070D07%07070D0707070D0707070D0707070D0707070D0707070D0707070D070707%2F0D14131414141314141413141414131414141314141413141414131414%141314141413141414131414141314141413141414131414141314141413%141414131414141314141413141414131414142FFD06FF2F2F072F072F07%2F072F072F072F072F072F072F072F072F072F072F072F072F072F072F07%2F072F072F07FD04141A1414141A1414141A1414141A1414141A1414141A%1414141A1414141A1414141A1414141A1414141A1414141A1414141A1414%141A1414141A1414141A1414141A1414141A1414141A1430FD06FF2F0707%070D0707070D0707070D0707070D0707070D0707070D0707070D0707070D%0707070D0707070D07070D14141413141414131414141314141413141414%131414141314141413141414131414141314141413141414131414141314%141413141414131414141314141413141414131414141314141413142FFD%06FF2F2F0730072F0730072F0730072F0730072F0730072F0730072F0730%072F0730072F0730072F0730072F07361414141A1414141A1414141A1414%141A1414141A1414141A1414141A1414141A1414141A1414141A1414141A%1414141A1414141A1414141A1414141A1414141A1414141A1414141A1414%141A1430FD06FF300707070D0707070D0707070D0707070D0707070D0707%070D0707070D0707070D0707070D0707070D0707070D0707070D0707070D%0707070D0707070D0707070D0707070D0707070D0707070D0707070D0707%070D0707070D0707070D0707070D0707070D0707070D0707070D0707070D%0707070D0707070D2FFDFCFFFDFCFFFDFCFFFDA0FFA97EFFA8A87EFF84A8%A8A984A87EFFA8A9A8A9A8FFFFFF84A97EA984A8A8FFFFFFA8A984A8A8FF%A9A87EA984A9A8A984A87EA9A8A87EFFFFA8A8FFFFFF7EA984A87EA9A8A8%A8FFA8A8A8A984A87EA9A8A87EA9A8FFFFA984A87EA9A9FD24FF2F0D845A%070DFF2F2F54072F070D5A7E2FA9072FFFFF2F2F7E0D072F0754FFFFFF7E%072F070D53A9070D072F2F7E072F070D2F54070D7EFF0754FFFFFF0D072F%070D075407A9FF5407A9072F070D077E070D072F07FF2F2F070D07A9FD24%FF5A07840707078407302F0759A984A95330FF2F07A8A80707A9072F7EA9%A8FFFFFF59072F5A072F7E0729A87EA959072FA984A92F07072FFF072FFF%FFFF84A8070784A82F0784FF2F07840707A984A87E07297E07075A2F077E%84A8A8FD24FF7E2F53FD052F5A5407302F54A8A97EFF5A2F5A7E077EA82F%075A2F84FFFFFF7E0730072FA8A9072F2F5A7E7E07302F547E5A073007A9%0754FD05FF2F07FFFF5A07302F3007A9072F2F542FA907302F2F54FF2F2F%2F542FFD25FFA9072F0784072F07842F0729542FA9FFFFFFA9072F2F07A8%A9072F2F547EFFFFFF5A07072F07A97E0D072F2F845A0707542F7E2F0D7E%072F0D2FFD05FF070DFFFF2F0D2F2F070D840707542F2F7E0D0707072FA9%2F072F2F2FFD25FFA92F070DFF30070DA854077E84A9A9FD04FF2F072F2F%FF842F2FA984AFFFFFFF7E075A5A2F07A90730A8A9A87E075A84A9A85407%A92F0D0754FD05FF0D07FFFF5407A9FF5407A9070D84A9A8A90754A80D07%A92F0D7EA9A8FF84AFFD23FF07072FFF2F0707FF2FFD04077EFD04FF5307%077EFFA8FD04072FFFFFFF53FD04072F84FD04072F53FD0407302F077EA8%07072FFD05FF0707FFFF2F077EFF2F077EFD05075A072FFF2F075330FD04%0784072FFD10FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient_Sep 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient_Sep 5 dict dup begin put/AGM_Gradient_Sep_private 100 dict def/initialize{	AGM_Gradient_Sep begin	AGM_Gradient_Sep_private begin	_compositeJob{		initializeSinglePassSeps	}{		initializeMultiPassSeps	}ifelse	initializeSeps	AGM_Gradient_private begin		/_fillSD newSpotDict def		/_rampSD newSpotDict def		/_nCustomColorSD nd end	AGM_Gradient_Sep_private 	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient_Sep	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop	 end}def/terminate{	currentdict AGM_Gradient_Sep eq{	 end	}if}defAGM_Gradient_Sep_private begin/initializeSeps{	/currentoverprint { _of } def	_noImage not _level2PS not and{		/linealFill{			currentoverprint{				0 0 1 1 rectfill			}{				mySave				8 setImageParms				_color{					_nCustomColorSD begin						cyan magenta yellow black							_spotColor{							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put						}if				 end						4{						makeByte8 4 1 roll					}repeat					true 4 _nCustomColorSD ncolorimage				}{					_nCustomColorSD/black get 1 exch sub makeByte8 					_nCustomColorSD bwImage				}ifelse				myRestore			}ifelse		}def	}if	/_whiteBytes 1 makeByte8 pt	 /knockOut{		_noImage _level2PS or currentoverprint or{			gsave			false setoverprint			1 setgray 			0 0 1 1 rectfill			grestore		}{			8 setImageParms _whiteBytes /_image load 5 execImage		}ifelse	}def	/newSpotDict{		11 dict dup begin			/nSpots 2 def			/spot1 7 dict def			/spot2 7 dict def	 end	}def	/initSpotData	{	 begin			/name nd			/tintImage nd			/tintValue nd			/spot_C nd			/spot_M nd			/spot_Y nd			/spot_K nd	 end	}def	/initSpotDict{	 begin			/cyanInk nd			/magentaInk nd			/yellowInk nd			/blackInk nd			/cyan nd			/magenta nd			/yellow nd			/black nd			spot1 initSpotData			spot2 initSpotData	 end	}def	/copySpotDict{		/_dst xp	 begin			cyanInk magentaInk yellowInk blackInk			cyan magenta yellow black			spot1 spot2	 end		_dst begin			/spot1 spot1 maxlength dict def			/spot2 spot2 maxlength dict def			spot2 copy pop			spot1 copy pop			/black xd			/yellow xd			/magenta xd			/cyan xd			/blackInk xd			/yellowInk xd			/magentaInk xd			/cyanInk xd	 end	}def	/setCustomColor	{		1 index /Black eq{			6 1 roll 5 npop			1 exch sub			setgray		}{			6 1 roll _ccAry1 astore exch			dup null eq{				pop 0			}if			setcustomcolor		}ifelse	}def	/setCStop{		/_colorStyle exch pt				_colorStyle 0 eq{			0 0 0			4 -1 roll			1 exch sub			_spotColor{				/_colorStyle 3 pt				/Black				1 index				1 exch sub			}if		}if		_colorStyle 2 eq{			3 npop		}if		_rampSD _fillSD copySpotDict				_colorStyle 4 eq{ 			pop			9 2 roll 3 npop 6 -2 roll		} if				_colorStyle 3 eq _colorStyle 4 eq or{ 								_fillSD begin				/_spot1 spot1 pt				/_spot2 spot2 pt		 end						exch dup _spot1/name get eq{				_spot1 _spot2			}{				_spot2 _spot1			}ifelse		 begin			 begin					/name xd					1 exch sub /tintValue xd					4{						tintValue mul 4 1 roll					}repeat					_spotColor not{						/tintValue null def					}if			 end				/tintValue 0 def		 end		}if		_fillSD nsetcustomcolor	}def	/renderCMYK{		spot1/name get null eq		spot2/name get null eq and		dup not{			pop			spot1 spotConverted		}if		dup not{			pop			spot2 spotConverted		}if	}def	/currentInk{		true		_inRipSep{			currentcolorspace 0 get			dup /DeviceGray eq			1 index /DeviceCMYK eq or{				pop				currentcmykcolor add add add 0 eq{					pop false				}if			}{				/Separation eq{					currentcolor 0 eq{						pop false					}if				}if			}ifelse		}{			currentgray 1 eq{				pop false			}if		}ifelse	}def	/currentInkN{			_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end		{			currentInk		}{			gsave			_spot1 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			_spot2 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			grestore						or		} ifelse	}def	/fill_ /fill load def	/fillOvp{		currentoverprint{			_inRipSep{				currentcolorspace 0 get				dup /DeviceGray eq				1 index /DeviceCMYK eq or{					pop					currentcmykcolor add add add 0 eq{						newpath					}if				}{					/Separation eq{						currentcolor 0 eq{							newpath						}if					}if				}ifelse			}{				currentgray 1 eq{					newpath				}if			}ifelse		}if		fill_	}def	/fill{		_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end				{			fillOvp		}{			_spot1 begin				gsave				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor				}{					1 setgray				}ifelse				fillOvp 				grestore		 end			_spot2 begin				name null ne{					gsave					true setoverprint					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					fillOvp					grestore				}if		 end			newpath		}ifelse	}def	/expandSpot{		_spotColor{			/_len xp			_rampSD begin				spot1 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end				spot2 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end		 end		}{			pop		}ifelse	}def	/rampImage{		currentoverprint{			rectImage		}{			_enabledSmoothShade{				fillRamp			}{				_color{					_rampSD begin						/cyanInk _cyanData 0 ne def						/magentaInk _magentaData 0 ne def						/yellowInk _yellowData 0 ne def						/blackInk _blackData 0 ne def				 end										_nSamples setImageParms					_nSamples expandSpot					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 _rampSD ncolorimage				}{					_rampSD begin						/cyanInk false def						/magentaInk false def						/yellowInk false def						/blackInk true def				 end					_nSamples setImageParms 					_blackData _rampSD bwImage				}ifelse			}ifelse		}ifelse	}def	/nsetcustomcolor where{		pop	}{		/nsetcustomcolor		{			/_nCustomColorSD xp			_nCustomColorSD begin				4 copy				/black xd				/yellow xd				/magenta xd				/cyan xd				4 copy				0 ne /blackInk xd				0 ne /yellowInk xd				0 ne /magentaInk xd				0 ne /cyanInk xd		 end			setcmykcolor		}def	}ifelse	/nsetcustomcolorend where{		pop	}{		/nsetcustomcolorend		{			/_nCustomColorSD null pt		}def	}ifelse}def/initializeSinglePassSeps{	/_decodeNorm	[0 1] pt	/_decodeInvert 	[1 0] pt	/spotConverted	{	 begin			name null eq{				false			}{				tintValue null eq tintImage null eq and{					true				}{					_inDistiller{						false					}{						false						currentpagedevice/SeparationColorNames get{name eq or}forall						not					}ifelse				}ifelse			}ifelse	 end	}def	/dictImage	{		20 dict dup begin			/Dict xd			/Decode xd			/DataSource xd			/ImageMatrix xd			/BitsPerComponent xd			/Height xd			/Width xd			/ImageType 1 def			Dict	 end		/_image load 1 execImage	}def	/bwImage{	 begin			gsave			currentoverprint{				blackInk{					[/Separation /Black /DeviceGray{}] setcolorspace					_decodeInvert dictImage				}{					5 npop				}ifelse			}{				/DeviceGray setcolorspace				_decodeNorm dictImage			}ifelse			grestore	 end	}def	/ncolorimage where{		pop	}{		/ncolorimage{		 begin				renderCMYK{					cyanInk 					magentaInk and					yellowInk and					blackInk and					not					currentoverprint 					and{							pop pop						gsave						cyanInk{							8 copy							[/Separation /Cyan /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}if						magentaInk{							8 copy							[/Separation /Magenta /DeviceGray{}] setcolorspace							4 -1 roll							3 npop							_decodeNorm dictImage						}if						yellowInk{							8 copy							[/Separation /Yellow /DeviceGray{}] setcolorspace							4 -2 roll							3 npop							_decodeNorm dictImage						}if						blackInk{							4 -3 roll							[/Separation /Black /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}{							8 npop						}ifelse						grestore					}{						/_colorimage load 10 execImage					}ifelse				}{					6 npop					gsave					spot1 begin						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							4 copy							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							1 setgray fill						}ifelse				 end					spot2 begin						true setoverprint						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							4 npop							1 setgray fill						}ifelse				 end					grestore				}ifelse		 end		}def	}ifelse	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_renderCMYK not{			_rampSD begin				[/DeviceN 					[					spot1 begin						name null ne tintImage null ne and{							name						}if				 end					spot2 begin						name null ne tintImage null ne and{							name						}if				 end					]					_inDistiller {						/DeviceCMYK [							spot1 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 1								}{									0 0 0 0 0								}ifelse						 end							spot2 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 2								}{									0 0 0 0 0								}ifelse						 end							5 1 roll 6 -2 roll add							dup 1 eq {								pop								8 /index cvx 1 /exch cvx /sub cvx								9 1 /roll cvx							}{								2 eq {									8 /index cvx 1 /exch cvx /sub cvx									10 1 /roll cvx								}if							}ifelse							4 1 /roll cvx 5 -2 /roll cvx							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx							3 1 /roll cvx 4 -2 /roll cvx							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx							2 1 /roll cvx 3 -2 /roll cvx							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx							6 -2 /roll cvx /pop cvx /pop cvx						] cvx bind					}{						/DeviceCMYK {}					}ifelse				] setcolorspace		 end			/_nColorSpace currentcolorspace pt		}if				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C0_Space _nColorSpace pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C1_Space _nColorSpace pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}def/initializeMultiPassSeps{	/invertXfer{		[		{			1 exch sub		}/exec load systemdict /currenttransfer get exec /exec load		] cvx systemdict /settransfer get exec	}def	/ccThrough{		gsave		1 setCustomColor		currentcmykcolor		grestore		add add add 0 ne	}def	/spotConverted	{	 begin			_isCMYKSep not{				false			}{				name null eq{					false				}{					tintValue null eq tintImage null eq and{						true					}{						spot_C spot_M spot_Y spot_K name ccThrough					}ifelse				}ifelse			}ifelse	 end	}def	/spotChannel	{		_isCMYKSep{			pop false		}{			/_spotDict xp				_spotDict/name get null eq{					false				}{					_spotDict/spot_C get					_spotDict/spot_M get					_spotDict/spot_Y get					_spotDict/spot_K get					_spotDict/name get					ccThrough 				}ifelse		}ifelse	}def	/getChannelData	{		_isCMYKSep dup{			pop renderCMYK		}if		{			_blackPlate{				4 1 roll 3 npop blackInk			}{				_yellowPlate{					4 2 roll 3 npop yellowInk				}{					_magentaPlate{						4 3 roll 3 npop magentaInk					}{						3 npop cyanInk					}ifelse				}ifelse			}ifelse			{				true /nonZeroData			}{				true /zeroData			}ifelse		}{			4 npop			spot1/name get null ne 			spot1 spotChannel and{				spot1/tintImage get dup null ne{					false /nonZeroData				}{					pop false /noData				}ifelse			}{				spot2/name get null ne 				spot2 spotChannel and{					spot2/tintImage get dup null ne{						false /nonZeroData					}{						pop false /noData					}ifelse				}{					false /noData				}ifelse			}ifelse		}ifelse	}def	/renderChannelData	{		/_tmp xp		_tmp /nonZeroData ne currentoverprint and{			pop			_tmp /zeroData eq{pop}if			4 npop		}{			_tmp /nonZeroData eq{				{					invertXfer				}if					systemdict/image				get 5 execImage			}{				pop				_tmp /zeroData eq{pop}if				4 npop				knockOut			}ifelse		}ifelse	}def	/bwImage{	 begin			gsave			dup dup dup			getChannelData			exch pop false exch			renderChannelData			grestore	 end	}def	/ncolorimage{	 begin			pop pop			gsave			spot2/name get null ne spot2 spotChannel and{				true setoverprint			}if			getChannelData 			renderChannelData			grestore	 end	}def	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C0_Space /DeviceGray pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C1_Space /DeviceGray pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}defendenddefaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient 20 dict dup begin put/AGM_Gradient_private 201 dict def/initialize{	AGM_Gradient begin	AGM_Gradient_private begin	initializeVars		/bd systemdict/mark get def	/ed		_level2PS 		{			(>>)		}{			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)		} ifelse	cvx def		_level2PS{		initializeLev2	}{		initializeLev1	}ifelse		queryDevice		initializeRectFill	initializeShading	initializeOps	_producingSeps{		AGM_Gradient_Sep/initialize get exec	}{		initializeComposite	}ifelse	_illustrator{		/f{}def		/F{}def		/s{}def		/S{}def		/b{}def		/B{}def	}if	/image where{		/image get /_image xd	}if	/colorimage where{		/colorimage get /_colorimage xd	}if	AGM_Gradient_private	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop end}def/initializeAI{	pop pop 	AGM_Gradient/AGM_Gradient_private get /_illustrator true put	AGM_Gradient/initialize get exec		AGM_Gradient begin}def/unload{	systemdict/languagelevel known{		systemdict/languagelevel get 2 ge{			userdict/AGM_Gradient_Sep 2 copy known{				undef			}{				pop pop			}ifelse			userdict/AGM_Gradient 2 copy known{				undef			}{				pop pop			}ifelse		}if	}if}def/terminate{	currentdict AGM_Gradient eq{	 end	}if}def AGM_Gradient_private begin/initializeVars{	/_d255 256 array def	0 1 255{		_d255 exch dup 255 div put	}bind for	/_d255- 256 array def	0 1 255{		_d255- exch 1 _d255 2 index get sub put	}bind for	/_sSave nd	/_dUserSpace matrix defaultmatrix def	/_bUMatrix matrix def	/_imageMatrix matrix def	/_saveMatrix matrix def	/_xm matrix def	/_ccAry1 5 array def	/_bbox 4 array pt	/_level2PS 		systemdict/languagelevel known dup{			pop systemdict/languagelevel get 2 ge		}if	def	/_level3PS		_level2PS systemdict/shfill known and	def	currentdict /_illustrator known not{		/_illustrator false def	}if	}def/initializeOps{	AGM_Gradient begin	currentdict/Bc known not{		/Bc{					_renderFlag 2 eq _enabledSmoothShade or{				6 npop			}{				pushBSpace				_rampIndex 0 eq{					pop pop					setCStop				}if				linealFill				popBSpace			}ifelse				}def	}if		currentdict/Bg known not{		/Bg{			10 npop			/_gradName xp			/_renderFlag xp			/_enabledSmoothShade false pt					_renderFlag 2 ne{						_illustrator{					_of setoverprint				}if						/_enabledSmoothShade 					_level3PS{						_usingSmoothShade						_producingSeps not						currentoverprint not or and						_noImage not and					}{						false					}ifelse				pt								_illustrator _eo and _renderFlag 3 eq or{					eoclip				}{					clip				}ifelse						_gradNames _gradName 2 copy known{					get					mark exch aload pop					/_gradType xp					1 sub dup /_rampIndex xp					/_maxRampIndex xp					mark exch aload pop					0 0				}if				pop pop				getRampData			}{				mark mark			}ifelse		}def	}if		currentdict/Bm known not{		/Bm{			_renderFlag 2 ne{				_gradType 0 eq{					linealRamp				}{					radialGrad				}ifelse			}{				6 npop			}ifelse		}def	}if		currentdict/Bh known not{		/Bh{			2 npop			/_yHi xp			/_xHi xp			/_radHilite _xHi 0 ne _yHi 0 ne or pt		}def	}if		currentdict/Bn known not{		/Bn{			AGM_Gradient_private begin				dict /_gradNames xp		 end		}def	}if		currentdict/Bd known not{		/Bd{			AGM_Gradient begin			AGM_Gradient_private begin				/_nColorsBd xp				/_gradType xp				/_gradName xp		}def	}if		currentdict/BD known not{		/BD{				currentdict/_gradNames known not{					/_gradNames 20 dict def				}if				] _nColorsBd _gradType				]  _gradName exch /_gradNames xput		 end		 end		}def	}if		currentdict/Bb known not{		/Bb{					AGM_Gradient/AGM_Gradient_private get /_illustrator get not{				AGM_Gradient begin			}if			AGM_Gradient_private begin			_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin			}if			mySave		}def	}if		currentdict/BB known not{		/BB{					/_tmp xp			cleartomark cleartomark					_tmp dup			_renderFlag					myRestore					_producingSeps{			 end			}if					_illustrator dup		 end			not {			 end			}if					{				2 ne exch 0 gt and{					2 eq{						s					}{						S					}ifelse				}{					pop newpath				}ifelse			}{				pop newpath			}ifelse						}def	}if		currentdict/Xm known not{		/Xm{			_xm astore pop		}def	}if	 end}def/queryDevice{	/_inDistiller		systemdict /currentdistillerparams known	def	/_inRipSep		_level2PS{			currentpagedevice/Separations 2 copy known{				get			}{				pop pop false			}ifelse		}{			false		}ifelse		_inDistiller or	def	/_noImage /lv1Fix where{		pop lv1Fix	}{		false	}ifelse	def	/_useShells where{		/_useShells get /_usingShells xp	}{		/_usingShells false def	}ifelse		/_useSmoothShade where{		pop	}{		/_useSmoothShade false def 	}ifelse	/_forceToCMYK where{		pop	}{		/_forceToCMYK false def 	}ifelse	/_cyanPlate 1 0 0 0 testCMYKColorThrough def	/_magentaPlate 0 1 0 0 testCMYKColorThrough def	/_yellowPlate 0 0 1 0 testCMYKColorThrough def	/_blackPlate 0 0 0 1 testCMYKColorThrough def	/_compositeJob		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and	def	/_isCMYKSep		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or	def	/_compositeSpotDevice where{		pop	}{		/_compositeSpotDevice _compositeJob not _inRipSep or{			1		}{			0		}ifelse		def	}ifelse	/_producingSeps _compositeSpotDevice 0 ne def	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/_dpiThreshold where{		pop	}{		/_dpiThreshold 600 def	}ifelse	/_screenFreqThreshold where{		pop	}{		/_screenFreqThreshold 150 def	}ifelse	/_contoneDevice where{		pop	}{		/_contoneDevice false def	}ifelse	/_subSampleOK 		_deviceDPI _dpiThreshold le 		currentScreenFreq _screenFreqThreshold le and 		_contoneDevice not and 	def}def/initializeRectFill{	/rectfill where dup{		exch pop not _producingSeps or	}{		not	}ifelse	{		/rectfill{			gsave			newpath			4 2 roll moveto			1 index 0 rlineto			0 1 index rlineto			1 index neg 0 rlineto			pop pop			closepath			fill			grestore		}def	}if}def/initializeLev1{	/currentScreenFreq{		currentscreen pop pop	}def	/_byte 1 string def	/colorimage where{		pop	}{		/colorimage{			pop pop			/_blackTmp xp			/_yellowTmp xp			/_magentaTmp xp			/_cyanTmp xp			/_cnt 0 pt			[			_byte dup 0			_cyanTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx			_magentaTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx			_yellowTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx			_blackTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/dup cvx 1 /gt cvx{				pop 1			}/if cvx			255 /mul cvx /cvi cvx			256 /mod cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/put cvx			/_cnt dup cvx 1 /add cvx /pt cvx			] cvx			bind			/_image load 5 execImage		}def	}ifelse}def/initializeLev2{	/level2ScreenFreq{	 begin		60		HalftoneType 1 eq{			pop Frequency		}if		HalftoneType 2 eq{			pop GrayFrequency		}if		HalftoneType 5 eq{			pop Default level2ScreenFreq		}if		 end	}def	/currentScreenFreq{		currenthalftone level2ScreenFreq	}def}def/initializeShading{	_useSmoothShade _level3PS and{		/_usingSmoothShade true pt		initializeLev3_Ops	}{		/_usingSmoothShade false pt	}ifelse}def/initializeLev3_Ops{	/initShFill{		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt		/_rampFuncsArray _maxRampIndex array pt		/_boundsArray _maxRampIndex 1 sub array pt		/_encodeArray _maxRampIndex 2 mul array pt		/_beginCoord _rampPoint pt		/_colorSpace null pt		/_firstFill _rampIndex _maxRampIndex eq pt		/_lastFill false pt	}def	/linealShFill{		popBSpace		_xm aload pop pushBSpace				/_size _index 1 add pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt		}if				bd			/ShadingType 2			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_firstFill _lastFill]			/Domain [0 1] 			/Coords [_beginCoord 0 _endCoord 0]		ed		shfill	}def		/radialShFill{		/_size _maxRampIndex _index sub pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt			/_boundsArray _boundsArray _index _size 1 sub getinterval pt			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt		}if				/_rampLen _beginCoord _endCoord sub pt		bd			/ShadingType 3			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_lastFill _firstFill]			/Domain [0 1] 			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 		ed		shfill				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if	}def		%	/sampFunc{		/_tmp exch pt		bd			_tmp length 1 eq {				_tmp 0 get				/_tmp 2 string pt				dup _tmp 0 3 -1 roll put				_tmp 1 3 -1 roll put			}if			/FunctionType 0			/Order 1			/Size [_tmp length]			/Domain [0 1]			/BitsPerSample 8			/DataSource _tmp			/Range [0 1]		ed	}def		/fillRamp{				/_invert _midPoint 0.5 lt pt		_rampIndex _maxRampIndex eq {			initShFill		}if				getRampColorSpace				_colorSpace null eq{			/_colorSpace _rampColorSpace pt		}{			_colorSpace _rampColorSpace ne _rgbInCMYK or{				/_index _index 1 				_gradType 0 eq{					sub pt					linealShFill				}{					add pt					radialShFill				}ifelse				initShFill				/_colorSpace _rampColorSpace pt			} if		}ifelse		/_endCoord _endPoint pt			/_rgbInCMYK false pt		_producingSeps _forceToCMYK or _rgbRamp and {			_spotColor{				_renderCMYK			}{				_isCMYKSep			}ifelse		}{			false		}ifelse		{			_compositeJob{				/_rgbInCMYK true pt				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor				dup length string copy /_kData exch pt				dup length string copy /_yData exch pt				dup length string copy /_mData exch pt				dup length string copy /_cData exch pt			}{				_rampFuncsArray _index					_cyanPlate{_cyanData}if						_magentaPlate{_magentaData}if						_yellowPlate{_yellowData}if						_blackPlate{_blackData}if					_nSamples expandOne					sampFunc					dup begin /Decode [1 0] def end				put				/_invert false pt			}ifelse		}{			_rampFuncsArray _index				bd					/FunctionType 2					/Domain [0 1]					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div					_gradType 0 eq{						_invert{/C1}{/C0}ifelse _C0						_invert{/C0}{/C1}ifelse _C1					}{						_invert{/C0}{/C1}ifelse _C1						_invert{/C1}{/C0}ifelse _C0					}ifelse				ed			put		}ifelse				_rampIndex 1 ne{			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put		} if				0 1 _invert {exch}if		_encodeArray _index 2 mul 1 add 3 -1 roll put		_encodeArray _index 2 mul 3 -1 roll put		_rampIndex 1 eq {			/_lastFill true pt			_gradType 0 eq{				linealShFill			}{				radialShFill			}ifelse		}if		/_index _index 1 		_gradType 0 eq{			add pt		}{			sub pt		}ifelse	}def}def/initializeComposite{	/bwImage{		pop /_image load 5 execImage 	}def	/rampImage{		_enabledSmoothShade{			fillRamp		}{			_color{				_nSamples setImageParms									_rgbRamp _forceToCMYK not and{					_redData _greenData _blueData _nSamples 3 expandColor					true 3 null ncolorimage				}{					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 null ncolorimage				}ifelse			}{				_nSamples setImageParms _blackData null bwImage			}ifelse		}ifelse	}def	/setCStop{		/_colorStyle exch pt		_colorStyle 0 eq{			1 exch sub			0 0 0			4 -1 roll		}if				_colorStyle 2 eq{			_forceToCMYK{				3 npop setcmykcolor			}{				setrgbcolor 4 npop			}ifelse		}if				_colorStyle 3 eq{			1 exch sub /_tmp xp			pop			4{				_tmp mul 4 1 roll			}repeat		}if				_colorStyle 4 eq{			_forceToCMYK{				6 npop setcmykcolor			}{				3 -1 roll pop pop				1 exch sub /_tmp xp				3{					1 exch sub _tmp mul 1 exch sub 3 1 roll				}repeat				setrgbcolor 				4 npop			}ifelse		}if		_colorStyle 2 ne _colorStyle 4 ne and{			null nsetcustomcolor		}if	}def	/nsetcustomcolor	{		pop setcmykcolor	}def	/nsetcustomcolorend	{	}def	/ncolorimage{		pop 		/_colorimage load 10 execImage	}def	_noImage not _level2PS not and{		/linealFill{			8 setImageParms			_color{				currentcmykcolor				4{					makeByte8 4 1 roll				}repeat				true 4 null ncolorimage			}{				currentgray makeByte8 null bwImage			}ifelse		}def	}if	/getRampColorSpace{		_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		/_C0 [currentcolor] pt		/_C0_Space currentcolorspace pt				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		/_C1 [currentcolor] pt		/_C1_Space currentcolorspace pt				/_rampColorSpace _C0_Space pt				_spotColor{			nsetcustomcolorend		}if	}def}def/npop{	{pop}repeat}def/xd{	exch def}def/nd{	null def}def/pt{	AGM_Gradient_private 3 1 roll put}def/xp{	exch pt}def/xput{	dup load dup length exch maxlength eq{		dup dup load dup		length 2 mul dict copy def	}if	load begin		def  end}def/mySave{	save /_sSave xp}def/myRestore{	_sSave type /savetype eq{		_sSave restore	}if}def/gMark{	counttomark 2 add -1 roll}def/execImage{	/_tmp xp	{		exec	}stopped{		$error /errorname get /undefinedresult ne{			stop		}{			_tmp npop		}ifelse	}if}def/pushBSpace{	newpath gsave	_bUMatrix astore concat }def/popBSpace{	grestore}def/makeByte8{	/_tmp 0 pt	255 mul cvi	8 string 8{		dup _tmp 3 index put 		/_tmp _tmp 1 add pt	}repeat	exch pop}def/setImageParms{	1 8 2 index 0 0 1 0 0 _imageMatrix astore}def/linealFill{	0 0 1 1 rectfill}def/testCMYKColorThrough{	gsave	setcmykcolor currentcmykcolor	grestore	add add add 0 ne}def/expandOne	{	/_tmp xp	dup type /stringtype ne{		_tmp string		exch		dup 0 ne{			255 mul cvi			0 1 _tmp 1 sub{				3 copy				exch put pop			}for		}if		pop	}if}def/expandColor{	/_channels xp	/_len xp	_channels{		_len expandOne _channels 1 roll	}repeat}def/blendColor{		_color{		_rgbRamp _producingSeps not and _forceToCMYK not and{			_redData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_greenData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blueData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			/setrgbcolor cvx		}{			_cyanData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_magentaData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_yellowData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blackData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if				_spotColor{				_rampSD begin					/_rampSD cvx /begin cvx						spot1 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx						spot2 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/_rampSD cvx				/nsetcustomcolor cvx			}{				/setcmykcolor cvx			}ifelse		}ifelse	}{		_blackData dup type /stringtype eq{			/_ndx cvx /get cvx _d255 /exch cvx /get cvx		}if				_enabledSmoothShade{			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx		}{			 /setgray cvx		}ifelse	}ifelse}def/useRectImage{	_subSampleOK _enabledSmoothShade not and{		{			mark			0 1 dtransform atan cvi 90 mod 0 eq			1 0 dtransform atan cvi 90 mod 0 eq		} stopped		{			cleartomark			false		}		{			and exch pop		} ifelse	}{		false	}ifelse}def/linealImage{	_noImage{		rectImage	}{		_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get				/rampImage get exec		}{			useRectImage{				rectImage			}{				rampImage			}ifelse		}ifelse	}ifelse}def/linealRamp{	pushBSpace	_ramp{		linealImage	}{		linealFill	}ifelse	popBSpace	/_rampIndex _rampIndex 1 sub pt	_rampIndex 0 gt{		getRampData	}if}def/radialGrad{	/_usingShells currentoverprint _producingSeps and _usingShells or pt	/_firstShell true pt	_enabledSmoothShade not{		currentoverprint _producingSeps and{						newpath			clippath pathbbox 			1 add 4 1 roll			1 add 4 1 roll			1 sub 4 1 roll			1 sub 4 1 roll			_bbox astore pop						newpath			_bbox 0 get _bbox 1 get moveto			_bbox 2 get _bbox 1 get lineto			_bbox 2 get _bbox 3 get lineto			_bbox 0 get _bbox 3 get lineto			closepath			6 copy			gsave _bUMatrix astore concat			1 0 moveto 0 0 1 0 360 arc closepath			eoclip fill			popBSpace		}{			fill		}ifelse	}if	pushBSpace		_radHilite{		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp		_rampPoint 1 lt{			1 _rampPoint sub dup _xHi mul exch _yHi mul translate		}if	}if	_rampIndex{		radialRamp		/_rampIndex _rampIndex 1 sub pt		_rampIndex 0 gt{			getRampData		}if	}repeat		popBSpace	}def/getNSamples{	0 exch	{		dup type /stringtype eq{			length exch pop exit		}if		pop	}forall	dup 0 eq{		pop 1	}if}def/getRampData{	/_rampType gMark pt	/_color _rampType 0 gt pt	/_ccRGB _rampType 5 eq _rampType 6 eq or pt	/_rgbRamp _rampType 4 eq _ccRGB or pt	/_ccProcess _rampType 2 eq _rampType 3 eq or pt	_producingSeps{		_rampSD initSpotDict		/_spotColor _ccProcess _ccRGB or pt	}{		/_spotColor false pt	}ifelse	/_ramp true pt	100 div /_rampPoint xp	100 div /_midPoint xp		dup /_colorStyle xp	_colorStyle 0 eq{ 		2	}{		_colorStyle 1 eq{ 			5		}{			_colorStyle 2 eq{				8			}{				_colorStyle 3 eq{					_producingSeps{						_rampSD /spot1 get begin							/name 3 index def							/spot_K 4 index def							/spot_Y 5 index def							/spot_M 6 index def							/spot_C 7 index def					 end					}if					7				}{					_producingSeps{						_rampSD/spot1 get begin							/name 4 index def							/spot_K 8 index def							/spot_Y 9 index def							/spot_M 10 index def							/spot_C 11 index def					 end					}if					11				} ifelse			}ifelse		}ifelse	}ifelse	/_tmp xp	_tmp index 100 div /_endPoint xp		_gradType 1 eq{		_tmp 1 add index 100 div /_midPoint xp	}if		_producingSeps{		_tmp 2 add index /_nextColorStyle xp		_nextColorStyle 3 eq{			/_tmp _tmp 4 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 2 add index def					/spot_Y _tmp 3 add index def					/spot_M _tmp 4 add index def					/spot_C _tmp 5 add index def			 end			}{				pop			}ifelse		}if		_nextColorStyle 4 eq{			/_tmp _tmp 5 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 5 add index def					/spot_Y _tmp 6 add index def					/spot_M _tmp 7 add index def					/spot_C _tmp 8 add index def			 end			}{				pop			}ifelse		}if	}if	_rampType 3 eq _rampType 6 eq or{		/_tint2Data gMark pt	}if	_ccProcess _ccRGB or{		/_tint1Data gMark pt	}if	_rgbRamp{		/_blueData gMark pt		/_greenData gMark pt		/_redData gMark pt	}if		_producingSeps{		_ccProcess _ccRGB or{			_rampType 3 eq _rampType 6 eq or{				_rampSD /spot2 get begin					/tintImage _gradType 0 eq{						_tint2Data					}{						_tint1Data					}ifelse					def					name null eq{						/name /Black def					}if			 end			}if			_rampSD /spot1 get begin				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{					_tint1Data				}{					_tint2Data				}ifelse				def				_rampType 2 eq _rampType 5 eq or{					name null eq{						/name _rampSD/spot2 get /name get def						/spot_C _rampSD/spot2 get /spot_C get def						/spot_M _rampSD/spot2 get /spot_M get def						/spot_Y _rampSD/spot2 get /spot_Y get def						/spot_K _rampSD/spot2 get /spot_K get def						_rampSD/spot2 get /name null put					}if				}{					name null eq{						/name /Black def					}if				}ifelse		 end		}if	}if	/_blackData gMark pt	_rampType 0 gt{		counttomark 4 add -3 roll		/_yellowData xp		/_magentaData xp		/_cyanData xp	}if	_ramp{		/_nSamples			[			_rampType 0 eq {_blackData}if			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if			] getNSamples pt		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if	} if		setCStop}def/rectImage{	gsave	/_sInc 1 pt	/_bInc 1 _nSamples div pt	/_nSubSamples _nSamples pt	/_optimize false pt			_subSampleOK{		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt				_pChange .5 gt dup /_optimize xp{			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc 1 _nSubSamples div pt			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt		}if	}if	0	_nSubSamples	[	/dup cvx	_optimize {		/round cvx /cvi cvx	} if	/_ndx /exch cvx /pt cvx	blendColor	0 0 _bInc 1 /rectfill cvx	_bInc 0 /translate cvx	_sInc /add cvx	] cvx	bind	repeat	pop	_spotColor{		nsetcustomcolorend	}if	grestore}def/radialInit{	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt	/_sInc -1 pt	/_rampLen _rampPoint _endPoint sub pt	/_bInc _rampLen _nSamples div neg pt	/_optimize false pt	_subSampleOK{		/_uRampLen			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			2 copy lt{				exch			}if pop		pt		/_pChange 			_uRampLen 0 eq{				0			}{				_nSamples _uRampLen div			}ifelse		pt		_pChange .5 gt dup /_optimize xp{			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc _rampLen _nRadSamples div neg pt			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt		}if	}if	_radHilite{		/_xBCInc _xHi _rampLen mul _nRadSamples div pt		/_yBCInc _yHi _rampLen mul _nRadSamples div pt	}if}def/radialRamp{	_enabledSmoothShade{		fillRamp	}{		/_saveMatrix _saveMatrix currentmatrix def				radialInit			%		%		true		_producingSeps _rgbRamp not and{			_nSamples 1 gt{ 				pop				/_ndx 0 pt				[blendColor] cvx exec				currentInkN				/_ndx _nSamples 1 sub pt				[blendColor] cvx exec				currentInkN				or			}if		}if		{			_rampPoint					_nSamples 1 sub					_nRadSamples 			[				/dup cvx						_optimize{					/round cvx /cvi cvx				}if						/_ndx /exch cvx /pt cvx								_usingShells{					/_firstShell cvx{						/_firstShell false pt					}{						0 0 3 index 360 0 arcn fill					}/ifelse cvx				}if						blendColor						_usingShells{					0 0 3 /index cvx 0 360 /arc cvx 				}{					0 0 3 /index cvx 0 360 /arc cvx /fill cvx				}ifelse						/exch cvx _bInc /add cvx /exch cvx						_sInc /add cvx						_radHilite{					_xBCInc _yBCInc /translate cvx				}if			] cvx bind			repeat					pop pop		}{			_usingShells{				0 0 _rampPoint 360 0 arcn fill			}if		}ifelse			_saveMatrix setmatrix				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if				_usingShells _rampIndex 1 eq and{			fill		}if			_spotColor{			nsetcustomcolorend		}if	}ifelse}defendenddefaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_pattern_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)%%Version: 1.1 0%%CreationDate: (03/26/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 95 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/@{} def/&{} def/dp{	dup null eq	{		pop		_dp 0 ne		{			0 1 _dp 1 sub _dl mod			{				_da exch get 3 get			} for			_dp 1 sub _dl mod 1 add packedarray			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll			definepattern pop		} if	}	{		_dp 0 ne _dp _dl mod 0 eq and		{			null dp		} if		7 packedarray _da exch _dp _dl mod exch put		_dp _dl mod _da 0 get 4 get 2 packedarray		/_dp _dp 1 add def	} ifelse} def/E{	_ed begin	dup 0 get type /arraytype ne	{		0		{			dup 1 add index type /arraytype eq			{				1 add			}			{				exit			} ifelse		} loop		array astore	} if	/_dd exch def	/_ury exch def	/_urx exch def	/_lly exch def	/_llx exch def	/_n exch def	/_y 0 def	/_dl 4 def	/_dp 0 def	/_da _dl array def	0 1 _dd length 1 sub	{		/_d exch _dd exch get def		0 2 _d length 2 sub		{			/_x exch def			/_c false def			/_r _d _x 1 add get cvlit def			_r _ ne			{				_urx _llx sub _ury _lly sub				[				1 0 0 1 0 0				]				[				/save cvx				_llx neg _lly neg /translate cvx				_c				{					nc /begin cvx				} if				_r dup type /stringtype eq				{					cvx				}				{					{						exec					} /forall cvx				} ifelse				_c				{					/end cvx				} if				/restore cvx				] cvx				/_fn 12 _n length add string def				_y _fn cvs pop				/_y _y 1 add def				_fn 12 _n putinterval				_fn _c false dp				_d exch _x 1 add exch put			} if		} for	} for	null dp	_n _dd /_pd end	xput} def/fc{	_fm dup concatmatrix pop} def/p{	/_fm exch ddef	9 -2 roll _pm translate fc	7 -2 roll _pm scale fc	5 -1 roll _pm rotate fc	4 -2 roll exch 0 ne	{		dup _pm rotate fc		1 -1 _pm scale fc		neg _pm rotate fc	}	{		pop	} ifelse	dup _pm rotate fc	exch dup sin exch cos div 1 0 0 1 0 6 2 roll	_pm astore fc	neg _pm rotate fc	_pd exch get /_fdd exch ddef	/_pf	{		save		/_doClip 0 ddef		0 1 _fdd length 1 sub		{			/_fd exch _fdd exch get ddef			_fd			0 2 _fd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _fc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _fm					patternfill				}				{					pop					fill				} ifelse				grestore				pop			} for			pop		} for		restore		newpath	} ddef	/_psf	{		save		/_doClip 0 ddef		0 1 _fdd length 1 sub		{			/_fd exch _fdd exch get ddef			_fd			0 2 _fd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _fc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _fm					9 copy 6 npop patternashow				}				{					pop					6 copy 3 npop hvashow				} ifelse				grestore				pop			} for			pop		} for		restore		sw rmoveto	} ddef	/_pjsf	{		save		/_doClip 0 ddef		0 1 _fdd length 1 sub		{			/_fd exch _fdd exch get ddef			_fd			0 2 _fd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _fc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _fm					12 copy 6 npop patternawidthshow				}				{					pop 9 copy 3 npop hvawidthshow				} ifelse				grestore				pop			} for			pop		} for		restore		swj rmoveto	} ddef	/_lp /none ddef} def/sc{	_sm dup concatmatrix pop} def/P{	/_sm exch ddef	9 -2 roll _pm translate sc	7 -2 roll _pm scale sc	5 -1 roll _pm rotate sc	4 -2 roll exch 0 ne	{		dup _pm rotate sc		1 -1 _pm scale sc		neg _pm rotate sc	}	{		pop	} ifelse	dup _pm rotate sc	exch dup sin exch cos div 1 0 0 1 0 6 2 roll	_pm astore sc	neg _pm rotate sc	_pd exch get /_sdd exch ddef	/_ps	{		save		/_doClip 0 ddef		0 1 _sdd length 1 sub		{			/_sd exch _sdd exch get ddef			_sd			0 2 _sd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _sc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _sm					patternstroke				}				{					pop stroke				} ifelse				grestore				pop			} for			pop		} for		restore		newpath	} ddef	/_pss	{		save		/_doClip 0 ddef		0 1 _sdd length 1 sub		{			/_sd exch _sdd exch get ddef			_sd			0 2 _sd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _sc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _sm					10 copy 6 npop patternashowstroke				}				{					pop 7 copy 3 npop ss				} ifelse				grestore				pop			} for			pop		} for		restore		pop sw rmoveto	} ddef	/_pjss	{		save		/_doClip 0 ddef		0 1 _sdd length 1 sub		{			/_sd exch _sdd exch get ddef			_sd			0 2 _sd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _sc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _sm					13 copy 6 npop patternawidthshowstroke				}				{					pop 10 copy 3 npop jss				} ifelse				grestore				pop			} for			pop		} for		restore		pop swj rmoveto	} ddef	/_lp /none ddef} defenduserdict /Adobe_pattern_AI5 18 dict dup beginput/initialize{	/definepattern where	{		pop		pop pop	}	{	 begin	 begin		Adobe_pattern_AI5 begin		Adobe_pattern_AI5		{			dup xcheck			{				bind			} if			pop pop		} forall		mark		cachestatus 7 1 roll pop pop pop pop exch pop exch		{			{				10000 add				dup 2 index gt				{					exit				} if				dup setcachelimit			} loop		} stopped		cleartomark	 end 				 end	 end				Adobe_pattern_AI5 begin	} ifelse} def/terminate{	currentdict Adobe_pattern_AI5 eq	{	 end	} if} deferrordict/nocurrentpoint{	pop	stop} puterrordict/invalidaccess{	pop	stop} put/patternencoding256 array def0 1 255{	patternencoding exch ( ) 2 copy exch 0 exch put cvn put} for/definepattern{	17 dict begin	/uniform exch def	/cache exch def	/key exch def	/procarray exch def	/mtx exch matrix invertmatrix def	/height exch def	/width exch def	/ctm matrix currentmatrix def	/ptm matrix def	/str 32 string def	/slice 9 dict def	slice /s 1 put	slice /q 256 procarray length div sqrt floor cvi put	slice /b 0 put	/FontBBox	[	0 0 0 0	] def	/FontMatrix mtx matrix copy def	/Encoding patternencoding def	/FontType 3 def	/BuildChar	{		exch	 begin		/setstrokeadjust where {pop true setstrokeadjust} if		slice begin		dup q dup mul mod s idiv /i exch def		dup q dup mul mod s mod /j exch def		q dup mul idiv procarray exch get		/xl j width s div mul def		/xg j 1 add width s div mul def		/yl i height s div mul def		/yg i 1 add height s div mul def		uniform		{			1 1		}		{			width 0 dtransform			dup mul exch dup mul add sqrt dup 1 add exch div			0 height dtransform			dup mul exch dup mul add sqrt dup 1 add exch div		} ifelse		width 0 cache		{			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul			setcachedevice		}		{			setcharwidth		} ifelse		gsave		scale		newpath		xl yl moveto		xg yl lineto		xg yg lineto		xl yg lineto		closepath		clip		newpath	 end	 end		exec		grestore	} def	key currentdict definefont end} def/patterncachesize{	gsave	newpath	0 0 moveto	width 0 lineto	width height lineto	0 height lineto	closepath	patternmatrix setmatrix	pathbbox	exch ceiling 4 -1 roll floor sub 3 1 roll	ceiling exch floor sub	mul 1 add	grestore} def/patterncachelimit{	cachestatus 7 1 roll 6 npop 8 mul} def/patternpath{	exch dup begin	setfont	ctm setmatrix	concat	slice exch /b exch slice /q get dup mul mul put	FontMatrix concat	uniform	{		width 0 dtransform round width div exch round width div exch		0 height dtransform round height div exch height div exch		0 0 transform round exch round exch		ptm astore setmatrix	}	{		ptm currentmatrix pop	} ifelse	{		currentpoint	} stopped not	{		2 npop		pathbbox		true		4 index 3 index eq		4 index 3 index eq		and		{			pop false			{				{					2 npop				}				{					3 npop true				}				{					7 npop true				}				{					pop true				} pathforall			} stopped			{				5 npop true			} if		} if		{			height div ceiling height mul 4 1 roll			width div ceiling width mul 4 1 roll			height div floor height mul 4 1 roll			width div floor width mul 4 1 roll			2 index sub height div ceiling cvi exch			3 index sub width div ceiling cvi exch			4 2 roll moveto			FontMatrix mtx invertmatrix			dup dup 4 get exch 5 get rmoveto			ptm ptm concatmatrix pop			slice /s			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi			dup slice /q get gt			{				pop slice /q get			} if			put			0 1 slice /s get dup mul 1 sub			{				slice /b get add				gsave				0 1 str length 1 sub				{					str exch 2 index put				} for				pop				dup				{					gsave					ptm setmatrix					1 index str length idiv					{						str show					} repeat					1 index str length mod str exch 0 exch getinterval show					grestore					0 height rmoveto				} repeat				grestore			} for			2 npop		}		{			4 npop		} ifelse	} if end} def/patternclip{	_eo {eoclip} {clip} ifelse} def/patternstrokepath{	strokepath} def/patternmatrixmatrix def/patternfill{	dup type /dicttype eq	{		Adobe_pattern_AI5 /patternmatrix get	} if	gsave	patternclip	Adobe_pattern_AI5 /patternpath get exec	grestore	newpath} def/patternstroke{	dup type /dicttype eq	{		Adobe_pattern_AI5 /patternmatrix get	} if	gsave	patternstrokepath	true	{		{			{				newpath				moveto			}			{				lineto			}			{				curveto			}			{				closepath				3 copy				Adobe_pattern_AI5 /patternfill get exec			} pathforall			3 npop		} stopped		{			5 npop			patternclip			Adobe_pattern_AI5 /patternfill get exec		} if	}	{		patternclip		Adobe_pattern_AI5 /patternfill get exec	} ifelse	grestore	newpath} def/vpatternawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef		{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec			grestore			_fontRotateAdjust sub			moveto			_hvwb eq { _hvcx _hvcy rmoveto } if			_hvax _hvay rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			_hvax sub			3 index _hvwb eq { _hvcx sub } if			currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto			gsave			2 index false charpath			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec			grestore			newpath moveto pop pop		} ifelse	} cforall	3 npop} def/hpatternawidthshow{	{		dup cstring exch		gsave		3 index eq { 5 index 5 index rmoveto } if		false charpath currentpoint		9 index 9 index 9 index		Adobe_pattern_AI5 /patternfill get exec		grestore		newpath moveto		2 copy rmoveto	} cforall	8 npop} def/patternashow{0 0 0 6 3 rollpatternawidthshow} def/patternawidthshow{	6 index type /dicttype eq	{		Adobe_pattern_AI5 /patternmatrix get 7 1 roll	} if	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse} def/vpatternawidthshowstroke{	7 1 roll	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			3 index setmatrix			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec			grestore			_fontRotateAdjust sub			moveto			_hvwb eq { _hvcx _hvcy rmoveto } if			_hvax _hvay rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			_hvax sub			3 index _hvwb eq { _hvcx sub } if			currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto			gsave			2 index false charpath			4 index setmatrix			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec			grestore			newpath moveto pop pop		} ifelse	} cforall	4 npop} def/hpatternawidthshowstroke{	7 1 roll	{		dup cstring exch		gsave		3 index eq { 5 index 5 index rmoveto } if		false charpath currentpoint		7 index setmatrix		10 index 10 index 10 index		Adobe_pattern_AI5 /patternstroke get exec		grestore		newpath moveto		2 copy rmoveto	} cforall	9 npop} def/patternashowstroke{	0 0 0 7 3 roll	patternawidthshowstroke} def/patternawidthshowstroke{	7 index type /dicttype eq	{		patternmatrix /patternmatrix get 8 1 roll	} if	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse} defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp4 Bn%AI5_BeginGradient: (Black, White)(Black, White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Chrome)(Chrome) 0 6 Bd[0<464646454545444444444343434342424241414141404040403F3F3F3E3E3E3E3D3D3D3C3C3C3C3B3B3B3B3A3A3A393939393838383837373736363636353535353434343333333332323231313131303030302F2F2F2E2E2E2E2D2D2D2D2C2C2C2B2B2B2B2A2A2A2A2929292828282827272726262626252525252424242323232322222222212121202020201F1F1F1F1E1E1E1D1D1D1D1C1C1C1B1B1B1B1A1A1A1A1919191818181817171717161616151515151414141413131312121212111111101010100F0F0F0F0E0E0E0D0D0D0D0C0C0C0C0B0B0B0A0A0A0A0909090908080807070707060606050505050404040403030302020202010101010000><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><1F1E1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1D1C1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1B1A1A1A1A1A1A1A1A19191919191919191818181818181818181717171717171717161616161616161615151515151515151514141414141414141313131313131313121212121212121212111111111111111110101010101010100F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0909090909090909090808080808080808070707070707070706060606060606060605050505050505050404040404040404030303030303030303020202020202020201010101010101010000000000>1 %_Br00.2751<6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F>1 %_Br0<00000101010102020202030303040404040505050506060607070707080808090909090A0A0A0A0B0B0B0C0C0C0C0D0D0D0D0E0E0E0F0F0F0F1010101011111112121212131313141414141515151516161617171717181818181919191A1A1A1A1B1B1B1C1C1C1C1D1D1D1D1E1E1E1F1F1F1F2020202021212122222222232323232424242525252526262626272727282828282929292A2A2A2A2B2B2B2B2C2C2C2D2D2D2D2E2E2E2E2F2F2F303030303131313132323233333333343434353535353636363637373738383838393939393A3A3A3B3B3B3B3C3C3C3D3D3D3D3E3E3E3E3F3F3F40404040414141414242424343434344444444454545464646><000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><00000101020203030304040505050606070708080809090A0A0B0B0B0C0C0D0D0D0E0E0F0F1010101111121212131314141515151616171718181819191A1A1A1B1B1C1C1D1D1D1E1E1F1F1F20202121222222232324242525252626272727282829292A2A2A2B2B2C2C2D2D2D2E2E2F2F2F30303131323232333334343435353636373737383839393A3A3A3B3B3C3C3C3D3D3E3E3F3F3F4040414142424243434444444545464647474748484949494A4A4B4B4C4C4C4D4D4E4E4F4F4F5050515151525253535454545555565657575758585959595A5A5B5B5C5C5C5D5D5E5E5E5F5F6060616161626263636464646565666666676768686969696A6A6B6B>1 %_Br10 %_Br<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><4D4C4C4C4B4B4B4A4A4A4A4949494848484747474746464645454544444444434343424242414141414040403F3F3F3E3E3E3E3D3D3D3C3C3C3B3B3B3B3A3A3A3939393838383837373736363635353535343434333333323232323131313030302F2F2F2E2E2E2E2D2D2D2C2C2C2B2B2B2B2A2A2A292929282828282727272626262525252524242423232322222222212121202020201F1F1F1E1E1E1D1D1D1D1C1C1C1B1B1B1A1A1A1A1919191818181717171616161615151514141413131313121212111111101010100F0F0F0E0E0E0D0D0D0D0C0C0C0B0B0B0A0A0A0A0909090808080707070706060605050504040404030303020202010101010000>001 %_Br[1 0 50 92 %_BS%_1 0 50 92 Bs0 0.275 1 0.12 1 50 59 %_BS%_0 0.275 1 0.12 1 50 59 Bs0 0.275 1 0.42 1 50 50 %_BS%_0 0.275 1 0.42 1 50 50 Bs1 0 50 49 %_BS%_1 0 50 49 Bs1 0 50 41 %_BS%_1 0 50 41 Bs1 0.3 0 0 1 50 0 %_BS%_1 0.3 0 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Rainbow)(Rainbow) 0 6 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>1001 %_Br1<0708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>001 %_Br1<00000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010101010102020202020202020202020202020202020202020202020202020202020202020202020203030303030303030303030303030303030303030303030303030303030303030303030304040404040404040404040404040404040404040404040404040404040404040404040405050505050505050505050505050505050505050505050505050505050505050505050506060606060606060606060606060606060606060606060606060606060606060606060707070707070707070707070707070707070707070707><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0101 %_Br0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>101 %_Br[0 1 0 0 1 50 100 %_BS%_0 1 0 0 1 50 100 Bs1 1 0 0 1 50 80 %_BS%_1 1 0 0 1 50 80 Bs1 0.0279 0 0 1 50 60 %_BS%_1 0.0279 0 0 1 50 60 Bs1 0 1 0 1 50 40 %_BS%_1 0 1 0 1 50 40 Bs0 0 1 0 1 50 20 %_BS%_0 0 1 0 1 50 20 Bs0 1 1 0 1 50 0 %_BS%_0 1 1 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Orange Radial)(Yellow & Orange Radial) 1 2 Bd[0<0001010203040506060708090A0B0C0C0D0E0F10111213131415161718191A1B1C1D1D1E1F202122232425262728292A2B2B2C2D2E2F303132333435363738393A3B3C3D3E3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C><FFFFFFFFFEFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAFAF9F9F9F9F9F9F8F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F3F3F3F3F3F3F2F2F2F2F2F2F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEFEEEEEEEEEEEDEDEDEDEDEDECECECECECEBEBEBEBEBEBEAEAEAEAEAE9E9E9E9E9E9E8E8E8E8E8E8E7E7E7E7E7E6E6E6E6E6E6>01 %_Br[0 0 1 0 1 52 19 %_BS%_0 0 1 0 1 52 19 Bs0 0.55 0.9 0 1 50 100 %_BS%_0 0.55 0.9 0 1 50 100 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Brick)(Brick) 0 0 72 72 [%AI3_Tile(0 O 0 R 0.3 0.85 0.85 0 k 0.3 0.85 0.85 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0 0 m0 72 L72 72 L72 0 L0 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer0 J 0 j 0.3 w 4 M []0 d0 XR0 68.4097 m72 68.4097 lS0 61.209 m72 61.209 LS0 54.0088 m72 54.0088 LS0 46.8076 m72 46.8076 LS0 39.6084 m72 39.6084 LS0 32.4072 m72 32.4072 LS0 25.207 m72 25.207 LS0 18.0059 m72 18.0059 LS0 10.8057 m72 10.8057 LS0 3.6064 m72 3.6064 LS68.4102 68.4097 m68.4102 61.2217 lS54.0098 68.4097 m54.0098 61.2217 LS39.6094 68.4097 m39.6094 61.2217 LS25.21 68.4097 m25.21 61.2217 LS10.8105 68.4097 m10.8105 61.2217 LS68.4102 53.9717 m68.4102 46.7842 lS54.0098 53.9717 m54.0098 46.7842 LS39.6094 53.9717 m39.6094 46.7842 LS25.21 53.9717 m25.21 46.7842 LS10.8105 53.9717 m10.8105 46.7842 LS68.4102 39.5967 m68.4102 32.4092 lS54.0098 39.5967 m54.0098 32.4092 LS39.6094 39.5967 m39.6094 32.4092 LS25.21 39.5967 m25.21 32.4092 LS10.8105 39.5967 m10.8105 32.4092 LS68.4102 25.2217 m68.4102 18.0342 lS54.0098 25.2217 m54.0098 18.0342 LS39.6094 25.2217 m39.6094 18.0342 LS25.21 25.2217 m25.21 18.0342 LS10.8105 25.2217 m10.8105 18.0342 LS68.4102 10.7842 m68.4102 3.5967 lS54.0098 10.7842 m54.0098 3.5967 LS39.6094 10.7842 m39.6094 3.5967 LS25.21 10.7842 m25.21 3.5967 LS10.8105 10.7842 m10.8105 3.5967 LS61.1973 3.5967 m61.1973 0 LS46.7969 3.5967 m46.7969 0 LS32.3965 3.5967 m32.3965 0 LS17.9971 3.5967 m17.9971 0 LS3.5967 3.5967 m3.5967 0 lS61.1973 18.0342 m61.1973 10.8467 LS46.7969 18.0342 m46.7969 10.8467 LS32.3965 18.0342 m32.3965 10.8467 LS17.9971 18.0342 m17.9971 10.8467 LS3.5967 18.0342 m3.5967 10.8467 lS61.1973 32.4092 m61.1973 25.2217 LS46.7969 32.4092 m46.7969 25.2217 LS17.9971 32.4092 m17.9971 25.2217 LS3.5967 32.4092 m3.5967 25.2217 lS61.1973 46.7842 m61.1973 39.5967 LS46.7969 46.7842 m46.7969 39.5967 LS32.3965 46.7842 m32.3965 39.5967 LS17.9971 46.7842 m17.9971 39.5967 LS3.5967 46.7842 m3.5967 39.5967 lS61.1973 61.2217 m61.1973 54.0347 LS46.7969 61.2217 m46.7969 54.0347 LS32.3965 61.2217 m32.3965 54.0347 LS17.9971 61.2217 m17.9971 54.0347 LS3.5967 61.2217 m3.5967 54.0347 lS61.1973 71.959 m61.1973 68.4717 LS46.7969 71.959 m46.7969 68.4717 LS32.3965 71.959 m32.3965 68.4717 LS17.9971 71.959 m17.9971 68.4717 LS3.5967 71.959 m3.5967 68.4717 lS32.3965 32.4092 m32.3965 25.2217 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Confetti)(Confetti) 4.85 3.617 76.85 75.617 [%AI3_Tile(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR4.85 3.617 m4.85 75.617 L76.85 75.617 L76.85 3.617 L4.85 3.617 Lf%AI6_EndPatternLayer) &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer0 J 0 j 0.3 w 4 M []0 d0 XR10.6 64.867 m7.85 62.867 lS9.1 8.617 m6.85 6.867 lS78.1 68.617 m74.85 67.867 lS76.85 56.867 m74.35 55.117 lS79.6 51.617 m76.6 51.617 lS76.35 44.117 m73.6 45.867 lS78.6 35.867 m76.6 34.367 lS76.1 23.867 m73.35 26.117 lS78.1 12.867 m73.85 13.617 lS68.35 14.617 m66.1 12.867 lS76.6 30.617 m73.6 30.617 lS62.85 58.117 m60.956 60.941 lS32.85 59.617 m31.196 62.181 lS47.891 64.061 m49.744 66.742 lS72.814 2.769 m73.928 5.729 lS67.976 2.633 m67.35 5.909 lS61.85 27.617 m59.956 30.441 lS53.504 56.053 m51.85 58.617 lS52.762 1.779 m52.876 4.776 lS45.391 5.311 m47.244 7.992 lS37.062 3.375 m35.639 5.43 lS55.165 34.828 m57.518 37.491 lS20.795 3.242 m22.12 5.193 lS14.097 4.747 m15.008 8.965 lS9.736 1.91 m8.073 4.225 lS31.891 5.573 m32.005 8.571 lS12.1 70.367 m15.6 68.867 lS9.35 54.867 m9.6 58.117 lS12.85 31.867 m14.35 28.117 lS10.1 37.367 m12.35 41.117 lS34.1 71.117 m31.85 68.617 lS38.35 71.117 m41.6 68.367 lS55.1 71.117 m58.35 69.117 lS57.35 65.117 m55.35 61.867 lS64.35 66.367 m69.35 68.617 lS71.85 62.867 m69.35 61.117 lS23.6 70.867 m23.6 67.867 lS20.6 65.867 m17.35 65.367 lS24.85 61.367 m25.35 58.117 lS25.85 65.867 m29.35 66.617 lS14.1 54.117 m16.85 56.117 lS12.35 11.617 m12.6 15.617 lS12.1 19.867 m14.35 22.367 lS26.1 9.867 m23.6 13.367 lS34.6 47.117 m32.1 45.367 lS62.6 41.867 m59.85 43.367 lS31.6 35.617 m27.85 36.367 lS36.35 26.117 m34.35 24.617 lS33.85 14.117 m31.1 16.367 lS37.1 9.867 m35.1 11.117 lS34.35 20.867 m31.35 20.867 lS44.6 56.617 m42.1 54.867 lS47.35 51.367 m44.35 51.367 lS44.1 43.867 m41.35 45.617 lS43.35 33.117 m42.6 30.617 lS43.85 23.617 m41.1 25.867 lS44.35 15.617 m42.35 16.867 lS67.823 31.1 m64.823 31.1 lS27.1 32.617 m29.6 30.867 lS31.85 55.117 m34.85 55.117 lS19.6 40.867 m22.1 39.117 lS16.85 35.617 m19.85 35.617 lS20.1 28.117 m22.85 29.867 lS52.1 42.617 m54.484 44.178 lS52.437 50.146 m54.821 48.325 lS59.572 54.133 m59.35 51.117 lS50.185 10.055 m53.234 9.928 lS51.187 15.896 m53.571 14.075 lS58.322 19.883 m59.445 16.823 lS53.1 32.117 m50.6 30.367 lS52.85 24.617 m49.6 25.617 lS61.85 9.117 m59.1 10.867 lS69.35 34.617 m66.6 36.367 lS67.1 23.617 m65.1 22.117 lS24.435 46.055 m27.484 45.928 lS25.437 51.896 m27.821 50.075 lS62.6 47.117 m65.321 46.575 lS19.85 19.867 m20.35 16.617 lS21.85 21.867 m25.35 22.617 lS37.6 62.867 m41.6 62.117 lS38.323 42.1 m38.823 38.6 lS69.35 52.617 m66.85 53.867 lS14.85 62.117 m18.1 59.367 lS9.6 46.117 m7.1 44.367 lS20.6 51.617 m18.6 50.117 lS46.141 70.811 m47.994 73.492 lS69.391 40.561 m71.244 43.242 lS38.641 49.311 m39.35 52.117 lS25.141 16.811 m25.85 19.617 lS36.6 32.867 m34.6 31.367 lS6.1 68.617 m2.85 67.867 lS4.85 56.867 m2.35 55.117 lS7.6 51.617 m4.6 51.617 lS6.6 35.867 m4.6 34.367 lS6.1 12.867 m1.85 13.617 lS4.6 30.617 m1.6 30.617 lS72.814 74.769 m73.928 77.729 lS67.976 74.633 m67.35 77.909 lS52.762 73.779 m52.876 76.776 lS37.062 75.375 m35.639 77.43 lS20.795 75.242 m22.12 77.193 lS9.736 73.91 m8.073 76.225 lS10.1 23.617 m6.35 24.367 lS73.217 18.276 m71.323 21.1 lS28.823 39.6 m29.505 42.389 lS49.6 38.617 m47.6 37.117 lS60.323 73.6 m62.323 76.6 lS60.323 1.6 m62.323 4.6 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Leaves - Fall )(Leaves - Fall ) 0 0 64.0781 78.9336 [%AI3_Tile(0 O 0 R 0.05 0.2 1 0 k 0.05 0.2 1 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR64.0781 78.9336 m64.0781 0 L0 0 L0 78.9336 L64.0781 78.9336 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.83 0 1 0 k 0.83 0 1 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR29.7578 0.9902 m30.4346 1.1914 30.7246 1.3428 V29.2559 4.0547 33.707 8.3359 34.627 9.0762 C35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 Cf13.8525 29.9844 m13.3281 29.5127 13.1309 29.25 V15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C7.2256 14.5 9.2598 15.6133 10.166 15.5645 C10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C8.1875 11.041 9.207 9.5107 10.166 7.0947 C10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C15.373 24.3779 15.373 27.2959 13.8525 29.9844 Cf41.2324 26.0742 m41.5518 26.7021 41.7549 26.959 V44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C46.3408 31.123 45.4395 33.084 44.2402 34.126 C45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C49.749 24.9766 50.584 26.9941 50.25 28.4609 C45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 Cf27.7578 38.7324 m28.4346 38.9316 28.7246 39.084 V27.2559 41.7969 31.707 46.0776 32.627 46.8169 C33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C38.002 44.582 37.3359 46.0547 36.5742 47.5039 C37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C30.7373 55.5146 30.166 54.314 29.2969 53.0366 C30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C30.9775 50.46 29.2852 51.2036 28.793 52.1958 C28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 Cf13.5195 70.3916 m12.9941 69.9209 12.7988 69.6587 V15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C7.8545 51.4497 8.873 49.9189 9.832 47.5039 C10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C15.041 64.7856 15.041 67.7046 13.5195 70.3916 Cf41.2324 64.4824 m41.5518 65.1113 41.7549 65.3682 V44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C51.2881 60.583 50.4268 61.8882 48.5645 62.333 C49.749 63.3862 50.584 65.4033 50.25 66.8691 C45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 Cf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Stripes)(Stripes) 8.45 4.6001 80.45 76.6001 [%AI3_Tile(0 O 0 R 1 0.07 1 0 k 1 0.07 1 0 K) @(%AI6_BeginPatternLayer0 J 0 j 3.6 w 4 M []0 d0 XR8.2 8.2 m80.7 8.2 LS8.2 22.6001 m80.7 22.6001 LS8.2 37.0002 m80.7 37.0002 LS8.2 51.4 m80.7 51.4 LS8.2 65.8001 m80.7 65.8001 LS8.2 15.4 m80.7 15.4 LS8.2 29.8001 m80.7 29.8001 LS8.2 44.2 m80.7 44.2 LS8.2 58.6001 m80.7 58.6001 LS8.2 73.0002 m80.7 73.0002 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(New Pattern 1)0 Au1 Ap0 J 0 j 1 w 4 M []0 d0 XR-8009.3359 8166.4033 m-8009.3359 8142.4033 L-8059.3359 8142.4033 L-8059.3359 8166.4033 L-8009.3359 8166.4033 Lnu0 Ap0 O1 g-8029.3359 8164.4033 m-8041.5464 8167.4561 -8050.0298 8157.4639 -8059.3359 8150.3545 CF-8019.3359 8164.4033 m-8035.7144 8168.498 -8045.3872 8149.126 -8059.3359 8144.7183 CF-8059.3359 8144.4033 m-8039.3359 8139.4033 -8029.3359 8169.4033 -8009.3359 8164.4033 CF-8049.3359 8144.4033 m-8032.9585 8140.3086 -8023.2856 8159.6807 -8009.3359 8164.0879 CF-8039.3359 8144.4033 m-8027.1265 8141.3506 -8018.6431 8151.3423 -8009.3359 8158.4521 CF-8019.3359 8144.4033 m-8015.7144 8143.498 -8012.4214 8143.7441 -8009.3359 8144.7183 CF-8049.3359 8164.4033 m-8052.9585 8165.3086 -8056.251 8165.0625 -8059.3359 8164.0879 CF-8019.3682 8144.5278 m-8025.4873 8143.019 -8029.3682 8144.5278 V-8033.4634 8143.0518 -8039.3682 8144.5278 V-8044.3311 8142.853 -8049.3682 8144.5278 V-8055.3833 8142.9775 -8059.3682 8144.5278 V-8059.3682 8164.2129 L-8056.2822 8165.187 -8052.8833 8165.3945 -8048.9663 8164.311 C-8042.7998 8165.8945 -8039.0498 8164.311 V-8034.0498 8165.8945 -8028.9663 8164.2271 V-8024.6338 8165.811 -8018.9663 8164.311 V-8013.4663 8165.7271 -8009.3682 8164.5278 V-8009.3682 8144.8442 L-8012.1118 8143.832 -8015.2378 8143.332 -8019.3682 8144.5278 Cf0 R0 G1 J 1 j 0.5 w-8039.3359 8164.4033 m-8047.1265 8166.3506 -8053.3994 8162.9878 -8059.3359 8158.4521 CS-8029.3359 8164.4033 m-8041.5464 8167.4561 -8050.0298 8157.4639 -8059.3359 8150.3545 CS-8019.3359 8164.4033 m-8035.7144 8168.498 -8045.3872 8149.126 -8059.3359 8144.7183 CS-8059.3359 8144.4033 m-8039.3359 8139.4033 -8029.3359 8169.4033 -8009.3359 8164.4033 CS-8049.3359 8144.4033 m-8032.9585 8140.3086 -8023.2856 8159.6807 -8009.3359 8164.0879 CS-8039.3359 8144.4033 m-8027.1265 8141.3506 -8018.6431 8151.3423 -8009.3359 8158.4521 CS-8029.3359 8144.4033 m-8021.5464 8142.4561 -8015.2734 8145.8184 -8009.3359 8150.3545 CS-8019.3359 8144.4033 m-8015.7144 8143.498 -8012.4214 8143.7441 -8009.3359 8144.7183 CS-8049.3359 8164.4033 m-8052.9585 8165.3086 -8056.251 8165.0625 -8059.3359 8164.0879 CSUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(New Pattern 10)0 Au0 J 0 j 1 w 4 M []0 d0 XR-8058.5864 8165.4033 m-8008.4785 8165.4033 L-8008.4785 8109.3794 L-8058.5864 8109.3794 L-8058.5864 8165.4033 Lnu0 O0.1 1 1 0 k-8021.4878 8130.9785 m-8023.3042 8124.499 -8033.4111 8127.8687 Y-8033.3774 8127.9336 L-8043.4863 8124.5649 -8045.3008 8131.043 V-8051.2622 8148.4102 -8046.0786 8155.1489 V-8039.3394 8164.7402 -8035.1919 8164.7402 V-8031.5967 8164.6738 L-8027.4502 8164.6738 -8020.7114 8155.085 Y-8015.5273 8148.3457 -8021.4878 8130.9785 Yfu0 0 0 1 k-8025.979 8109.3794 m-8026.7031 8110.8232 -8027.5103 8111.8794 V-8026.9922 8111.4673 -8026.1016 8110.5962 -8025.979 8109.3794 Cf-8039.6504 8111.8887 m-8040.4575 8110.834 -8041.1807 8109.3896 Y-8041.0591 8110.6055 -8040.1689 8111.4766 -8039.6504 8111.8887 CfU0 0.61 0.74 0 k-8025.1841 8133.8638 m-8026.4902 8129.1992 -8033.7681 8131.625 Y-8033.7432 8131.6719 L-8041.0225 8129.2466 -8042.3281 8133.9111 V-8046.6201 8146.415 -8042.8882 8151.2666 V-8038.0352 8158.1719 -8035.0498 8158.1719 V-8032.4614 8158.126 L-8029.4751 8158.126 -8024.623 8151.2207 Y-8020.8906 8146.3672 -8025.1841 8133.8638 Yfu1 Ap0.73 0.43 1 0.22 k0 R0 0 0 1 K-8029.209 8136.6782 m-8028.3994 8136.6782 -8027.7422 8136.0215 -8027.7422 8135.2129 c-8027.7422 8134.4033 -8028.3994 8133.7466 -8029.209 8133.7466 c-8030.0186 8133.7466 -8030.6753 8134.4033 -8030.6753 8135.2129 c-8030.6753 8136.0215 -8030.0186 8136.6782 -8029.209 8136.6782 cb-8028.9502 8148.3999 m-8027.667 8148.3999 -8026.6279 8147.5234 -8026.6279 8146.4458 c-8026.6279 8145.3647 -8027.667 8144.4902 -8028.9502 8144.4902 c-8030.231 8144.4902 -8031.271 8145.3647 -8031.271 8146.4458 c-8031.271 8147.5234 -8030.231 8148.3999 -8028.9502 8148.3999 cb-8028.4209 8160.1895 m-8026.8682 8160.1895 -8025.6104 8159.5327 -8025.6104 8158.7246 c-8025.6104 8157.915 -8026.8682 8157.2578 -8028.4209 8157.2578 c-8029.9727 8157.2578 -8031.231 8157.915 -8031.231 8158.7246 c-8031.231 8159.5327 -8029.9727 8160.1895 -8028.4209 8160.1895 cb-8024.1968 8131.9297 m-8023.4551 8131.9297 -8022.8535 8131.2192 -8022.8535 8130.3398 c-8022.8535 8129.4634 -8023.4551 8128.751 -8024.1968 8128.751 c-8024.939 8128.751 -8025.541 8129.4634 -8025.541 8130.3398 c-8025.541 8131.2192 -8024.939 8131.9297 -8024.1968 8131.9297 cb-8022.5898 8153.4863 m-8023.4678 8153.1382 -8023.7358 8151.7383 -8023.1895 8150.3574 c-8022.6431 8148.9785 -8021.4878 8148.1392 -8020.6094 8148.4878 c-8019.731 8148.8359 -8019.4634 8150.2358 -8020.0098 8151.6177 c-8020.5566 8152.998 -8021.7114 8153.835 -8022.5898 8153.4863 cbu-8037.6431 8136.5625 m-8038.4526 8136.5625 -8039.1104 8135.9058 -8039.1104 8135.0967 c-8039.1104 8134.2866 -8038.4526 8133.6294 -8037.6431 8133.6294 c-8036.8345 8133.6294 -8036.1777 8134.2866 -8036.1777 8135.0967 c-8036.1777 8135.9058 -8036.8345 8136.5625 -8037.6431 8136.5625 cb-8037.9023 8148.2832 m-8039.1855 8148.2832 -8040.2246 8147.4082 -8040.2246 8146.3281 c-8040.2246 8145.248 -8039.1855 8144.373 -8037.9023 8144.373 c-8036.6206 8144.373 -8035.5815 8145.248 -8035.5815 8146.3281 c-8035.5815 8147.4082 -8036.6206 8148.2832 -8037.9023 8148.2832 cb-8038.4321 8160.0742 m-8039.9839 8160.0742 -8041.2422 8159.418 -8041.2422 8158.6074 c-8041.2422 8157.7969 -8039.9839 8157.1416 -8038.4321 8157.1416 c-8036.8794 8157.1416 -8035.6216 8157.7969 -8035.6216 8158.6074 c-8035.6216 8159.418 -8036.8794 8160.0742 -8038.4321 8160.0742 cb-8042.6543 8131.813 m-8043.3975 8131.813 -8043.9985 8131.1016 -8043.9985 8130.2246 c-8043.9985 8129.3481 -8043.3975 8128.6367 -8042.6543 8128.6367 c-8041.9126 8128.6367 -8041.3105 8129.3481 -8041.3105 8130.2246 c-8041.3105 8131.1016 -8041.9126 8131.813 -8042.6543 8131.813 cb-8044.2622 8153.3711 m-8043.3848 8153.0234 -8043.1162 8151.6226 -8043.6626 8150.2417 c-8044.209 8148.8608 -8045.3638 8148.0234 -8046.2422 8148.3711 c-8047.1206 8148.7202 -8047.3896 8150.1206 -8046.8433 8151.5 c-8046.2969 8152.8809 -8045.1416 8153.7183 -8044.2622 8153.3711 cbUU0 Ap0 0 0 1 k-8033.7183 8132.0586 m-8033.7183 8164.7178 lFu-8017.9766 8117.9336 m-8018.668 8117.2402 -8021.6055 8118.1055 Y-8022.8154 8118.2778 -8022.6426 8120.6978 Y-8021.6055 8122.771 -8022.2969 8122.5977 Y-8022.8862 8122.5977 -8024.4414 8122.5176 -8025.3687 8122.4673 C-8025.709 8121.0718 -8027.1992 8119.8794 -8029.3081 8119.1729 C-8027.3442 8115.8809 -8029.104 8115.1982 -8030.8799 8115.1934 C-8030.896 8115.1055 -8030.9185 8115.019 -8030.9463 8114.937 C-8028.6953 8114.9824 -8028.2256 8112.6626 Y-8027.9912 8112.4673 -8027.7471 8112.1895 -8027.5103 8111.8794 C-8027.728 8112.0513 -8027.8809 8112.1426 Y-8028.8447 8112.1426 -8030.4639 8113.8975 -8031.083 8114.6104 C-8031.5054 8113.8462 -8032.439 8113.3145 -8033.5298 8113.3145 c-8034.6558 8113.3145 -8035.6182 8113.8833 -8036.0176 8114.689 C-8036.585 8114.0273 -8038.2832 8112.1543 -8039.2808 8112.1543 C-8039.4326 8112.061 -8039.6504 8111.8887 V-8039.4146 8112.1978 -8039.1694 8112.4766 -8038.9346 8112.6719 C-8038.4502 8115.0591 -8036.1118 8114.9375 V-8036.1313 8114.9922 -8036.1538 8115.0474 -8036.167 8115.1055 C-8039.5103 8115.0962 -8038.5234 8117.7207 -8037.7969 8119.063 C-8040.1782 8119.7793 -8041.8511 8121.105 -8042.1104 8122.6538 C-8043.0337 8122.7031 -8044.2593 8122.7617 -8044.7666 8122.7617 C-8045.459 8122.9346 -8044.4214 8120.8618 V-8044.249 8118.4424 -8045.459 8118.2695 V-8048.396 8117.4058 -8049.0874 8118.0967 V-8049.7783 8118.96 -8050.6426 8117.75 V-8049.7783 8119.4785 -8047.8774 8118.96 V-8045.2847 8118.2695 -8045.9766 8119.9966 V-8046.4951 8123.4526 -8044.7666 8124.144 V-8042.6206 8125.2578 -8040.8687 8125.4922 V-8040.4951 8125.8174 -8040.0503 8126.1143 -8039.5439 8126.3799 C-8042.1426 8126.4502 -8044.811 8127.3242 -8045.6616 8130.3594 C-8046.1016 8131.6465 -8046.6382 8133.6465 V-8047.689 8134.229 -8048.8887 8135.4111 -8050.1274 8137.666 C-8050.981 8140.8535 -8051.7534 8136.1162 V-8052.9839 8133.0527 -8054.2368 8132.9414 V-8053.0566 8134.6904 -8053.4902 8135.8193 V-8051.8862 8140.3198 -8050.2002 8139.3022 V-8048.6846 8138.623 -8047.2744 8136.2192 V-8047.6558 8137.9009 -8048.019 8139.8198 -8048.2607 8141.7935 C-8049.0752 8141.8008 L-8050.937 8140.8833 -8050.9126 8144.3623 V-8051.709 8148.3486 -8050.9458 8151.0854 V-8050.2334 8153.5537 -8052.7134 8152.334 V-8053.8706 8152.7271 -8054.5703 8152.1914 V-8056.9746 8150.8159 -8058.5864 8152.5273 V-8056.7334 8152.2832 -8056.0342 8152.8198 V-8054.5649 8152.9648 -8054.4834 8153.582 V-8051.5425 8154.2593 -8050.7744 8153.481 V-8049.0034 8152.6177 -8049.7168 8149.7642 V-8050.4663 8141.8848 -8048.9063 8143.8086 V-8048.7046 8143.8257 -8048.4648 8143.9209 V-8048.7383 8147.8359 -8048.3882 8151.729 -8046.5825 8154.2554 C-8050.04 8146.7358 -8044.8838 8131.707 Y-8043.5474 8126.9336 -8037.7134 8127.5049 -8034.731 8128.1377 C-8034.6582 8129.5327 -8034.4238 8131.353 -8033.7183 8132.0586 C-8032.7998 8130.0991 -8032.8223 8128.4766 V-8031.6626 8128.125 -8024.8682 8126.248 -8022.0352 8129.7402 C-8023.0176 8127.2168 -8025.4126 8126.4214 -8027.7871 8126.3223 C-8027.2534 8126.0352 -8026.7905 8125.708 -8026.4121 8125.3535 C-8024.6274 8125.1895 -8022.2969 8123.981 Y-8020.5679 8123.2886 -8021.0879 8119.834 Y-8021.7783 8118.1055 -8019.1855 8118.7969 Y-8017.2866 8119.3145 -8016.4214 8117.5874 Y-8017.2866 8118.7969 -8017.9766 8117.9336 Yf-8012.4946 8152.355 m-8013.1934 8152.8926 -8014.3496 8152.4966 Y-8016.8311 8153.7168 -8016.1191 8151.25 Y-8015.355 8148.5137 -8016.1504 8144.5254 Y-8016.1274 8141.0479 -8017.9878 8141.9634 Y-8018.6206 8141.959 L-8018.9063 8140.0161 -8019.291 8138.1582 -8019.6758 8136.5728 C-8018.2993 8138.8232 -8016.8638 8139.4673 Y-8015.1777 8140.4858 -8013.5742 8135.9824 Y-8014.0078 8134.8535 -8012.8281 8133.1055 Y-8014.0801 8133.2158 -8015.311 8136.2793 Y-8016.084 8141.0186 -8016.9375 8137.8306 Y-8018.1641 8135.5938 -8019.355 8134.4126 -8020.3999 8133.8262 C-8020.7886 8132.4673 -8021.0718 8131.6426 Y-8021.2866 8130.876 -8021.6201 8130.252 -8022.0352 8129.7402 C-8021.9663 8129.916 -8021.9038 8130.1016 -8021.8496 8130.2954 C-8015.8887 8147.6626 -8021.0718 8154.3999 V-8027.811 8163.9902 -8031.9585 8163.9902 V-8035.5527 8164.0542 L-8039.7002 8164.0542 -8046.439 8154.4648 Y-8046.4902 8154.3994 -8046.5327 8154.3247 -8046.5825 8154.2554 C-8046.3242 8154.8174 -8046.0234 8155.3442 -8045.6616 8155.813 C-8038.9224 8165.4033 -8034.7754 8165.4033 V-8031.1807 8165.3374 L-8027.0342 8165.3374 -8020.2954 8155.748 Y-8018.1665 8152.981 -8017.917 8148.4209 -8018.3633 8144.0088 C-8018.2417 8143.9785 -8018.1558 8143.9722 Y-8016.5977 8142.0513 -8017.3462 8149.9282 Y-8018.061 8152.7822 -8016.2886 8153.6431 Y-8015.5215 8154.4214 -8012.5806 8153.7466 Y-8012.5 8153.1289 -8011.0298 8152.9839 Y-8010.3311 8152.4482 -8008.4785 8152.6914 Y-8010.0889 8150.981 -8012.4946 8152.355 YfUUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(New Pattern 2)0 Au0 J 0 j 1 w 4 M []0 d0 XR-8058.5864 8165.4033 m-7993.7734 8165.4033 L-7993.7734 8101.3057 L-8058.5864 8101.3057 L-8058.5864 8165.4033 Lnu0 O0 g-8024.2842 8123.833 m-8026.1958 8101.3057 L-8028.1079 8123.833 L-8027.4897 8123.71 -8026.8506 8123.6431 -8026.1958 8123.6431 c-8025.5415 8123.6431 -8024.9023 8123.71 -8024.2842 8123.833 Cf-8035.8262 8131.8008 m-8058.5864 8133.7334 L-8035.7002 8135.6768 L-8035.8721 8134.9502 -8035.9712 8134.1958 -8035.9712 8133.4194 c-8035.9712 8132.8662 -8035.9146 8132.3281 -8035.8262 8131.8008 Cf-8031.1055 8124.9761 m-8044.749 8116.208 L-8034.8018 8128.7798 L-8033.9438 8127.1943 -8032.6582 8125.8799 -8031.1055 8124.9761 Cf-8028.0674 8143.0103 m-8026.165 8165.4033 L-8024.2632 8143 L-8024.8882 8143.126 -8025.5337 8143.1943 -8026.1958 8143.1943 c-8026.8369 8143.1943 -8027.459 8143.1279 -8028.0674 8143.0103 Cf-8016.5474 8134.9102 m-7993.7734 8132.9766 L-8016.6694 8131.0322 L-8016.6694 8131.2534 L-8016.5122 8131.9521 -8016.4209 8132.6729 -8016.4209 8133.4194 c-8016.4209 8133.9263 -8016.4712 8134.4233 -8016.5474 8134.9102 Cf-8034.7002 8138.2295 m-8044.7505 8150.9326 L-8030.8638 8142.0088 L-8032.4688 8141.1338 -8033.7974 8139.8193 -8034.7002 8138.2295 Cf-8017.5825 8128.7974 m-8007.4614 8116.0088 L-8021.353 8124.9346 L-8019.7632 8125.8447 -8018.4497 8127.1826 -8017.5825 8128.7974 Cf-8021.2759 8141.8545 m-8007.459 8150.731 L-8017.5518 8137.9766 L-8018.4063 8139.5928 -8019.7017 8140.9346 -8021.2759 8141.8545 Cf-8017.4751 8138.0166 m-8016.9727 8137.0674 -8016.6294 8136.0239 -8016.4614 8134.9233 c-8016.3857 8134.4326 -8016.3345 8133.9302 -8016.3345 8133.4194 c-8016.3345 8132.667 -8016.4263 8131.9385 -8016.585 8131.2344 c-8016.7822 8130.3599 -8017.0913 8129.5273 -8017.5039 8128.7578 c-8018.3818 8127.1279 -8019.7056 8125.7778 -8021.3105 8124.8594 c-8022.2158 8124.3408 -8023.209 8123.957 -8024.2666 8123.749 c-8024.8911 8123.624 -8025.5361 8123.5562 -8026.1958 8123.5562 c-8026.856 8123.5562 -8027.5015 8123.624 -8028.1255 8123.749 c-8029.2095 8123.9639 -8030.2246 8124.3599 -8031.1489 8124.8994 c-8032.7178 8125.8135 -8034.0142 8127.1392 -8034.8774 8128.7383 c-8035.3833 8129.6729 -8035.731 8130.7002 -8035.9126 8131.7866 c-8036.0015 8132.3193 -8036.0591 8132.8623 -8036.0591 8133.4194 c-8036.0591 8134.2041 -8035.9575 8134.9639 -8035.7842 8135.6958 c-8035.5674 8136.6104 -8035.2271 8137.4766 -8034.7734 8138.2734 c-8033.8657 8139.876 -8032.5254 8141.2041 -8030.9038 8142.0854 c-8030.0352 8142.5586 -8029.0864 8142.9014 -8028.0825 8143.0967 c-8027.4712 8143.2144 -8026.8418 8143.2817 -8026.1958 8143.2817 c-8025.5278 8143.2817 -8024.877 8143.2119 -8024.2466 8143.0854 c-8023.165 8142.8706 -8022.1528 8142.4688 -8021.2319 8141.9302 c-8019.6431 8141.001 -8018.3374 8139.647 -8017.4751 8138.0166 cfUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(New Pattern 3)0 Au1 Ap0 J 0 j 1 w 4 M []0 d0 XR-8049.3359 8166.4033 m-8049.3359 8142.4033 L-8059.3359 8142.4033 L-8059.3359 8166.4033 L-8049.3359 8166.4033 Lnuu0 Ap0 O1 g-8049.9922 8157.939 m-8049.5742 8156.8394 -8049.3359 8155.6504 -8049.3359 8154.4033 c-8049.3359 8152.541 -8049.8545 8150.8042 -8050.7407 8149.3105 c-8052.4834 8146.377 -8055.6758 8144.4033 -8059.3359 8144.4033 C-8059.3359 8164.4033 L-8059.0161 8164.4033 -8058.7007 8164.3848 -8058.3882 8164.355 c-8056.4985 8164.1782 -8054.7671 8163.4678 -8053.3306 8162.3857 c-8051.8335 8161.2578 -8050.6665 8159.7217 -8049.9922 8157.939 cf0 R0 G1 J 1 j 0.5 w-8059.3359 8144.7207 m-8056.3071 8145.6777 -8053.479 8147.3359 -8050.7407 8149.3105 CS-8059.3359 8150.3545 m-8056.1855 8152.7598 -8053.1294 8155.4902 -8049.9922 8157.939 CS-8053.3306 8162.3857 m-8055.397 8161.2954 -8057.3857 8159.9375 -8059.3359 8158.4463 CS-8058.3882 8164.355 m-8058.7056 8164.271 -8059.0239 8164.189 -8059.3359 8164.0898 CS-8053.3306 8162.3857 m-8054.7671 8163.4678 -8056.4985 8164.1777 -8058.3882 8164.355 CS-8049.9922 8157.939 m-8049.5742 8156.8394 -8049.3359 8155.6504 -8049.3359 8154.4033 c-8049.3359 8152.541 -8049.8545 8150.8042 -8050.7407 8149.3105 CS-8059.3359 8164.4033 m-8059.0161 8164.4033 -8058.7007 8164.3848 -8058.3882 8164.355 CS-8053.3306 8162.3857 m-8051.8335 8161.2578 -8050.6665 8159.7217 -8049.9922 8157.939 CS-8050.7407 8149.3105 m-8052.4839 8146.377 -8055.6758 8144.4033 -8059.3359 8144.4033 CSUUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(New Pattern 34)0 Au0 J 0 j 1 w 4 M []0 d0 XR-8058.6118 8165.4297 m-8002.6406 8165.4297 L-8002.6406 8103.9375 L-8058.6118 8103.9375 L-8058.6118 8165.4297 Lnuu0 O0.0745 0.9 0.9019 0.18 k0 R0 0 0 1 K1 J 1 j 0.0518 w-8032.1855 8142.125 m-8031.9458 8152.9248 -8037.4658 8163.2432 v-8036.9873 8165.4033 -8035.5454 8165.4033 v-8035.7866 8162.0439 -8034.8257 8161.5649 v-8030.5063 8149.563 -8031.2246 8141.6431 v-8032.1855 8142.125 lb-8032.1855 8142.125 m-8033.8657 8147.4033 -8045.6255 8148.605 v-8049.9458 8149.084 -8050.1855 8150.5249 v-8043.707 8140.9233 -8042.7466 8141.1641 v-8055.9458 8135.4038 -8058.5864 8130.123 v-8053.5454 8133.0039 -8050.1855 8130.8442 v-8042.2666 8130.605 -8037.2271 8132.7646 v-8033.3872 8134.6846 -8041.3066 8118.605 v-8037.4658 8130.3638 -8033.8657 8103.9639 v-8032.9063 8109.2441 -8031.4663 8110.6846 v-8025.4663 8118.3638 -8026.4263 8120.5249 v-8026.9063 8124.3638 -8022.3462 8118.124 v-8022.5864 8127.7246 -8024.9873 8131.084 v-8027.1455 8134.6846 -8021.1455 8132.5249 v-8015.1455 8130.605 -8009.8657 8132.2842 v-8004.3462 8133.7231 -8002.6665 8130.8442 v-8014.4263 8143.3242 -8020.1855 8143.084 v-8018.5054 8146.6846 l-8016.1055 8151.4849 -8016.5864 8152.6846 v-8031.8545 8143.2866 -8032.1855 8142.125 vb-8032.1855 8142.125 m-8029.5454 8123.6431 -8032.1855 8115.9639 v-8034.585 8105.4038 -8033.8657 8103.9639 vS-8030.7466 8130.8442 m-8024.7466 8126.0439 -8023.5454 8120.7642 vS-8030.7466 8130.123 m-8039.6255 8122.4438 -8041.3066 8118.605 vS-8002.6665 8130.8442 m-8003.8657 8133.0039 -8031.9458 8141.1641 y-8036.9873 8135.6455 -8048.5063 8133.2441 v-8056.1846 8132.2842 -8058.5864 8130.123 vS-8049.2246 8149.084 m-8037.7056 8139.9648 -8031.9458 8141.1641 y-8017.7856 8147.4033 -8016.5864 8152.6846 vSUUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(New Pattern 36)0 Au0 J 0 j 1 w 4 M []0 d0 XR-8058.436 8165.3994 m-8008.5464 8165.3994 L-8008.5464 8114.3286 L-8058.436 8114.3286 L-8058.436 8165.3994 Lnu0 O0.025 0.1 0.475 0 k-8036.7368 8133.3071 m-8039.063 8132.2158 -8041.2778 8131.8462 -8042.959 8132.3271 c-8043.6382 8132.521 -8044.231 8132.8506 -8044.7095 8133.3271 c-8045.187 8133.8057 -8045.5161 8134.3984 -8045.7095 8135.0762 c-8046.5952 8138.1743 -8044.5967 8143.0806 -8040.5098 8147.1694 c-8036.4209 8151.2568 -8031.5161 8153.2554 -8028.415 8152.3706 c-8027.7383 8152.1743 -8027.145 8151.8457 -8026.667 8151.3687 c-8026.1895 8150.8911 -8025.8618 8150.2993 -8025.6689 8149.6201 c-8025.104 8147.6494 -8025.709 8144.9482 -8027.272 8142.1919 c-8028.1689 8140.6138 -8029.3774 8139.0166 -8030.8657 8137.5264 c-8032.7368 8135.6577 -8034.7778 8134.2271 -8036.7368 8133.3071 cfu0.0035 0.014 0.0665 0 k-8035.8047 8132.376 m-8038.417 8131.4248 -8040.9839 8131.3721 -8042.959 8132.3271 C-8041.2778 8131.8462 -8039.063 8132.2158 -8036.7368 8133.3071 c-8036.2056 8133.5576 -8035.667 8133.8462 -8035.1294 8134.1714 C-8033.4849 8133.457 L-8034.2534 8133.021 -8035.0298 8132.6577 -8035.8047 8132.376 cf0.015 0.06 0.285 0 k-8033.4849 8133.457 m-8035.1294 8134.1714 L-8033.6826 8135.0386 -8032.229 8136.1641 -8030.8657 8137.5264 c-8030.7402 8137.6538 -8030.6191 8137.7817 -8030.4966 8137.9087 C-8029.8018 8136.2666 L-8030.957 8135.127 -8032.2056 8134.1846 -8033.4849 8133.457 CfUu0.039 0.156 0.741 0 k-8024.2734 8120.8081 m-8024.561 8121.0942 -8035.8047 8132.376 Y-8035.0298 8132.6577 -8034.2534 8133.021 -8033.4849 8133.457 C-8020.001 8119.9736 L-8021.647 8119.5034 -8023.2271 8119.7583 -8024.2734 8120.8081 cf0.025 0.1 0.475 0 k-8020.001 8119.9736 m-8033.4849 8133.457 L-8032.1704 8134.2065 -8030.8833 8135.1782 -8029.7007 8136.3599 c-8029.6704 8136.3896 -8029.645 8136.4194 -8029.6143 8136.4482 C-8015.9272 8122.7607 L-8016.1128 8122.5361 -8016.3066 8122.3174 -8016.5166 8122.105 c-8017.5967 8121.0264 -8018.8169 8120.311 -8020.001 8119.9736 CfUu0.0115 0.046 0.2185 0 k-8010.521 8129.7959 m-8008.1201 8127.3926 -8007.9214 8123.4927 -8009.7246 8120.1006 C-8010.8818 8120.5215 L-8008.6802 8123.8994 -8008.4263 8127.6982 -8010.521 8129.7959 cf0.015 0.06 0.285 0 k-8018.1201 8114.999 m-8017.1689 8114.3286 L-8019.791 8113.7554 -8022.417 8114.3174 -8024.207 8116.1094 c-8022.7583 8114.6606 -8020.4946 8114.334 -8018.1201 8114.999 Cf0.0295 0.118 0.5605 0 k-8018.1201 8114.999 m-8020.4946 8114.334 -8022.7583 8114.6606 -8024.207 8116.1094 c-8025.6055 8117.5088 -8025.957 8119.667 -8025.3818 8121.9502 C-8023.4536 8118.9482 -8019.9946 8119.957 V-8018.1714 8115.0342 L-8018.1201 8114.999 Lf*u1 D0.048 0.192 0.912 0 k-8010.521 8129.7959 m-8011.8682 8131.1416 -8013.9185 8131.5166 -8016.1094 8131.0303 C-8026.2578 8141.1768 L-8026.356 8140.9722 -8026.356 8140.9722 -8026.2578 8141.1768 c-8024.811 8144.2178 -8024.5566 8147.3193 -8025.6689 8149.6201 C-8025.104 8147.6494 -8025.709 8144.9482 -8027.272 8142.1919 c-8028.0918 8140.7471 -8029.1782 8139.2881 -8030.4966 8137.9087 C-8029.8018 8136.2666 L-8029.7681 8136.2974 -8029.7329 8136.3271 -8029.7007 8136.3599 c-8029.6704 8136.3921 -8029.6431 8136.4209 -8029.6138 8136.4502 c-8029.6143 8136.4502 -8029.6143 8136.4502 -8029.6143 8136.4482 C-8015.9272 8122.7607 L-8010.9126 8120.5322 L-8010.8818 8120.5215 L-8008.6802 8123.8994 -8008.4263 8127.6982 -8010.521 8129.7959 cf*U0 D0.0215 0.086 0.4085 0 k-8017.1689 8114.3286 m-8018.1201 8114.999 L-8016.271 8115.5142 -8014.3521 8116.6318 -8012.7002 8118.2866 c-8011.9927 8118.9922 -8011.3862 8119.7446 -8010.8818 8120.5215 C-8009.7246 8120.1006 L-8010.2417 8119.1279 -8010.9238 8118.1958 -8011.7666 8117.3545 c-8013.356 8115.7622 -8015.2622 8114.7466 -8017.1689 8114.3286 Cf0.0205 0.082 0.3895 0 k-8010.8818 8120.5215 m-8011.3862 8119.7446 -8011.9927 8118.9922 -8012.7002 8118.2866 c-8014.3521 8116.6318 -8016.271 8115.5142 -8018.1201 8114.999 C-8018.1714 8115.0342 L-8019.9946 8119.957 L-8018.7974 8120.3247 -8017.5742 8121.0474 -8016.5166 8122.105 c-8016.3066 8122.3174 -8016.1128 8122.5361 -8015.9272 8122.7607 C-8010.9126 8120.5322 L-8010.8818 8120.5215 LfUu0.445 0.356 0.267 0 k-8058.436 8165.3994 m-8036.543 8142.3721 L-8036.7871 8142.0527 -8037.1616 8142.0166 -8037.4751 8142.0625 C-8041.7666 8146.6929 -8052.9009 8158.8594 -8057.313 8163.6826 C-8058.1514 8164.7554 -8058.5864 8165.397 -8058.436 8165.3994 Cf0.15 0.12 0.09 0 k-8058.4209 8165.3994 m-8057.2471 8165.1064 -8036.2798 8143.4063 Y-8036.2798 8142.9058 -8036.3857 8142.5791 -8036.543 8142.3721 C-8058.436 8165.3994 L-8058.4302 8165.3994 -8058.4282 8165.4033 -8058.4209 8165.3994 cf0.2 0.16 0.12 0 k-8057.313 8163.6826 m-8052.9009 8158.8594 -8041.7666 8146.6929 -8037.4751 8142.0625 C-8037.7866 8142.1074 -8038.0391 8142.2334 Y-8039.1895 8142.5361 -8053.1606 8158.3647 -8057.313 8163.6826 CfUUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(New Pattern 37)0 Au0 J 0 j 1 w 4 M []0 d0 XR-8057.5366 8164.6362 m-8007.6255 8164.6362 L-8007.6255 8100.5186 L-8057.5366 8100.5186 L-8057.5366 8164.6362 Lnu0 O0 0 0 1 k0 R0 0 0 1 K0 w-8007.8223 8100.5186 m-8008.1929 8100.6514 -8008.5718 8100.6865 -8008.9697 8100.6064 c-8009.0728 8100.5713 l-8009.1118 8100.563 -8009.1567 8100.582 -8009.189 8100.6025 c-8009.5298 8100.7959 l-8013.2993 8102.6992 -8016.6826 8105.2998 -8019.0864 8108.8506 c-8020.5498 8110.9951 -8021.7095 8113.2822 -8023.3857 8115.2598 c-8023.7593 8115.6118 -8023.7622 8116.1758 -8023.4209 8116.5342 c-8023.0815 8116.9038 -8022.5039 8116.9111 -8022.147 8116.5679 c-8021.9902 8116.6138 l-8021.8506 8116.5322 -8021.6606 8116.4736 -8021.6094 8116.3599 c-8020.439 8113.6064 -8019.7759 8110.917 -8018.02 8108.542 c-8015.7583 8105.498 -8012.7642 8103.3975 -8009.6162 8101.4272 c-8008.9536 8101.0088 L-8009.083 8101.0386 L-8008.356 8101.0454 l-8008.3774 8101.0142 -8008.3872 8100.999 -8008.4087 8100.9678 C-8008.1929 8100.9263 -8007.9634 8100.8774 -8007.749 8100.8369 c-8007.6626 8100.8271 -8007.605 8100.7422 -8007.6255 8100.6416 c-8007.6367 8100.5562 -8007.7246 8100.5122 -8007.8223 8100.5186 c-8007.8223 8100.5186 lb-8023.8086 8114.3984 m-8024.1606 8114.21 -8024.5518 8114.0752 -8024.8345 8113.792 c-8031.0386 8107.5752 -8041.2666 8106.6768 -8048.6353 8113.0889 C-8048.7446 8113.1846 -8048.7446 8113.3599 -8048.6494 8113.4678 C-8045.6392 8112.3462 -8037.4702 8113.7783 -8033.9087 8116.8154 C-8033.8398 8116.8706 -8033.7329 8116.856 -8033.6919 8116.7744 C-8033.6367 8116.708 -8033.6528 8116.5986 -8033.7192 8116.5601 C-8037.1489 8113.4897 -8041.6538 8111.6934 -8046.2593 8112.1514 C-8043.4399 8110.5889 -8040.2178 8109.8975 -8036.9849 8110.0918 c-8032.3008 8110.375 -8028.0498 8112.5225 -8023.9575 8114.6826 c-8023.8774 8114.7222 -8023.7842 8114.6958 -8023.7417 8114.6143 C-8023.688 8114.5342 -8023.729 8114.4385 -8023.8086 8114.3984 cb-8033.2334 8115.7393 m-8034.813 8119.7646 -8036.9775 8123.7231 -8040.3882 8126.479 c-8040.5513 8126.6152 -8040.5806 8126.853 -8040.4575 8127.0088 c-8040.3208 8127.1714 -8040.0913 8127.1826 -8039.9346 8127.0591 c-8035.7095 8125 -8032.7769 8120.5342 -8032.749 8115.8047 c-8032.749 8115.8047 l-8032.7192 8115.6714 -8032.8218 8115.5386 -8032.9497 8115.5254 c-8033.0903 8115.5088 -8033.2183 8115.6006 -8033.2334 8115.7393 c-8033.2334 8115.7393 lb-8027.5278 8120.4209 m-8027.6289 8120.585 -8027.7017 8120.7871 -8027.8481 8120.8857 c-8030.667 8122.7935 -8033.5649 8124.0342 -8036.4712 8125.5361 c-8036.6367 8125.6118 -8036.6982 8125.8218 -8036.6177 8125.9736 c-8036.5376 8126.126 -8036.3423 8126.1826 -8036.1758 8126.1074 c-8033.0254 8124.7266 -8028.8994 8123.9033 -8027.2593 8120.583 c-8027.2153 8120.5142 -8027.2319 8120.418 -8027.313 8120.3682 c-8027.3823 8120.3232 -8027.4834 8120.353 -8027.5278 8120.4209 c-8027.5278 8120.4209 lb-8027.2466 8121.3218 m-8027.0303 8121.833 -8026.7295 8122.293 -8026.6367 8122.8394 c-8025.8047 8127.6807 -8025.7017 8132.4458 -8026.8345 8137.0913 c-8026.8345 8137.0913 l-8026.9282 8137.3569 -8026.7974 8137.647 -8026.5303 8137.7422 c-8026.2642 8137.8369 -8025.9746 8137.7158 -8025.8799 8137.4512 c-8023.8794 8132.2144 -8024.4834 8126.1406 -8026.9575 8121.1865 c-8026.9927 8121.103 -8027.085 8121.0718 -8027.1689 8121.0942 c-8027.2505 8121.1313 -8027.2842 8121.2383 -8027.2466 8121.3218 c-8027.2466 8121.3218 lb-8026.1216 8136.9966 m-8023.4849 8134.6313 -8021.2681 8131.6553 -8020.439 8128.1392 c-8020.439 8128.1392 l-8020.311 8127.585 -8020.6606 8127.0264 -8021.228 8126.8936 c-8021.7856 8126.7783 -8022.3442 8127.1279 -8022.4727 8127.6826 c-8023.1514 8130.9346 -8024.4575 8134.0762 -8026.3818 8136.79 c-8026.3818 8136.79 l-8026.4326 8136.8584 -8026.4209 8136.9609 -8026.356 8137.0234 c-8026.2856 8137.0737 -8026.1841 8137.0615 -8026.1216 8136.9966 c-8026.1216 8136.9966 lb-8010.9575 8129.5854 m-8012.2974 8125.2334 -8014.8462 8121.4727 -8018.2754 8118.5566 C-8018.3154 8118.4751 -8018.4102 8118.4351 -8018.4902 8118.4897 C-8018.5728 8118.5303 -8018.5986 8118.624 -8018.5586 8118.7046 C-8018.543 8119.1919 -8018.3008 8119.6367 -8018.0322 8119.9346 c-8012.9927 8125.5654 -8009.5767 8134.123 -8011.9297 8141.3584 C-8011.6626 8135.8545 -8013.3105 8129.7041 -8016.7222 8125.0767 c-8017.7471 8123.6729 -8019.3286 8123.5249 -8020.8945 8123.6064 C-8020.9888 8123.5928 -8021.0698 8123.6465 -8021.0825 8123.7402 c-8021.0962 8123.8223 -8021.0415 8123.917 -8020.9487 8123.9287 C-8017.7344 8125.1729 -8016.0742 8128.6279 -8014.6704 8131.5977 c-8013.0015 8135.147 -8012.2881 8139.042 -8012.5918 8142.9033 C-8012.6318 8143.0806 -8012.7002 8144.8008 -8012.564 8144.8135 C-8012.417 8144.8433 -8012.2954 8144.7471 -8012.2666 8144.5977 C-8012.231 8144.4482 -8009.229 8135.2026 -8010.9575 8129.5854 cb-8019.0728 8116.8945 m-8017.981 8113.0239 -8015.6958 8109.6543 -8013.0688 8106.6416 c-8012.917 8106.5078 -8012.9009 8106.29 -8013.0366 8106.1382 c-8013.1616 8106.0039 -8013.3911 8105.9858 -8013.543 8106.1206 c-8016.917 8108.7354 -8018.0352 8112.9438 -8019.3818 8116.7783 c-8019.3818 8116.7783 l-8019.4126 8116.8682 -8019.3618 8116.9614 -8019.2847 8116.9902 c-8019.1958 8117.0225 -8019.103 8116.9722 -8019.0728 8116.8945 c-8019.0728 8116.8945 lb-8013.1177 8141.5127 m-8013.1855 8141.46 -8013.2935 8141.4863 -8013.3345 8141.5537 C-8013.5498 8141.8774 -8015.2778 8143.9233 -8015.979 8144.5439 c-8020.7583 8148.7974 -8024.1001 8153.3638 -8032.1255 8157.126 c-8039.0376 8160.3672 -8041.6978 8162.999 -8048.9727 8161.2295 c-8052.2734 8160.4326 -8053.6177 8159.9346 -8055.0215 8154.8584 C-8056.5337 8148.7026 -8055.4536 8151.1865 -8055.6704 8143.8418 c-8055.8086 8139.1006 -8058.5864 8127.8584 -8046.1118 8113.6631 C-8046.0063 8113.5518 -8046.02 8113.3994 -8046.1201 8113.3105 C-8046.2192 8113.2065 -8046.3823 8113.2202 -8046.4727 8113.3193 C-8052.165 8118.1201 -8055.6094 8125.0615 -8056.9009 8132.3457 c-8057.8735 8137.8706 -8057.5063 8142.6538 -8057.2529 8149.04 c-8057.1553 8151.4966 -8058.272 8158.4751 -8053.4966 8162.4658 c-8049.979 8165.4033 -8044.9775 8164.9502 -8040.9409 8163.5601 c-8035.2856 8161.6152 -8030.5591 8158.5498 -8025.4575 8155.0127 c-8021.8521 8152.5278 -8013.8745 8142.689 -8013.0649 8141.7295 C-8013.0215 8141.6626 -8013.0366 8141.5537 -8013.1177 8141.5127 Cb-8047.6367 8128.709 m-8046.7544 8127.9063 -8046.2881 8129.249 -8046.0161 8130.0049 c-8045.749 8130.7607 -8044.7754 8130.6538 -8045.0991 8130.9766 c-8045.4233 8131.3008 -8045.4233 8131.355 -8045.9097 8130.9233 c-8046.395 8130.4912 -8046.395 8131.1392 -8047.1514 8130.6538 c-8047.9063 8130.166 -8048.231 8129.249 -8047.6367 8128.709 cb-8040.2383 8133.353 m-8039.9521 8132.9951 -8039.2666 8132.9761 -8039.0513 8133.2974 c-8038.8369 8133.623 -8037.917 8133.6768 -8038.0801 8134 c-8038.2407 8134.3247 -8038.188 8134.542 -8038.6738 8134.3247 c-8039.1602 8134.1089 -8038.9985 8134.7031 -8039.4834 8134.4873 c-8039.9697 8134.2705 -8040.4551 8133.623 -8040.2383 8133.353 cb-8032.1934 8138.4824 m-8031.707 8138.1592 -8030.4658 8138.915 -8031.0591 8138.915 c-8031.6538 8138.915 -8030.8975 8139.6714 -8031.4385 8139.8862 c-8031.9766 8140.1025 -8031.8696 8139.833 -8032.1934 8140.0479 c-8032.5161 8140.2646 -8032.9497 8140.6426 -8033.1104 8139.833 c-8033.272 8139.0225 -8032.9497 8139.0225 -8032.5713 8138.7529 c-8032.1934 8138.4824 -8032.1934 8138.4824 yb-8046.8262 8138.7529 m-8045.6934 8138.6455 -8046.4497 8139.4014 -8045.855 8139.8862 c-8045.2598 8140.373 -8044.5039 8141.021 -8045.3154 8140.8042 c-8046.1255 8140.5889 -8047.5825 8141.0752 -8047.5298 8139.9414 c-8047.4751 8138.8066 -8047.2192 8138.79 -8046.8262 8138.7529 cb-8041.1567 8147.0142 m-8040.688 8146.7471 -8041.2666 8147.123 -8040.6167 8147.0142 c-8039.9697 8146.9072 -8039.375 8147.0142 -8039.8071 8147.231 c-8040.2383 8147.4473 -8040.8872 8147.5562 -8041.0498 8147.3926 c-8041.2114 8147.231 -8041.5337 8147.231 -8041.1567 8147.0142 cb-8031.6538 8146.583 m-8032.0649 8145.583 -8030.6826 8145.8271 -8030.0337 8146.1494 c-8029.3862 8146.4751 -8028.4126 8145.8809 -8029.0073 8146.3135 c-8029.6001 8146.7446 -8029.3862 8146.3135 -8029.979 8146.6367 c-8030.5737 8146.96 -8031.2759 8147.501 -8031.6538 8146.583 cb-8047.2598 8152.4697 m-8047.3086 8151.4785 -8046.395 8152.3599 -8045.855 8152.415 c-8045.3154 8152.4697 -8044.6665 8152.4697 -8044.8296 8152.6846 c-8044.9902 8152.9014 -8045.0454 8152.9014 -8045.749 8153.1162 c-8046.4497 8153.333 -8047.2056 8153.5479 -8047.2598 8152.4697 cb-8047.7446 8147.0142 m-8048.6528 8147.3774 -8048.8794 8147.2842 -8049.1489 8147.6079 c-8049.4209 8147.9326 -8049.7422 8148.6353 -8050.1216 8147.501 c-8050.4985 8146.3662 -8050.0142 8145.1802 -8049.6343 8145.3408 c-8049.2578 8145.5034 -8048.8794 8146.1494 -8048.4482 8146.3662 c-8048.0161 8146.583 -8047.2056 8146.7974 -8047.7446 8147.0142 cbUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(New Pattern 41)0 Au0 J 0 j 1 w 4 M []0 d0 XR-8058.5864 8165.4033 m-7977.5864 8165.4033 L-7977.5864 8060.4033 L-8058.5864 8060.4033 L-8058.5864 8165.4033 Lnuuu0 O0 0 0 1 k-8040.3921 8077.8286 m-8040.6606 8076.0654 -8041.7466 8074.6943 -8043.1104 8074.7998 c-8044.4727 8074.9058 -8045.2935 8076.4272 -8045.3296 8078.21 c-8045.3345 8078.4727 -8045.2607 8079.647 -8045.2168 8079.8809 C-8045.2246 8079.9858 -8045.2056 8080.0767 -8045.1968 8080.1841 c-8045.1006 8081.4287 -8043.9438 8082.7642 -8042.5278 8082.6538 c-8041.1113 8082.5439 -8040.0762 8081.2646 -8040.2231 8079.876 c-8040.2305 8079.8105 -8040.2822 8079.0298 -8040.2935 8078.9658 C-8040.2681 8078.689 -8040.3462 8078.1289 -8040.3921 8077.8286 cf-8050.8511 8087.1367 m-8051.5806 8095.3193 -8046.0879 8094.5225 v-8042.9546 8093.4214 -8044.0278 8090.5249 v-8044.229 8089.1553 -8046.3711 8087.9014 v-8046.7329 8087.6538 -8047.3496 8086.5049 v-8047.7158 8085.001 -8049.105 8084.7007 v-8050.6626 8084.6543 -8050.8511 8087.1367 vf-8025.3511 8095.9009 mF-8024.6626 8093.7441 m-8025.3711 8092.5967 -8028.4712 8093.0313 Y-8029.3975 8093.0918 -8029.9663 8092.5142 Y-8032.4258 8088.4951 -8035.625 8089.2886 -8035.9946 8089.397 C-8035.9961 8089.3896 L-8039.5854 8090.0078 -8039.853 8095.0063 V-8040.0776 8095.7866 -8040.9214 8096.1729 V-8043.856 8097.2646 -8043.9346 8098.6113 V-8044.4863 8100.5186 -8042.187 8101.1455 V-8040.2656 8101.6602 -8038.375 8099.2974 V-8037.1978 8098.083 -8034.1626 8097.3423 V-8034.1592 8097.3569 L-8030.9458 8096.4497 -8029.2256 8096.9922 Y-8026.4385 8098.1714 -8024.9927 8096.8047 Y-8023.269 8095.1592 -8024.6626 8093.7441 Yf-8038.5698 8077.2822 m-8039.1719 8075.603 -8038.8687 8073.8809 -8037.6191 8073.3262 c-8036.3706 8072.7705 -8034.9248 8073.7202 -8034.0449 8075.2705 c-8033.915 8075.499 -8033.4224 8076.5679 -8033.3496 8076.7935 C-8033.293 8076.8818 -8033.2656 8076.9722 -8033.2222 8077.0703 c-8032.7153 8078.2119 -8033.0986 8079.9336 -8034.397 8080.5103 c-8035.6953 8081.0889 -8037.2144 8080.4561 -8037.7446 8079.165 c-8037.7695 8079.103 -8038.0942 8078.3921 -8038.1162 8078.3306 C-8038.2695 8078.0991 -8038.4673 8077.5698 -8038.5698 8077.2822 cf-8024.2993 8080.335 m-8019.7666 8087.1855 -8024.9775 8089.0977 v-8028.2578 8089.6201 -8028.6895 8086.561 v-8029.165 8085.2598 -8027.877 8083.1382 v-8027.6768 8082.748 -8027.6802 8081.4434 v-8028.0718 8079.9482 -8026.9946 8079.0215 v-8025.6455 8078.2393 -8024.2993 8080.335 vfUu-7999.3223 8129.5103 m-7998.9551 8127.7656 -7999.4912 8126.0991 -8000.8047 8125.7202 c-8002.1182 8125.3408 -8003.4209 8126.4785 -8004.0801 8128.1362 c-8004.1768 8128.3809 -8004.519 8129.5054 -8004.561 8129.7402 C-8004.604 8129.8359 -8004.6182 8129.9282 -8004.6489 8130.0313 c-8004.9951 8131.2305 -8004.3799 8132.8838 -8003.0142 8133.2783 c-8001.6494 8133.6729 -8000.231 8132.8398 -7999.8833 8131.4878 c-7999.8657 8131.4238 -7999.6416 8130.6738 -7999.6289 8130.6104 C-7999.5078 8130.3584 -7999.3848 8129.8086 -7999.3223 8129.5103 cf-8012.8569 8134.021 m-8016.4102 8141.4282 -8010.9863 8142.6094 v-8007.6665 8142.6782 -8007.6553 8139.5879 v-8007.3638 8138.2344 -8008.9297 8136.3105 v-8009.1807 8135.9487 -8009.356 8134.6577 v-8009.1719 8133.1226 -8010.3657 8132.353 v-8011.8086 8131.7622 -8012.8569 8134.021 vf-7992.0513 8151.1729 mF-7990.6494 8149.3945 m-7990.9111 8148.0718 -7993.9663 8147.3921 Y-7994.856 8147.123 -7995.1846 8146.3823 Y-7996.0786 8141.7568 -7999.353 8141.3774 -7999.7358 8141.3486 C-7999.7358 8141.3423 L-8003.3135 8140.6626 -8005.3174 8145.25 V-8005.8018 8145.8994 -8006.728 8145.9658 V-8009.8584 8145.959 -8010.4033 8147.1919 V-8011.5903 8148.7842 -8009.6577 8150.1802 V-8008.0391 8151.335 -8005.439 8149.7856 V-8003.9102 8149.0615 -8000.8086 8149.4326 V-8000.8096 8149.4458 L-7997.4824 8149.7246 -7996.063 8150.8359 Y-7993.8657 8152.918 -7992.0327 8152.1465 Y-7989.8418 8151.209 -7990.6494 8149.3945 Yf-7997.4238 8129.6382 m-7997.3994 8127.8545 -7996.5122 8126.3486 -7995.1465 8126.2666 c-7993.7808 8126.1841 -7992.7607 8127.5801 -7992.4814 8129.3418 c-7992.4399 8129.6006 -7992.353 8130.7744 -7992.3638 8131.0127 C-7992.3423 8131.1143 -7992.3481 8131.207 -7992.3423 8131.3154 c-7992.2671 8132.5625 -7993.2305 8134.04 -7994.6489 8134.125 c-7996.0679 8134.21 -7997.269 8133.0854 -7997.311 8131.6904 c-7997.3135 8131.625 -7997.3687 8130.8442 -7997.3662 8130.7783 C-7997.4297 8130.5078 -7997.4287 8129.9434 -7997.4238 8129.6382 cf-7985.605 8136.9658 m-7983.7642 8144.9722 -7989.3135 8144.9336 v-7992.5698 8144.2729 -7991.9014 8141.2554 v-7991.8896 8139.8706 -7989.939 8138.3359 v-7989.6143 8138.041 -7989.1606 8136.8184 v-7989.0034 8135.2793 -7987.6694 8134.791 v-7986.1318 8134.5313 -7985.605 8136.9658 vfUU1 Ap-8058.5864 8165.4033 m-8058.5864 8060.4033 L-7977.5864 8060.4033 L-7977.5864 8165.4033 L-8058.5864 8165.4033 LnUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(New Pattern 42)0 Au0 Ap0 J 0 j 1 w 4 M []0 d0 XR-8032.0474 8138.4878 m-8059.5864 8138.4878 L-8059.5864 8166.0273 L-8032.0474 8166.0273 L-8032.0474 8138.4878 Ln0 O0 0.55 1 0.12 k-8046.3462 8156.7656 m-8046.3462 8166.4033 L-8045.2207 8166.4033 L-8045.2207 8156.7656 L-8046.3462 8156.7656 Lf0 0.55 1 0.3 k-8050.0098 8152.2793 m-8048.896 8150.5586 -8045.4673 8148.8608 -8041.083 8148.8608 c-8036.7017 8148.8608 -8033.2002 8150.5098 -8032.1582 8152.2778 C-8032.1582 8152.2778 L-8033.2002 8154.0039 -8036.7017 8155.7007 -8041.083 8155.7007 c-8045.4614 8155.7007 -8048.9102 8153.9648 -8050.0098 8152.2793 CfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(New Pattern 45)0 Au0 J 0 j 1 w 4 M []0 d0 XR-8059.5864 8123.3218 m-8059.5864 8166.4033 L-7972.8081 8166.4033 L-7972.8081 8123.3218 L-8059.5864 8123.3218 Lnuu0 O0 0 0 1 k-7999.8081 8152.6401 m-7999.8081 8160.4775 L-7987.8081 8153.5479 L-7975.8081 8146.6201 L-7987.8081 8139.6929 L-7999.8081 8132.7646 L-7999.8081 8140.8857 L-8058.5215 8127.1201 L-8045.5742 8146.2065 L-8059.5864 8166.4033 L-7999.8081 8152.6401 Lf0 1 1 0.1 k0 R0 0 0 1 K-7997.8081 8149.6401 m-7997.8081 8157.4775 L-7985.8081 8150.5479 L-7973.8081 8143.6201 L-7985.8081 8136.6929 L-7997.8081 8129.7646 L-7997.8081 8137.8857 L-8056.5215 8124.1201 L-8041.8618 8143.7622 L-8056.5215 8163.4033 L-7997.8081 8149.6401 LbUUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(New Pattern 5)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7900.9858 8166.4033 m-7900.9858 8152.8232 L-8059.5864 8152.8232 L-8059.5864 8166.4033 L-7900.9858 8166.4033 Lnuu0 O0.285 0.228 0.171 0 k-7915.665 8164.8882 m-7915.6294 8166.0928 L-7902.0967 8166.9209 -7901.4282 8165.6855 v-7901.3306 8165.5049 -7901.2334 8165.1182 -7901.147 8164.5967 C-7903.1704 8165.2271 -7912.8774 8164.9746 -7915.665 8164.8882 Cf0.44 0.352 0.264 0 k-7915.9927 8153.4272 m-7915.9575 8154.6714 L-7913.0776 8154.4521 -7902.7778 8153.7202 -7901.1294 8154.269 C-7901.2896 8153.6226 -7901.5063 8153.168 -7901.791 8153.0186 c-7903.417 8152.1689 -7915.9927 8153.4272 Yf0.145 0.116 0.087 0 k-7915.9575 8154.6714 m-7915.665 8164.8882 L-7912.8774 8164.9746 -7903.1704 8165.2271 -7901.147 8164.5967 C-7900.7383 8162.1807 -7900.5122 8156.7642 -7901.1294 8154.269 C-7902.7778 8153.7202 -7913.0776 8154.4521 -7915.9575 8154.6714 CfUu0.155 0.124 0.093 0 k-7941.5239 8158.6768 m-7940.4834 8159.0591 L-7921.6592 8154.5498 L-7922.0674 8153.7178 L-7940.9497 8156.1279 L-7941.8384 8156.4097 L-7942.2368 8156.2969 -7942.7798 8156.2271 V-7942.1958 8156.6406 -7941.729 8157.5439 -7941.5239 8158.6768 Cfu0.085 0.068 0.051 0 k-7946.3857 8163.0698 m-7947.1841 8163.125 -7944.335 8163.0674 Y-7944.9346 8162.4209 -7945.3574 8161.2241 -7945.397 8159.8408 c-7945.4033 8159.6279 -7945.397 8159.4209 -7945.3857 8159.2168 C-7945.6274 8159.1104 -7945.6782 8159.1768 -7946.2153 8158.9678 C-7945.5864 8163.0142 -7946.3857 8163.0698 vf0.305 0.244 0.183 0 k-7944.9302 8156.2705 m-7945.1392 8156.2134 -7945.0801 8158.334 Y-7944.0649 8159.1626 L-7942.4224 8158.3462 L-7941.5239 8158.6768 L-7941.729 8157.5439 -7942.1958 8156.6406 -7942.7798 8156.2271 C-7943.1958 8156.1743 -7944.4609 8156.2031 -7944.9302 8156.2705 CfU0.115 0.092 0.069 0 k-7941.5239 8158.6768 m-7942.4224 8158.3462 L-7944.0649 8159.1626 L-7945.0801 8158.334 L-7945.3794 8159.1113 -7945.3857 8159.2168 V-7944.1001 8159.7822 -7942.7695 8160.144 -7941.4263 8160.3286 C-7941.377 8160.1313 -7941.3706 8159.9463 -7941.377 8159.7402 c-7941.3862 8159.375 -7941.4082 8159.0215 -7941.5239 8158.6768 Cf0.41 0.328 0.246 0 k-7922.0376 8154.7998 m-7923.9634 8156.0454 -7932.9727 8161.502 -7941.4263 8160.3286 C-7941.4902 8161.4961 -7941.8345 8162.4946 -7942.3359 8163.0664 C-7941.7759 8163.0654 L-7921.3262 8166.1592 L-7921.623 8155.8286 L-7921.6592 8154.5498 L-7921.791 8154.6406 -7922.0376 8154.7998 vf0.395 0.316 0.237 0 k-7945.397 8159.8408 m-7945.3574 8161.2241 -7944.9346 8162.4209 -7944.335 8163.0674 C-7942.2671 8163.0664 L-7941.7646 8162.4946 -7941.4082 8161.4746 -7941.4263 8160.3286 C-7942.7695 8160.144 -7944.1001 8159.7822 -7945.3857 8159.2168 C-7945.397 8159.4209 -7945.4033 8159.6279 -7945.397 8159.8408 cfUu0 0 0 0.11 k-7915.8506 8153.605 m-7914.8271 8153.4385 L-7915.8506 8153.605 L-7915.8506 8153.605 Lf0 0 0 0.34 k-7922.0674 8153.7178 m-7921.6592 8154.5498 L-7920.2578 8154.3218 L-7919.1094 8154.1343 L-7917.2622 8153.834 L-7915.8506 8153.605 L-7914.8271 8153.4385 L-7914.8818 8153.1201 -7914.9536 8152.9014 -7915.0513 8152.8232 C-7922.0674 8153.7178 Lf0 0 0 0.32 k-7920.3906 8158.6104 m-7920.6274 8166.2646 L-7915.3008 8166.4033 L-7914.313 8162.918 -7914.7681 8158.5576 V-7920.3906 8158.6104 LfU0.025 0.02 0.015 0 k-7913.9087 8155.7881 m-7910.959 8156.3232 -7907.8262 8156.563 -7904.9023 8155.7646 c-7904.8721 8155.7529 -7904.8618 8155.7217 -7904.8735 8155.7002 c-7904.8745 8155.6689 -7904.9063 8155.6592 -7904.9282 8155.6592 c-7907.8286 8156.4678 -7910.9614 8156.2271 -7913.8906 8155.6816 c-7913.9126 8155.6826 -7913.9438 8155.6943 -7913.9536 8155.7256 c-7913.9526 8155.7471 -7913.9414 8155.7783 -7913.9087 8155.7881 c-7913.9087 8155.7881 lf-7912.4238 8154.7114 m-7912.3159 8154.7822 -7912.2178 8154.8975 -7912.1094 8154.9058 c-7908.375 8155.2354 -7904.7495 8155.1846 -7901.061 8155.0674 c-7901.0391 8155.0674 -7901.0073 8155.0454 -7901.0078 8155.0239 c-7901.0078 8154.9912 -7901.0415 8154.9722 -7901.063 8154.9722 c-7903.9087 8155.085 -7906.7266 8155.1025 -7909.5903 8154.9385 c-7910.52 8154.8799 -7911.4946 8155.144 -7912.3638 8154.624 c-7912.3857 8154.6143 -7912.417 8154.6143 -7912.437 8154.6367 c-7912.4482 8154.6592 -7912.4458 8154.6904 -7912.4238 8154.7114 c-7912.4238 8154.7114 lf-7907.959 8156.7705 m-7906.0962 8158.083 -7903.8887 8158.7778 -7901.6865 8159.29 c-7901.6543 8159.2998 -7901.6338 8159.2881 -7901.623 8159.2568 c-7901.6138 8159.2241 -7901.6353 8159.2041 -7901.6567 8159.1934 c-7903.8481 8158.6689 -7906.0454 8158.0063 -7907.897 8156.6831 c-7907.9297 8156.6631 -7907.9614 8156.6753 -7907.9712 8156.6958 c-7907.9922 8156.7178 -7907.981 8156.749 -7907.959 8156.7705 c-7907.959 8156.7705 lf-7913.5186 8163.46 m-7911.3159 8163.9736 -7909.1162 8164.4336 -7906.8662 8164.6782 c-7906.8462 8164.689 -7906.8154 8164.667 -7906.8154 8164.6455 c-7906.8047 8164.6118 -7906.8271 8164.5806 -7906.8594 8164.582 c-7909.0986 8164.2842 -7911.3169 8163.9209 -7913.499 8163.3535 c-7913.5215 8163.3545 -7913.5537 8163.3662 -7913.563 8163.3975 c-7913.5615 8163.4194 -7913.5513 8163.4512 -7913.5186 8163.46 c-7913.5186 8163.46 lf-7913.0254 8162.7642 m-7910.9321 8163.6006 -7908.688 8163.333 -7906.4888 8163.3662 c-7906.457 8163.3638 -7906.436 8163.3423 -7906.437 8163.311 c-7906.4385 8163.2783 -7906.459 8163.2593 -7906.481 8163.2593 c-7908.6792 8163.2471 -7910.9238 8163.5034 -7913.0073 8162.6558 c-7913.0298 8162.6577 -7913.061 8162.6689 -7913.0698 8162.7002 c-7913.0698 8162.7217 -7913.0586 8162.7534 -7913.0254 8162.7642 c-7913.0254 8162.7642 lf-7912.2935 8164.1089 m-7910.9697 8164.1553 -7909.7368 8163.9502 -7908.4136 8163.6118 c-7907.9458 8163.5034 -7907.5063 8163.6294 -7907.0474 8163.6162 c-7906.4834 8163.6006 l-7906.4609 8163.6001 -7906.4497 8163.5889 -7906.4399 8163.5767 c-7906.4209 8163.5562 -7906.4302 8163.5249 -7906.4526 8163.5034 c-7906.6489 8163.3486 l-7906.6606 8163.3486 -7906.6714 8163.3394 -7906.6826 8163.3394 c-7907.0864 8163.3506 l-7908.5415 8163.5942 -7910.043 8164.0752 -7911.479 8163.4775 c-7911.5122 8163.4678 -7911.543 8163.4897 -7911.5537 8163.5103 c-7911.5537 8163.543 -7911.5415 8163.563 -7911.52 8163.5742 c-7910.2334 8164.1025 -7908.7578 8163.8794 -7907.4678 8163.458 c-7906.6782 8163.4463 L-7906.7104 8163.437 L-7906.5142 8163.5903 L-7906.4849 8163.4927 L-7907.0503 8163.5098 l-7907.5186 8163.5439 -7907.9712 8163.3862 -7908.4263 8163.5073 c-7909.7407 8163.8638 -7910.9839 8164.0278 -7912.2959 8164.002 c-7912.3286 8164.0034 -7912.3506 8164.0239 -7912.3481 8164.0566 c-7912.3481 8164.0889 -7912.3262 8164.1094 -7912.2935 8164.1089 c-7912.2935 8164.1089 lf-7913.1582 8164.4639 m-7910.4575 8165.624 -7907.4888 8164.9736 -7904.7144 8164.585 c-7904.3696 8164.6929 l-7904.3481 8164.7026 -7904.3281 8164.6904 -7904.3071 8164.6689 c-7904.2959 8164.647 -7904.3081 8164.6162 -7904.3286 8164.6055 c-7904.6665 8164.4126 l-7907.3618 8163.7959 -7910.1255 8164.1846 -7912.8574 8164.189 c-7912.8887 8164.1904 -7912.9097 8164.2119 -7912.9087 8164.2432 c-7912.9063 8164.2754 -7912.8848 8164.2959 -7912.8545 8164.2959 c-7910.2598 8164.3394 -7907.6167 8163.8462 -7905.0591 8164.4775 c-7904.3818 8164.6929 L-7904.3398 8164.5942 L-7904.7271 8164.4897 l-7907.4922 8164.8457 -7910.4282 8165.5386 -7913.1177 8164.3774 c-7913.1401 8164.3682 -7913.1714 8164.3682 -7913.1826 8164.4014 c-7913.1919 8164.4233 -7913.1914 8164.4546 -7913.1582 8164.4639 c-7913.1582 8164.4639 lf-7910.2759 8157.7974 m-7908.981 8158.3042 -7907.5698 8158.0498 -7906.2666 8157.7471 c-7906.2334 8157.7446 -7906.2231 8157.7231 -7906.2246 8157.6929 c-7906.2368 8157.6602 -7906.2578 8157.6494 -7906.2896 8157.6514 c-7907.585 8157.9336 -7908.9634 8158.2192 -7910.2368 8157.7002 c-7910.269 8157.6904 -7910.3008 8157.7026 -7910.311 8157.7344 c-7910.3086 8157.7559 -7910.2974 8157.7881 -7910.2759 8157.7974 c-7910.2759 8157.7974 lf-7910.7266 8159.624 m-7908.813 8160.0928 -7906.9009 8160.5073 -7904.9414 8160.7271 c-7904.9102 8160.7378 -7904.8887 8160.7158 -7904.8794 8160.6831 c-7904.8818 8160.6631 -7904.9023 8160.6318 -7904.9238 8160.6318 c-7906.8823 8160.4111 -7908.7954 8159.9858 -7910.707 8159.5166 c-7910.729 8159.5186 -7910.7598 8159.5298 -7910.7695 8159.5615 c-7910.7695 8159.583 -7910.7583 8159.6143 -7910.7266 8159.624 c-7910.7266 8159.624 lf-7911.52 8162.0386 m-7909.0854 8162.8638 -7906.4512 8162.458 -7903.9321 8162.4912 c-7903.8994 8162.4912 -7903.8794 8162.4697 -7903.8794 8162.437 c-7903.8818 8162.415 -7903.9023 8162.395 -7903.9346 8162.395 c-7906.4438 8162.3193 -7909.0674 8162.7881 -7911.481 8161.9297 c-7911.5142 8161.9302 -7911.5454 8161.9424 -7911.5552 8161.9639 c-7911.5542 8161.9951 -7911.5425 8162.0273 -7911.52 8162.0386 c-7911.52 8162.0386 lf-7906.6406 8163.2529 m-7905.2446 8163.9482 -7903.6367 8163.8066 -7902.1206 8163.8706 c-7902.0879 8163.8682 -7902.0688 8163.8462 -7902.0688 8163.8154 c-7902.0698 8163.7935 -7902.0918 8163.7622 -7902.123 8163.7622 c-7903.6001 8163.624 -7905.2354 8163.9263 -7906.5903 8163.165 c-7906.623 8163.1558 -7906.6543 8163.167 -7906.665 8163.1895 c-7906.6743 8163.2114 -7906.6631 8163.2432 -7906.6406 8163.2529 c-7906.6406 8163.2529 lf-7905.9282 8159.8281 m-7904.979 8159.8008 -7904.02 8159.7734 -7903.0703 8159.7466 c-7903.0391 8159.7446 -7903.0176 8159.7231 -7903.02 8159.6914 c-7903.02 8159.6592 -7903.0415 8159.6382 -7903.0742 8159.6401 c-7904.0234 8159.667 -7904.9834 8159.6943 -7905.9321 8159.7217 c-7905.9634 8159.7217 -7905.9839 8159.7446 -7905.9839 8159.7759 c-7905.9834 8159.8081 -7905.96 8159.8286 -7905.9282 8159.8281 c-7905.9282 8159.8281 lf-7903.7456 8157.439 m-7903.2759 8157.4678 -7902.7954 8157.4751 -7902.3247 8157.4951 c-7902.3032 8157.4946 -7902.272 8157.4722 -7902.2729 8157.4399 c-7902.2734 8157.4072 -7902.2959 8157.3882 -7902.3281 8157.3882 c-7902.7974 8157.3906 -7903.2681 8157.3408 -7903.7378 8157.3423 c-7903.7695 8157.333 -7903.7896 8157.3545 -7903.7998 8157.3882 c-7903.7993 8157.4194 -7903.7778 8157.4399 -7903.7456 8157.439 c-7903.7456 8157.439 lf-7911.5566 8159.6377 m-7911.1553 8159.9146 -7910.7114 8160.083 -7910.231 8160.1543 c-7910.1978 8160.1641 -7910.1782 8160.1416 -7910.167 8160.1201 c-7910.1567 8160.0889 -7910.1792 8160.0576 -7910.2017 8160.0576 c-7910.6719 8159.9761 -7911.104 8159.8057 -7911.5073 8159.5503 c-7911.5386 8159.541 -7911.5713 8159.542 -7911.5806 8159.5742 c-7911.5903 8159.5967 -7911.5786 8159.6279 -7911.5566 8159.6377 c-7911.5566 8159.6377 lf-7912.7769 8165.4878 m-7910.3208 8165.9302 -7907.8848 8166.4038 -7905.3857 8166.1294 c-7905.3638 8166.1294 -7905.3433 8166.1074 -7905.3442 8166.0752 c-7905.3442 8166.0439 -7905.3662 8166.0225 -7905.3887 8166.0225 c-7907.8774 8166.2769 -7910.3208 8165.8882 -7912.7583 8165.3809 c-7912.7798 8165.3818 -7912.812 8165.3936 -7912.8208 8165.4248 c-7912.8208 8165.4463 -7912.8086 8165.4785 -7912.7769 8165.4878 c-7912.7769 8165.4878 lf0.195 0.156 0.117 0 k-7912.752 8154.0479 m-7910.3833 8153.6714 -7907.9922 8153.751 -7905.6162 8153.9937 c-7905.585 8153.9912 -7905.563 8153.9697 -7905.563 8153.9385 c-7905.5649 8153.917 -7905.5864 8153.8857 -7905.6079 8153.8857 c-7907.9946 8153.6455 -7910.3774 8153.563 -7912.7559 8153.9424 c-7912.7886 8153.9424 -7912.8086 8153.9639 -7912.8081 8153.9966 c-7912.8071 8154.0278 -7912.7856 8154.0498 -7912.752 8154.0479 c-7912.752 8154.0479 lf0.335 0.268 0.201 0 k-7912.0215 8153.5142 m-7909.5142 8153.5186 -7907.001 8153.6807 -7904.5039 8153.2998 c-7904.4727 8153.2974 -7904.4512 8153.2769 -7904.4526 8153.2446 c-7904.4536 8153.2119 -7904.4761 8153.1919 -7904.5073 8153.1919 c-7907.0049 8153.5728 -7909.5161 8153.4326 -7912.0239 8153.4097 c-7912.0464 8153.4097 -7912.0674 8153.4302 -7912.0649 8153.4634 c-7912.0649 8153.4951 -7912.043 8153.5151 -7912.0215 8153.5142 c-7912.0215 8153.5142 lf0.205 0.164 0.123 0 k-7913.563 8153.7295 m-7912.0903 8154.0713 -7910.5942 8153.8057 -7909.1255 8153.624 c-7909.0942 8153.624 -7909.0737 8153.6006 -7909.0854 8153.5698 c-7909.0864 8153.5386 -7909.1079 8153.5166 -7909.1401 8153.5278 c-7910.5967 8153.687 -7912.0825 8153.9863 -7913.5337 8153.6226 c-7913.5649 8153.624 -7913.5967 8153.6362 -7913.5962 8153.667 c-7913.6055 8153.689 -7913.585 8153.7202 -7913.563 8153.7295 c-7913.563 8153.7295 lf-7906.9399 8153.1982 m-7905.7842 8153.3247 -7904.6138 8153.2178 -7903.479 8152.9937 c-7903.4575 8152.9814 -7903.437 8152.96 -7903.4482 8152.9282 c-7903.4487 8152.9063 -7903.481 8152.8857 -7903.5024 8152.8975 c-7904.6367 8153.144 -7905.7778 8153.1978 -7906.9326 8153.0918 c-7906.9658 8153.0928 -7906.9849 8153.1143 -7906.9951 8153.1362 c-7906.9946 8153.168 -7906.9727 8153.189 -7906.9399 8153.1982 c-7906.9399 8153.1982 lf0.335 0.268 0.201 0 k-7913.8545 8155.8506 m-7912.5078 8156.5918 -7910.8926 8156.001 -7909.4414 8156.0449 c-7909.4087 8156.0439 -7909.3887 8156.0225 -7909.3887 8155.9897 c-7909.3906 8155.9688 -7909.4126 8155.9482 -7909.4438 8155.9482 c-7910.875 8155.8936 -7912.4688 8156.4834 -7913.8032 8155.7534 c-7913.8247 8155.7432 -7913.856 8155.7554 -7913.8774 8155.7778 c-7913.8872 8155.7983 -7913.875 8155.8311 -7913.8545 8155.8506 c-7913.8545 8155.8506 lf-7912.481 8157.9678 m-7910.2583 8158.4482 -7907.9761 8158.019 -7905.7368 8157.9658 c-7905.7041 8157.9648 -7905.6841 8157.9424 -7905.6841 8157.9111 c-7905.6865 8157.8896 -7905.7183 8157.8706 -7905.7383 8157.8706 c-7907.9697 8157.8809 -7910.2383 8158.3838 -7912.4614 8157.8608 c-7912.4839 8157.8608 -7912.5151 8157.8721 -7912.5239 8157.9058 c-7912.5239 8157.9258 -7912.5122 8157.958 -7912.481 8157.9678 c-7912.481 8157.9678 lf-7906.6138 8154.5439 m-7904.936 8155.3721 -7903.0854 8155.9058 -7901.1895 8155.7646 c-7901.1582 8155.7646 -7901.1377 8155.7422 -7901.1392 8155.71 c-7901.1392 8155.6782 -7901.1606 8155.6577 -7901.1934 8155.6592 c-7903.0674 8155.8193 -7904.9063 8155.2642 -7906.5737 8154.458 c-7906.5942 8154.4482 -7906.6274 8154.4482 -7906.6367 8154.4814 c-7906.647 8154.5034 -7906.647 8154.5342 -7906.6138 8154.5439 c-7906.6138 8154.5439 lfu0.5 0.85 1 0.45 k-8059.5864 8161.311 m-8059.6118 8161.8911 -8059.1528 8162.5903 -8057.7534 8163.3936 C-8057.4385 8163.4063 -8055.981 8163.4272 -8053.6753 8163.4521 C-8053.6753 8161.2256 L-8055.7246 8161.249 -8057.7041 8161.29 -8059.5864 8161.311 Cf-8059.0952 8160.3721 m-8053.6753 8160.248 L-8053.6753 8159.2178 L-8057.2305 8159.3623 L-8058.4009 8159.7334 -8059.0952 8160.3721 Vf0.5 0.85 1 0.32 k-8053.6753 8160.229 m-8059.061 8160.3462 L-8059.356 8160.6182 -8059.5713 8160.96 -8059.5864 8161.3311 C-8057.7041 8161.3096 -8055.7246 8161.2881 -8053.6753 8161.2646 C-8053.6753 8160.229 Lf0.5 0.85 1 0.45 k-7948.7368 8160.021 m-8026.9448 8160.9438 -8053.6943 8161.2446 V-8053.6943 8163.4521 L-8037.4009 8163.6362 -7978.5767 8164.1104 Y-7944.335 8163.0674 L-7945.043 8159.9722 L-7948.7368 8160.021 Lf0.5 0.85 1 0.12 k-8053.6943 8159.2178 m-8053.6943 8160.248 L-7945.0122 8158.4033 L-7944.9697 8156.2666 L-7978.2417 8156.1162 L-8053.6943 8159.2178 Lfu0.065 0.052 0.039 0 k-7921.6592 8154.5498 m-7921.623 8155.8286 L-7921.8818 8154.521 L-7940.4834 8159.0591 L-7941.5239 8158.6768 L-7941.4658 8159.0088 -7941.4263 8159.3599 -7941.417 8159.7256 c-7941.4102 8159.9312 -7941.4146 8160.1318 -7941.4263 8160.3286 C-7932.9727 8161.502 -7923.5498 8157.0752 -7921.623 8155.8286 C-7921.3262 8166.1592 L-7920.6274 8166.2646 L-7920.3906 8158.6104 L-7914.7681 8158.5576 L-7914.6758 8156.417 -7914.6582 8154.4248 -7914.8271 8153.4385 C-7921.6592 8154.5498 Lf0.4 0.7 1 0 k-7945.043 8159.9912 m-7945.0122 8158.3838 L-8053.6943 8160.229 L-8053.6943 8161.2646 L-8026.9448 8160.9639 -7945.043 8159.9912 YfUU0.025 0.02 0.015 0 k-7909.3208 8162.4326 m-7909.3208 8162.4658 -7909.2993 8162.4858 -7909.2666 8162.4858 c-7906.2578 8162.5166 -7904.0078 8162.3486 -7901.0015 8162.2622 C-7900.9951 8162.1689 L-7903.9126 8162.2734 -7906.3472 8162.4111 -7909.2705 8162.3774 C-7909.3032 8162.3799 -7909.3223 8162.4014 -7909.3208 8162.4326 Cf-7900.9858 8162.1689 m-7900.9946 8162.147 L-7900.9951 8162.1689 L-7900.9927 8162.1689 -7900.9897 8162.1689 -7900.9858 8162.1689 Cf-7905.0352 8160.8271 m-7906.0322 8160.6953 -7906.9258 8161.1689 -7907.7974 8161.6006 C-7907.8306 8161.6113 -7907.8398 8161.6431 -7907.8286 8161.6753 C-7907.8169 8161.6958 -7907.7847 8161.7065 -7907.7642 8161.6943 c-7906.9126 8161.2334 -7906.0176 8160.8232 -7905.0542 8160.9233 c-7903.6943 8161.0654 -7902.4902 8161.7783 -7901.1118 8161.856 C-7901.0327 8161.7622 L-7902.6265 8161.6689 -7903.4512 8161.0264 -7905.0352 8160.8271 cfUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(New Pattern 50)0 Au0 J 0 j 1 w 4 M []0 d0 XR-8058.5864 8165.4033 m-7931.4634 8165.4033 L-7931.4634 8117.8184 L-8058.5864 8117.8184 L-8058.5864 8165.4033 Lnu*u0 O0.9529 0.949 0.1961 0.0745 k-8032.3794 8149.8198 m-8032.4097 8149.6714 L-8034.5713 8143.7681 -8035.5303 8141.041 -8035.8618 8139.6929 c-8035.9521 8139.6929 L-8036.2817 8141.0103 -8037.3618 8143.7383 -8039.5537 8149.6714 c-8039.583 8149.8198 L-8032.3794 8149.8198 lf1 D-8042.7046 8158.3711 m-8044.2056 8161.9409 -8044.9858 8164.1118 -8042.7046 8164.3198 c-8042.7046 8165.3711 L-8045.2856 8165.3408 -8048.167 8165.3198 -8050.9282 8165.3198 c-8054.6514 8165.3198 -8057.1138 8165.3408 -8058.5864 8165.3711 c-8058.5864 8164.3198 L-8056.6929 8164.1118 -8055.6406 8161.9702 -8048.1377 8144.9063 c-8036.2817 8117.8184 L-8034.4502 8117.8184 L-8022.7446 8144.9063 L-8015.3911 8161.9111 -8014.311 8164.1118 -8012.4751 8164.3198 c-8012.4751 8165.3711 L-8014.1006 8165.3408 -8016.5024 8165.3198 -8020.1631 8165.3198 c-8023.1353 8165.3198 -8026.2559 8165.3408 -8029.2886 8165.3711 c-8029.2886 8164.3198 L-8027.0674 8164.1118 -8027.9082 8161.9111 -8029.3481 8158.3711 C-8042.7046 8158.3711 lf*U*u0 D-7987.6626 8133.4849 m-7987.6626 8129.875 -7989.9399 8127.498 -7993.7158 8127.498 c-7994.8247 8127.498 -7995.6631 8127.6191 -7996.1138 8127.6479 c-7996.1138 8139.9512 L-7995.4536 8140.0122 -7994.7944 8140.0122 -7994.3154 8140.0122 c-7992.7866 8140.0122 -7991.2886 8139.5303 -7990.2705 8138.8086 c-7988.981 8137.937 -7987.6626 8136.1914 -7987.6626 8133.5449 C-7987.6626 8133.4849 lf1 D-8006.667 8137.7959 m-8006.667 8122.0479 -8006.667 8119.832 -8009.1279 8119.6816 c-8009.1279 8118.7217 L-8007.6289 8118.6626 -8004.9038 8118.6025 -8002.1528 8118.5718 c-8000.2402 8118.5122 -7996.981 8118.4214 -7994.7344 8118.3809 c-7991.1689 8118.3809 -7988.1714 8118.8286 -7985.5913 8119.666 c-7980.939 8121.251 -7976.5566 8125.2559 -7976.5566 8133.063 c-7976.5566 8138.1465 -7978.9878 8141.7222 -7981.0898 8143.4639 c-7982.1694 8144.4248 -7983.3999 8145.2354 -7984.3608 8145.7158 c-7984.3608 8145.8662 L-7982.1094 8148.8945 -7980.189 8151.4658 -7973.9766 8160.0454 c-7972.0864 8162.4678 -7970.4966 8164.1416 -7969.3262 8164.3809 c-7969.3262 8165.4033 L-7971.2466 8165.4033 -7973.5864 8165.2881 -7975.7158 8165.2881 c-7977.9375 8165.2881 -7979.4385 8165.4033 -7981.0288 8165.4033 c-7982.2593 8165.4033 -7983.3105 8165.3442 -7984.0903 8164.6758 c-7987.6016 8159.251 -7991.4985 8153.1592 -7994.7046 8148.1167 c-7995.0942 8148.1167 -7995.543 8148.1167 -7996.1138 8148.1167 c-7996.1138 8150.689 L-7996.1138 8161.9297 -7996.0234 8164.1719 -7993.7759 8164.3809 c-7993.7759 8165.373 L-7995.2144 8165.3442 -7998.5054 8165.3184 -8001.2856 8165.3184 c-8004.5151 8165.3184 -8007.4785 8165.3442 -8009.0986 8165.373 c-8009.0986 8164.3809 L-8006.6382 8164.1719 -8006.667 8161.9297 -8006.667 8144.9951 C-8006.667 8137.7959 lf*U*u0 D-7956.0425 8144.9961 m-7956.0425 8161.8975 -7956.0425 8164.0518 -7958.8696 8164.3809 C-7958.8696 8165.373 l-7956.9751 8165.3442 -7953.6406 8165.3184 -7950.3687 8165.3184 c-7947.2158 8165.3184 -7944.1553 8165.3442 -7941.8745 8165.373 C-7941.8745 8164.3809 l-7944.8442 8164.3809 -7944.8745 8161.9282 -7944.8745 8144.9961 C-7944.8745 8127.5542 L-7937.4058 8127.5542 l-7934.5854 8127.5542 -7933.1162 8128.3633 -7932.4858 8130.666 C-7931.4937 8130.666 l-7931.4937 8125.873 -7931.4634 8121.8184 -7931.4634 8118.5742 c-7935.9351 8118.605 -7941.3345 8118.6353 -7946.6465 8118.6353 C-7954.3311 8118.6353 l-7959.1401 8118.6353 -7964.583 8118.605 -7969.5479 8118.5742 c-7969.5479 8121.7881 -7969.519 8125.873 -7969.519 8130.666 C-7968.4937 8130.666 l-7967.9521 8128.5127 -7966.3574 8127.5542 -7963.5303 8127.5542 C-7956.0425 8127.5542 l-7956.0425 8144.9961 Lf*UUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(New Pattern 6)0 Au1 Ap0 J 0 j 1 w 4 M []0 d0 XR-8059.3359 8142.4033 m-8059.3359 8166.4033 L-8049.3359 8166.4033 L-8049.3359 8142.4033 L-8059.3359 8142.4033 Ln0 Ap0 O1 g-8049.3359 8144.4033 m-8049.6567 8144.4033 -8049.9722 8144.4214 -8050.2847 8144.4512 c-8052.1743 8144.6289 -8053.9063 8145.3374 -8055.3423 8146.4209 c-8056.8394 8147.5498 -8058.0063 8149.085 -8058.6807 8150.8672 c-8059.0986 8151.9678 -8059.3359 8153.1558 -8059.3359 8154.4033 c-8059.3359 8156.2656 -8058.8184 8158.0034 -8057.9321 8159.4951 c-8056.189 8162.4302 -8052.9966 8164.4033 -8049.3359 8164.4033 C-8049.3359 8144.4033 Lf0 R0 G1 J 1 j 0.5 w-8049.3359 8164.085 m-8052.3657 8163.1289 -8055.1934 8161.4702 -8057.9321 8159.4951 CS-8049.3359 8158.4521 m-8052.4863 8156.0474 -8055.543 8153.3169 -8058.6807 8150.8672 CS-8055.3423 8146.4209 m-8053.2769 8147.5122 -8051.2881 8148.8706 -8049.3359 8150.3599 CS-8050.2847 8144.4512 m-8049.9673 8144.5342 -8049.6494 8144.6182 -8049.3359 8144.7178 CS-8055.3423 8146.4209 m-8053.9058 8145.3394 -8052.1743 8144.6289 -8050.2847 8144.4512 CS-8058.6807 8150.8672 m-8059.0986 8151.9678 -8059.3359 8153.1558 -8059.3359 8154.4033 c-8059.3359 8156.2656 -8058.8174 8158.0034 -8057.9321 8159.4951 CS-8049.3359 8144.4033 m-8049.6567 8144.4033 -8049.9722 8144.4214 -8050.2847 8144.4512 CS-8055.3423 8146.4209 m-8056.8394 8147.5498 -8058.0063 8149.085 -8058.6807 8150.8672 CS-8057.9321 8159.4951 m-8056.189 8162.4302 -8052.9966 8164.4033 -8049.3359 8164.4033 CSU%AI8_EndBrushPattern%AI8_BeginBrushPattern(New Pattern 62)0 Au0 J 0 j 1 w 4 M []0 d0 XR-8059.5864 8166.4033 m-8059.5864 8128.1338 L-8021.3169 8128.1338 L-8021.3169 8166.4033 L-8059.5864 8166.4033 Ln0 O1 0.14 0.09 0 k-8021.3169 8149.3071 m-8021.3169 8140.7441 L-8059.5864 8140.7441 L-8059.5864 8149.3071 L-8021.3169 8149.3071 Lf-8021.3169 8152.5 m-8021.3169 8151.8262 L-8059.5864 8151.8262 L-8059.5864 8152.5 L-8021.3169 8152.5 LfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(New Pattern 63)0 Au0 J 0 j 1 w 4 M []0 d0 XR-8059.5864 8166.4033 m-8059.5864 8128.1338 L-8021.3169 8128.1338 L-8021.3169 8166.4033 L-8059.5864 8166.4033 Ln0 O1 0.14 0.09 0 k-8021.3169 8145.2295 m-8021.3169 8153.793 L-8033.9272 8153.793 L-8033.9272 8166.4033 L-8042.4902 8166.4033 L-8042.4927 8145.2295 L-8042.4902 8145.2295 L-8042.4902 8145.229 L-8021.3169 8145.2295 Lf-8021.3169 8142.7114 m-8045.0098 8142.7114 L-8045.0098 8166.4033 L-8045.6831 8166.4033 L-8045.6841 8142.0361 L-8021.3169 8142.0361 L-8021.3169 8142.7114 LfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(New Pattern 64)0 Au0 J 0 j 1 w 4 M []0 d0 XR-8059.5864 8166.4023 m-8059.5864 8128.1318 L-8021.3169 8128.1318 L-8021.3169 8166.4023 L-8059.5864 8166.4023 Ln0 O1 0.14 0.09 0 k-8021.3169 8140.7422 m-8046.9761 8140.7422 L-8046.9761 8166.4023 L-8038.4126 8166.4033 L-8038.4126 8149.3066 L-8021.3169 8149.3066 L-8021.3169 8140.7422 Lf-8021.3169 8151.8257 m-8035.8945 8151.8257 L-8035.8945 8166.4033 L-8035.2202 8166.4033 L-8035.2202 8152.499 L-8021.3169 8152.499 L-8021.3169 8151.8257 LfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(New Pattern 65)0 Au1 Ap0 J 0 j 1 w 4 M []0 d0 XR-8031.6489 8138.8638 m-8059.189 8138.8638 L-8059.189 8166.4033 L-8031.6489 8166.4033 L-8031.6489 8138.8638 Ln0 O0 0.55 1 0.12 k-8031.4282 8152.103 m-8059.5864 8152.103 L-8059.5864 8153.229 L-8031.4282 8153.229 L-8031.4282 8152.103 Lfu0 0.55 1 0.3 k-8058.5679 8139.9248 m-8058.9966 8141.9287 -8057.7729 8145.5542 -8054.6738 8148.6543 c-8051.5742 8151.7529 -8047.9321 8153.063 -8045.9458 8152.5488 C-8045.9458 8152.5488 L-8045.4614 8150.5928 -8046.7383 8146.915 -8049.8369 8143.8174 c-8052.9321 8140.7217 -8056.5986 8139.5098 -8058.5679 8139.9248 Cf0 0.39 0.7 0.12 k-8058.5679 8165.3945 m-8058.9966 8163.3921 -8057.7729 8159.7646 -8054.6738 8156.665 c-8051.5742 8153.5674 -8047.9321 8152.2568 -8045.9458 8152.7705 C-8045.9458 8152.7705 L-8045.4614 8154.7271 -8046.7383 8158.4038 -8049.8369 8161.5034 c-8052.9321 8164.5986 -8056.5986 8165.8096 -8058.5679 8165.3945 CfUu0 0.55 1 0.3 k-8044.7646 8165.3945 m-8045.1934 8163.3921 -8043.9702 8159.7646 -8040.8706 8156.665 c-8037.772 8153.5674 -8034.1294 8152.2568 -8032.144 8152.7705 C-8032.1431 8152.7705 L-8031.6582 8154.7271 -8032.936 8158.4038 -8036.0337 8161.5034 c-8039.1294 8164.5986 -8042.7954 8165.8096 -8044.7646 8165.3945 Cf0 0.39 0.7 0.12 k-8044.7646 8139.9248 m-8045.1934 8141.9287 -8043.9702 8145.5542 -8040.8706 8148.6543 c-8037.772 8151.7529 -8034.1294 8153.063 -8032.144 8152.5488 C-8032.1431 8152.5488 L-8031.6582 8150.5928 -8032.936 8146.915 -8036.0337 8143.8174 c-8039.1294 8140.7217 -8042.7954 8139.5098 -8044.7646 8139.9248 CfUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(New Pattern 67)0 Au0 Ap0 J 0 j 1 w 4 M []0 d0 XR-8032.0474 8138.4878 m-8059.5864 8138.4878 L-8059.5864 8166.0273 L-8032.0474 8166.0273 L-8032.0474 8138.4878 Ln0 O0 0.55 1 0.12 k-8046.3462 8156.7656 m-8046.3462 8166.4033 L-8045.2207 8166.4033 L-8045.2207 8156.7656 L-8046.3462 8156.7656 Lf0 0.55 1 0.3 k-8050.0098 8152.2793 m-8048.896 8150.5586 -8045.4673 8148.8608 -8041.083 8148.8608 c-8036.7017 8148.8608 -8033.2002 8150.5098 -8032.1582 8152.2778 C-8032.1582 8152.2778 L-8033.2002 8154.0039 -8036.7017 8155.7007 -8041.083 8155.7007 c-8045.4614 8155.7007 -8048.9102 8153.9648 -8050.0098 8152.2793 CfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(New Pattern 69)0 Au0 J 0 j 1 w 4 M []0 d0 XR-8032.0474 8138.8638 m-8059.5864 8138.8638 L-8059.5864 8166.4033 L-8032.0474 8166.4033 L-8032.0474 8138.8638 Ln0 O0 0.55 1 0.3 k-8050.0098 8152.6553 m-8048.896 8150.9346 -8045.4673 8149.2358 -8041.083 8149.2358 c-8036.7017 8149.2358 -8033.2002 8150.8857 -8032.1582 8152.6538 C-8032.1582 8152.6538 L-8033.2002 8154.3799 -8036.7017 8156.0767 -8041.083 8156.0767 c-8045.4614 8156.0767 -8048.9102 8154.3408 -8050.0098 8152.6553 CfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(New Pattern 8)0 Au0 J 0 j 1 w 4 M []0 d0 XR-8058.5386 8163.7158 m-7951.3818 8163.7158 L-7951.3818 8149.5889 L-8058.5386 8149.5889 L-8058.5386 8163.7158 Lnu0 O0 0 0 1 k-8056.8696 8163.0264 m-8057.4399 8165.4033 -8057.4048 8161.4072 V-8057.6343 8158.2065 L-8058.2031 8155.8584 L-8058.0366 8153.5264 L-8056.5366 8152.8584 -8039.8696 8151.5264 V-8033.2031 8150.1919 -8024.2031 8150.1919 V-7958.98 8150.8799 -7954.0776 8152.2881 v-7994.9746 8150.2783 -7997.5552 8150.915 v-7958.4434 8152.563 -7955.4409 8153.835 v-7993.377 8151.9502 -7996.7534 8153.5806 v-7961.835 8155.3135 -7957.6074 8156.9346 v-7964.3081 8156.2866 -7966.0991 8156.4858 v-7962.9761 8156.9736 l-7968.0054 8156.9058 l-7970.9082 8156.5322 l-7963.0386 8157.6455 -7962.4897 8158.2119 v-7958.9014 8157.5342 -7973.105 8157.7881 v-8006.7041 8153.8584 -8056.8696 8163.0264 Vf/BBAccumRotation (5.805971) XT0 R0 0 0 0.5 K0.025 w-8058.5366 8152.5264 m-8038.2534 8150.6982 -8018.5591 8149.624 v-7975.7378 8149.9058 -7971.1602 8150.3042 v-7958.7495 8150.4346 -7951.3823 8151.4302 vS/BBAccumRotation (5.805971) XT0 0 0 1 K-7996.4233 8149.811 m-7999.8823 8149.4302 -8025.8472 8149.6826 Y-8036.2134 8149.563 -8058.5366 8152.5264 YS/BBAccumRotation (5.805971) XT-7995.5737 8153.0674 m-7964.9473 8153.9858 -7958.2471 8154.6362 vS/BBAccumRotation (5.805971) XT0 0 0 0.5 K-8004.2065 8157.6079 m-7968.957 8159.021 -7965.9922 8159.5439 vS/BBAccumRotation (5.805971) XTUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(New Pattern 83)0 Au0 J 0 j 1 w 4 M []0 d0 XR-8058.5864 8165.3394 m-7844.9873 8165.3394 L-7844.9873 8157.5386 L-8058.5864 8157.5386 L-8058.5864 8165.3394 Ln0 O0 0 0 1 k-8058.5864 8161.4385 m-8048.5718 8163.9302 -8041.7734 8165.2783 -8029.7871 8165.3394 c-8016.8047 8165.4033 -7951.7866 8165.3394 y-7886.7681 8165.4033 -7873.7866 8165.3394 v-7861.7993 8165.2783 -7855.0015 8163.9302 -7844.9873 8161.4385 C-7855.0015 8158.9463 -7861.7993 8157.5986 -7873.7866 8157.5386 c-7886.7681 8157.4727 -7951.7866 8157.5386 y-8016.8047 8157.4727 -8029.7871 8157.5386 v-8041.7734 8157.5986 -8048.5718 8158.9463 -8058.5864 8161.4385 CfU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 6 pt Flat / Adobe Calligraphic Brush T) -(ool/ 10 pt Oval/ Adobe Calligraphic Brush Tool/ 12 pt Oval / Adobe Cal) -(ligraphic Brush Tool/ 20 pt Oval/ Adobe Calligraphic Brush Tool/ 25 pt) -( Round / Adobe Calligraphic Brush Tool/ 50 pt Flat/ Adobe Scatter Brus) -(h Tool/ Dog Tracks/ Adobe Scatter Brush Tool/ Fall Leaf/ Adobe Scatter) -( Brush Tool/ Ladybug/ Adobe Scatter Brush Tool/ Push Pin/ Adobe Scatte) -(r Brush Tool/ Strawberry/ Adobe Scatter Brush Tool/ Twinkle Star / Ado) -(be ArtOnPath Brush Tool/ Marker/ Adobe ArtOnPath Brush Tool/ Tapered S) -(troke/ Adobe ArtOnPath Brush Tool/ Arrow/ Adobe ArtOnPath Brush Tool/ ) -(Paintbrush/ Adobe ArtOnPath Brush Tool/ Type/ Adobe PatternOnPath Brus) -(h Tool/ Double Lines/ Adobe PatternOnPath Brush Tool/ Laurel/ Adobe Pa) -(tternOnPath Brush Tool/ Rope /) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Scatter Brush Tool)(Dog Tracks)(1 /New Pattern 41/ 1 0 0 0 1 / 0 1 1 0 1 1 0 0 0 0 -90 -90 0 1 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Scatter Brush Tool)(Fall Leaf)(1 /New Pattern 34/ 1 0.0745 0.9 0.9019 0.18 / 0 0.602793 1 1 0.1 1 1 -) -(1 1 1 -180 180 1 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Scatter Brush Tool)(Ladybug)(1 /New Pattern 10/ 5 0.898039 0 0 / 0 1 1 0 0.803911 1.2 1 -1.55 1.55 ) -(1 -180 180 1 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Scatter Brush Tool)(Push Pin)(1 /New Pattern 36/ 1 0.025 0.1 0.475 0 / 0 1 1 0 0.401676 1 1 -1.06145) -( 1.06 1 -180 180 1 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Scatter Brush Tool)(Strawberry)(1 /New Pattern 37/ 1 0 0 0 1 / 0 0.803911 1 1 0.803911 1 1 -0.5 0.5 1 ) -(-75 75.419 1 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Scatter Brush Tool)(Twinkle Star )(1 /New Pattern 2/ 0 1 / 1 0.5 1 1 0.25 1 1 -0.5 0.5 1 0 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Arrow)(1 / New Pattern 45/ / / / / 5 0.898039 0 0 /  2 0 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Marker)(1 / New Pattern 8/ / / / / 0 0 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Paintbrush)(1 / New Pattern 5/ / / / / 1 0.5 0.85 1 0.45 /  0 0 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Tapered Stroke)(1 / New Pattern 83/ / / / / 1 0 0 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Type)(1 / New Pattern 50/ / / / / 1 0.952941 0.94902 0.196078 0.0745098 /  1) -( 0 1 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe PatternOnPath Brush Tool)(Double Lines)(1 / New Pattern 62/ New Pattern 63/ New Pattern 64/ / / 1 1 0.14 0.09 ) -(0 /  1 0 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe PatternOnPath Brush Tool)(Laurel)(1 / New Pattern 65/ New Pattern 42/ New Pattern 67/ / New Pattern 69/ ) -(1 0 0.55 1 0.3 /  1 0 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe PatternOnPath Brush Tool)(Rope )(1 / New Pattern 1/ / / New Pattern 3/ New Pattern 6/ 5 0 0 0 /  1 0 1 ) -(0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(10 pt Oval)(1 1 19 15 15 130 130 2 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(12 pt Oval )(1 7 17 45 45 0 0 2 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(20 pt Oval)(1 20 20 20 100 40 80 0 2 1 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(25 pt Round )(1 10 40 100 100 0 0 2 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(50 pt Flat)(1 40 60 0 0 44 44 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(6 pt Flat )(1 4 8 10 10 90 90 2 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration]) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0 0 0 1 k(C=0 M=0 Y=0 K=100) Pc0 0.1 1 0 k(C=0 M=10 Y=100 K=0) Pc0 0.5 0 0 k(C=0 M=50 Y=0 K=0) Pc0 0.5 1 0 k(C=0 M=50 Y=100 K=0) Pc1 0.55 1 0 k(C=100 M=55 Y=100 K=0) Pc1 0.9 0.1 0 k(C=100 M=90 Y=10 K=0) Pc0.15 1 1 0 k(C=15 M=100 Y=100 K=0) Pc0.45 0.9 0 0 k(C=45 M=90 Y=0 K=0) Pc0.5 0.4 0.3 0 k(C=50 M=40 Y=30 K=0) Pc0.5 0.85 1 0 k(C=50 M=85 Y=100 K=0) Pc0.75 0.05 1 0 k(C=75 M=5 Y=100 K=0) Pc0.75 0.9 0 0 k(C=75 M=90 Y=0 K=0) Pc0.8 0.05 0 0 k(C=80 M=5 Y=0 K=0) PcBb2 (Black, White) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Black, White) PcBb2 (Chrome) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Chrome) PcBb2 (Rainbow) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Rainbow) PcBb0 0 0 0 Bh2 (Yellow & Orange Radial) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Yellow & Orange Radial) Pc(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Brick) Pc(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Confetti) Pc(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Leaves - Fall ) Pc(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Stripes) Pc1 0.56 0 0 (PANTONE 293 CVC) 0 x(PANTONE 293 CVC) Pc1 0 0 0 (PANTONE Process Cyan CV) 0 x(PANTONE Process Cyan CV) Pc1 0.57 0 0.02 (PANTONE 293 C) 0 x(PANTONE 293 C) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 Auu1 Ap0 O0 0 0 0 k0 J 0 j 1 w 4 M []0 d0 XR314.0508 68.1807 m-214.0835 68.1807 L-214.0835 206.2231 L314.0508 206.2231 L314.0508 68.1807 Lfu1 0 0 0 k0 R1 0.56 0 0 (PANTONE 293 CVC) 0 X6.4654 w298.082 84.1699 m298.082 190.2358 L-25.3042 190.2358 L-25.3042 84.1699 L298.082 84.1699 Lb1 0.56 0 0 k-25.3296 84.1699 m-25.3296 190.2358 L-198.1138 190.2358 L-198.1138 84.1699 L-25.3296 84.1699 Lb*u0 Ap0 0 0 0 k1 w-157.7173 104.7539 m-173.5864 104.7539 -176.5562 114.0889 -175.8716 124.6934 c-163.0669 124.6934 L-163.0669 118.8457 -162.813 113.9199 -155.7603 113.9199 c-151.437 113.9199 -149.3208 116.7305 -149.3208 120.877 c-149.3208 131.915 -175.1099 132.5928 -175.1099 150.8306 c-175.1099 160.4189 -170.5288 168.0542 -154.9136 168.0542 c-142.4409 168.0542 -136.2515 162.4502 -137.0981 149.6455 c-149.5747 149.6455 L-149.5747 154.2231 -150.3364 158.8853 -155.5171 158.8853 c-159.6714 158.8853 -162.1362 156.5928 -162.1362 152.354 c-162.1362 140.7314 -136.3364 141.7471 -136.3364 122.4922 c-136.3364 106.6338 -147.9595 104.7539 -157.7173 104.7539 cf*U*u-87.2896 167.0386 m-87.2896 156.854 L-101.5513 156.854 L-101.5513 105.7773 L-114.3657 105.7773 L-114.3657 156.854 L-128.6206 156.854 L-128.6206 167.0386 L-87.2896 167.0386 lf*U*u-56.814 128.7666 m-69.0366 128.7666 L-63.186 155.2456 L-63.0103 155.2456 l-56.814 128.7666 Lf1 D-75.0532 105.7773 m-71.5825 119.3535 L-54.106 119.3535 L-50.7134 105.7773 L-37.2202 105.7773 L-53.8442 167.0386 L-70.7368 167.0386 L-87.7056 105.7773 l-75.0532 105.7773 Lf*U*u0 D31.9341 167.0386 m31.9341 156.854 L17.6831 156.854 L17.6831 105.7773 L4.8677 105.7773 L4.8677 156.854 L-9.3931 156.854 L-9.3931 167.0386 L31.9341 167.0386 lf*U*u53.8232 157.6157 m59.5107 157.6157 l63.5811 157.6157 66.0439 155.415 66.0439 149.561 c66.0439 145.6509 64.6025 140.5723 59.5107 140.5723 C53.8232 140.5723 l53.8232 157.6157 Lf1 D53.8232 131.1426 m57.1416 131.1426 l66.9736 131.1426 66.2979 124.958 66.2979 117.6611 c66.2979 113.6758 65.958 109.5186 67.6611 105.7773 C80.2119 105.7773 l79.0342 108.3262 78.7725 119.8613 78.7725 123.7725 c78.7725 134.793 70.4619 135.4707 67.6611 135.8154 C67.6611 135.9844 l75.9736 137.3389 79.0342 143.1973 79.0342 151 c79.0342 161.4346 73.4229 167.0386 64.6885 167.0386 C41.0186 167.0386 L41.0186 105.7773 L53.8232 105.7773 l53.8232 131.1426 Lf*U*u0 D118.0518 128.7666 m105.8389 128.7666 L111.6982 155.2456 L111.8604 155.2456 l118.0518 128.7666 Lf1 D99.8115 105.7773 m103.2939 119.3535 L120.7607 119.3535 L124.1729 105.7773 L137.6543 105.7773 L121.0244 167.0386 L104.1279 167.0386 L87.1768 105.7773 l99.8115 105.7773 Lf*U*u0 D139.0332 167.0386 m152.3457 167.0386 L161.8496 122.4922 L162.0293 122.4922 L172.7109 167.0386 L185.3535 167.0386 L169.1465 105.7773 L154.1348 105.7773 L139.0332 167.0386 lf*U*u194.5195 105.7773 m194.5195 167.0386 L227.9512 167.0386 L227.9512 157.6157 L207.3262 157.6157 L207.3262 142.5088 L226.334 142.5088 L226.334 133.0996 L207.3262 133.0996 L207.3262 115.1992 L228.6289 115.1992 L228.6289 105.7773 L194.5195 105.7773 lf*U*u239.7422 105.7773 m239.7422 167.0386 L252.5664 167.0386 L252.5664 115.9609 L271.7344 115.9609 L271.7344 105.7773 L239.7422 105.7773 lf*UUUu*u1 0.57 0 0.02 (PANTONE 293 C) 0 x-138.4106 23.8203 m-142.8228 49.7197 L-135.6846 49.7197 L-133.3169 30.8516 L-133.2451 30.8516 L-129.0483 49.7197 L-120.2598 49.7197 L-116.4575 30.9941 L-116.3857 30.9941 L-114.0181 49.7197 L-107.5254 49.7197 L-111.9736 23.8203 L-120.5825 23.8203 L-125.0308 43.0117 L-125.1025 43.0117 L-129.8374 23.8203 L-138.4106 23.8203 lf*U*u-104.7632 23.8203 m-104.7632 49.7197 L-85.0337 49.7197 L-85.0337 44.6973 L-97.5889 44.6973 L-97.5889 39.3525 L-86.0381 39.3525 L-86.0381 34.3311 L-97.5889 34.3311 L-97.5889 28.8428 L-85.0337 28.8428 L-85.0337 23.8203 L-104.7632 23.8203 lf*U*u-79.4741 39.998 m-79.4741 49.7197 L-75.2056 49.7197 L-75.2056 39.998 L-79.4741 39.998 lf*U*u-50.9565 49.7197 m-43.8179 49.7197 L-53.2524 23.8203 L-61.8257 23.8203 L-70.9727 49.7197 L-63.0454 49.7197 L-57.1982 30.959 L-57.1265 30.959 L-50.9565 49.7197 lf*U*u-40.9844 23.8203 m-40.9844 49.7197 L-21.2549 49.7197 L-21.2549 44.6973 L-33.8101 44.6973 L-33.8101 39.3525 L-22.2593 39.3525 L-22.2593 34.3311 L-33.8101 34.3311 L-33.8101 28.8428 L-21.2549 28.8428 L-21.2549 23.8203 L-40.9844 23.8203 lf*U*u-5.1133 23.8203 m-5.1133 49.7197 L7.2983 49.7197 L12.1768 49.6836 16.2661 47.4951 16.2661 42.9395 c16.2661 39.7471 13.5757 37.8105 10.6704 37.2725 c10.6704 37.2002 L14.1138 36.7344 16.9116 34.5459 16.9116 30.8516 c16.9116 23.3184 7.2983 23.8203 7.0474 23.8203 C-5.1133 23.8203 lf1 D2.061 39.4248 m5.7197 39.46 L7.6567 39.46 8.9126 40.2139 8.9126 42.1865 c8.9126 43.6572 7.6567 44.6973 5.9712 44.6973 c2.061 44.6973 L2.061 39.4248 lf6.2578 28.8428 m8.0518 28.8428 9.3789 29.9189 9.3789 31.5322 c9.3789 32.9678 8.3745 34.3311 6.7603 34.4385 c2.061 34.4385 L2.061 28.8428 L6.2578 28.8428 lf*U*u0 D20.7856 23.8203 m20.7856 49.7197 L40.5146 49.7197 L40.5146 44.6973 L27.9595 44.6973 L27.9595 39.3525 L39.5103 39.3525 L39.5103 34.3311 L27.9595 34.3311 L27.9595 28.8428 L40.5146 28.8428 L40.5146 23.8203 L20.7856 23.8203 lf*U*u44.7119 23.8203 m44.7119 49.7197 L64.4404 49.7197 L64.4404 44.6973 L51.8857 44.6973 L51.8857 39.3525 L63.4365 39.3525 L63.4365 34.3311 L51.8857 34.3311 L51.8857 28.8428 L64.4404 28.8428 L64.4404 23.8203 L44.7119 23.8203 lf*U*u68.4932 49.7197 m78.5381 49.7197 L87.2197 30.4209 L87.29 30.4922 L87.29 49.7197 L93.7471 49.7197 L93.7471 23.8203 L83.8115 23.8203 L75.0225 43.6572 L74.9502 43.6572 L74.9502 23.8203 L68.4932 23.8203 L68.4932 49.7197 lf*U*u116.2744 44.6973 m108.3467 44.6973 L108.3467 49.7197 L131.5552 49.7197 L131.5552 44.6973 L123.4482 44.6973 L123.4482 23.8203 L116.2744 23.8203 L116.2744 44.6973 lf*U*u134.2813 23.8203 m134.2813 49.7197 L141.4902 49.7197 L141.4902 39.46 L150.2793 39.46 L150.2793 49.7197 L157.4531 49.7197 L157.4531 23.8203 L150.2793 23.8203 L150.2793 34.4385 L141.4551 34.4385 L141.4551 23.8203 L134.2813 23.8203 lf*U*u162.2969 23.8203 m162.2969 49.7197 L182.0254 49.7197 L182.0254 44.6973 L169.4707 44.6973 L169.4707 39.3525 L181.0215 39.3525 L181.0215 34.3311 L169.4707 34.3311 L169.4707 28.8428 L182.0254 28.8428 L182.0254 23.8203 L162.2969 23.8203 lf*U*u193.2539 23.8203 m186.0781 23.8203 L186.0781 49.7197 L198.0605 49.7197 L202.4355 49.7197 208.1035 48.5361 208.1035 43.0479 c208.1035 39.1729 205.127 37.1289 201.5039 36.6982 c201.5039 36.5547 L206.0957 36.4473 206.9551 34.1152 207.4219 30.0977 c207.6016 27.9453 207.9961 25.9004 208.6055 23.8203 c200.8223 23.8203 L200.4277 25.6143 200.2129 27.4795 200.0332 29.3086 c199.7461 32.4297 199.6016 33.7207 195.9434 33.7207 c193.2539 33.7207 L193.2539 23.8203 lf1 D196.0508 38.7432 m198.3477 38.7432 200.5703 39.0654 200.5703 41.7197 c200.5703 44.375 198.3477 44.6973 196.0508 44.6973 c193.2539 44.6973 L193.2539 38.7432 L196.0508 38.7432 lf*U*u0 D212.1211 23.8203 m212.1211 49.7197 L231.8496 49.7197 L231.8496 44.6973 L219.2949 44.6973 L219.2949 39.3525 L230.8457 39.3525 L230.8457 34.3311 L219.2949 34.3311 L219.2949 28.8428 L231.8496 28.8428 L231.8496 23.8203 L212.1211 23.8203 lf*U*u236.334 23.8203 m236.334 29.2012 L242.791 29.2012 L242.791 23.8203 L236.334 23.8203 lf*UUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_pattern_AI5 /terminate get execAGM_Gradient /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF